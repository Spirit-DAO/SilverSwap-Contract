{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/libraries/NFTDescriptor.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol';\\r\\nimport '@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol';\\r\\nimport '@cryptoalgebra/integral-core/contracts/libraries/FullMath.sol';\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport './HexStrings.sol';\\r\\nimport './NFTSVG.sol';\\r\\n\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\nlibrary NFTDescriptor {\\r\\n    using TickMath for int24;\\r\\n    using Strings for uint256;\\r\\n    using HexStrings for uint256;\\r\\n\\r\\n    uint256 private constant sqrt10X128 = 1076067327063303206878105757264492625226;\\r\\n\\r\\n    struct ConstructTokenURIParams {\\r\\n        uint256 tokenId;\\r\\n        address quoteTokenAddress;\\r\\n        address baseTokenAddress;\\r\\n        string quoteTokenSymbol;\\r\\n        string baseTokenSymbol;\\r\\n        uint8 quoteTokenDecimals;\\r\\n        uint8 baseTokenDecimals;\\r\\n        bool flipRatio;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        int24 tickCurrent;\\r\\n        int24 tickSpacing;\\r\\n        address poolAddress;\\r\\n    }\\r\\n\\r\\n    function constructTokenURI(ConstructTokenURIParams memory params) public pure returns (string memory) {\\r\\n        string memory name = generateName(params);\\r\\n        string memory descriptionPartOne = generateDescriptionPartOne(\\r\\n            escapeQuotes(params.quoteTokenSymbol),\\r\\n            escapeQuotes(params.baseTokenSymbol),\\r\\n            addressToString(params.poolAddress)\\r\\n        );\\r\\n        string memory descriptionPartTwo = generateDescriptionPartTwo(\\r\\n            params.tokenId.toString(),\\r\\n            escapeQuotes(params.baseTokenSymbol),\\r\\n            addressToString(params.quoteTokenAddress),\\r\\n            addressToString(params.baseTokenAddress)\\r\\n        );\\r\\n        string memory image = Base64.encode(bytes(generateSVGImage(params)));\\r\\n\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'data:application/json;base64,',\\r\\n                    Base64.encode(\\r\\n                        bytes(\\r\\n                            abi.encodePacked(\\r\\n                                '{\\\"name\\\":\\\"',\\r\\n                                name,\\r\\n                                '\\\", \\\"description\\\":\\\"',\\r\\n                                descriptionPartOne,\\r\\n                                descriptionPartTwo,\\r\\n                                '\\\", \\\"image\\\": \\\"',\\r\\n                                'data:image/svg+xml;base64,',\\r\\n                                image,\\r\\n                                '\\\"}'\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function escapeQuotes(string memory symbol) internal pure returns (string memory) {\\r\\n        bytes memory symbolBytes = bytes(symbol);\\r\\n        uint8 quotesCount = 0;\\r\\n        for (uint8 i = 0; i < symbolBytes.length; i++) {\\r\\n            if (symbolBytes[i] == '\\\"') {\\r\\n                quotesCount++;\\r\\n            }\\r\\n        }\\r\\n        if (quotesCount > 0) {\\r\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\r\\n            uint256 index;\\r\\n            for (uint8 i = 0; i < symbolBytes.length; i++) {\\r\\n                if (symbolBytes[i] == '\\\"') {\\r\\n                    escapedBytes[index++] = '\\\\\\\\';\\r\\n                }\\r\\n                escapedBytes[index++] = symbolBytes[i];\\r\\n            }\\r\\n            return string(escapedBytes);\\r\\n        }\\r\\n        return symbol;\\r\\n    }\\r\\n\\r\\n    function generateDescriptionPartOne(\\r\\n        string memory quoteTokenSymbol,\\r\\n        string memory baseTokenSymbol,\\r\\n        string memory poolAddress\\r\\n    ) private pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'This NFT represents a liquidity position in a Algebra ',\\r\\n                    quoteTokenSymbol,\\r\\n                    '-',\\r\\n                    baseTokenSymbol,\\r\\n                    ' pool. ',\\r\\n                    'The owner of this NFT can modify or redeem the position.\\\\\\\\n',\\r\\n                    '\\\\\\\\nPool Address: ',\\r\\n                    poolAddress,\\r\\n                    '\\\\\\\\n',\\r\\n                    quoteTokenSymbol\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function generateDescriptionPartTwo(\\r\\n        string memory tokenId,\\r\\n        string memory baseTokenSymbol,\\r\\n        string memory quoteTokenAddress,\\r\\n        string memory baseTokenAddress\\r\\n    ) private pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    ' Address: ',\\r\\n                    quoteTokenAddress,\\r\\n                    '\\\\\\\\n',\\r\\n                    baseTokenSymbol,\\r\\n                    ' Address: ',\\r\\n                    baseTokenAddress,\\r\\n                    '\\\\\\\\nToken ID: ',\\r\\n                    tokenId,\\r\\n                    '\\\\\\\\n\\\\\\\\n',\\r\\n                    unicode'⚠️ DISCLAIMER: Due diligence is imperative when assessing this NFT. Make sure token addresses match the expected tokens, as token symbols may be imitated.'\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function generateName(ConstructTokenURIParams memory params) private pure returns (string memory) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    'Algebra - ',\\r\\n                    escapeQuotes(params.quoteTokenSymbol),\\r\\n                    '/',\\r\\n                    escapeQuotes(params.baseTokenSymbol),\\r\\n                    ' - ',\\r\\n                    tickToDecimalString(\\r\\n                        !params.flipRatio ? params.tickLower : params.tickUpper,\\r\\n                        params.tickSpacing,\\r\\n                        params.baseTokenDecimals,\\r\\n                        params.quoteTokenDecimals,\\r\\n                        params.flipRatio\\r\\n                    ),\\r\\n                    '<>',\\r\\n                    tickToDecimalString(\\r\\n                        !params.flipRatio ? params.tickUpper : params.tickLower,\\r\\n                        params.tickSpacing,\\r\\n                        params.baseTokenDecimals,\\r\\n                        params.quoteTokenDecimals,\\r\\n                        params.flipRatio\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    struct DecimalStringParams {\\r\\n        // significant figures of decimal\\r\\n        uint256 sigfigs;\\r\\n        // length of decimal string\\r\\n        uint8 bufferLength;\\r\\n        // ending index for significant figures (function works backwards when copying sigfigs)\\r\\n        uint8 sigfigIndex;\\r\\n        // index of decimal place (0 if no decimal)\\r\\n        uint8 decimalIndex;\\r\\n        // start index for trailing/leading 0's for very small/large numbers\\r\\n        uint8 zerosStartIndex;\\r\\n        // end index for trailing/leading 0's for very small/large numbers\\r\\n        uint8 zerosEndIndex;\\r\\n        // true if decimal number is less than one\\r\\n        bool isLessThanOne;\\r\\n        // true if string should include \\\"%\\\"\\r\\n        bool isPercent;\\r\\n    }\\r\\n\\r\\n    function generateDecimalString(DecimalStringParams memory params) private pure returns (string memory) {\\r\\n        bytes memory buffer = new bytes(params.bufferLength);\\r\\n        if (params.isPercent) {\\r\\n            buffer[buffer.length - 1] = '%';\\r\\n        }\\r\\n        if (params.isLessThanOne) {\\r\\n            buffer[0] = '0';\\r\\n            buffer[1] = '.';\\r\\n        }\\r\\n\\r\\n        // add leading/trailing 0's\\r\\n        for (uint256 zerosCursor = params.zerosStartIndex; zerosCursor < params.zerosEndIndex + 1; zerosCursor++) {\\r\\n            buffer[zerosCursor] = bytes1(uint8(48));\\r\\n        }\\r\\n\\r\\n        // add sigfigs\\r\\n        unchecked {\\r\\n            while (params.sigfigs > 0) {\\r\\n                if (params.decimalIndex > 0 && params.sigfigIndex == params.decimalIndex) {\\r\\n                    buffer[params.sigfigIndex--] = '.';\\r\\n                }\\r\\n                buffer[params.sigfigIndex--] = bytes1(uint8(uint256(48) + (params.sigfigs % 10)));\\r\\n                params.sigfigs /= 10;\\r\\n            }\\r\\n        }\\r\\n        return string(buffer);\\r\\n    }\\r\\n\\r\\n    function tickToDecimalString(\\r\\n        int24 tick,\\r\\n        int24 tickSpacing,\\r\\n        uint8 baseTokenDecimals,\\r\\n        uint8 quoteTokenDecimals,\\r\\n        bool flipRatio\\r\\n    ) internal pure returns (string memory) {\\r\\n        if (tick == (TickMath.MIN_TICK / tickSpacing) * tickSpacing) {\\r\\n            return !flipRatio ? 'MIN' : 'MAX';\\r\\n        } else if (tick == (TickMath.MAX_TICK / tickSpacing) * tickSpacing) {\\r\\n            return !flipRatio ? 'MAX' : 'MIN';\\r\\n        } else {\\r\\n            uint160 sqrtRatioX96 = TickMath.getSqrtRatioAtTick(tick);\\r\\n            if (flipRatio) {\\r\\n                sqrtRatioX96 = uint160(uint256(1 << 192) / sqrtRatioX96);\\r\\n            }\\r\\n            return fixedPointToDecimalString(sqrtRatioX96, baseTokenDecimals, quoteTokenDecimals);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function sigfigsRounded(uint256 value, uint8 digits) private pure returns (uint256, bool) {\\r\\n        bool extraDigit;\\r\\n        if (digits > 5) {\\r\\n            value = value / ((10 ** (digits - 5)));\\r\\n        }\\r\\n        bool roundUp = value % 10 > 4;\\r\\n        value = value / 10;\\r\\n        if (roundUp) {\\r\\n            value = value + 1;\\r\\n        }\\r\\n        // 99999 -> 100000 gives an extra sigfig\\r\\n        if (value == 100000) {\\r\\n            value /= 10;\\r\\n            extraDigit = true;\\r\\n        }\\r\\n        return (value, extraDigit);\\r\\n    }\\r\\n\\r\\n    function adjustForDecimalPrecision(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint8 baseTokenDecimals,\\r\\n        uint8 quoteTokenDecimals\\r\\n    ) private pure returns (uint256 adjustedSqrtRatioX96) {\\r\\n        uint256 difference = abs(int256(uint256(baseTokenDecimals)) - int256(uint256(quoteTokenDecimals)));\\r\\n        if (difference > 0 && difference <= 18) {\\r\\n            if (baseTokenDecimals > quoteTokenDecimals) {\\r\\n                adjustedSqrtRatioX96 = sqrtRatioX96 * (10 ** (difference / 2));\\r\\n                if (difference % 2 == 1) {\\r\\n                    adjustedSqrtRatioX96 = FullMath.mulDiv(adjustedSqrtRatioX96, sqrt10X128, 1 << 128);\\r\\n                }\\r\\n            } else {\\r\\n                adjustedSqrtRatioX96 = sqrtRatioX96 / (10 ** (difference / 2));\\r\\n                if (difference % 2 == 1) {\\r\\n                    adjustedSqrtRatioX96 = FullMath.mulDiv(adjustedSqrtRatioX96, 1 << 128, sqrt10X128);\\r\\n                }\\r\\n            }\\r\\n        } else {\\r\\n            adjustedSqrtRatioX96 = uint256(sqrtRatioX96);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function abs(int256 x) private pure returns (uint256) {\\r\\n        return uint256(x >= 0 ? x : -x);\\r\\n    }\\r\\n\\r\\n    /// @notice Returns string that includes first 5 significant figures of a decimal number\\r\\n    /// @param sqrtRatioX96 a sqrt price\\r\\n    function fixedPointToDecimalString(\\r\\n        uint160 sqrtRatioX96,\\r\\n        uint8 baseTokenDecimals,\\r\\n        uint8 quoteTokenDecimals\\r\\n    ) internal pure returns (string memory) {\\r\\n        uint256 adjustedSqrtRatioX96 = adjustForDecimalPrecision(sqrtRatioX96, baseTokenDecimals, quoteTokenDecimals);\\r\\n        uint256 value = FullMath.mulDiv(adjustedSqrtRatioX96, adjustedSqrtRatioX96, 1 << 64);\\r\\n\\r\\n        bool priceBelow1 = adjustedSqrtRatioX96 < 2 ** 96;\\r\\n        if (priceBelow1) {\\r\\n            // 10 ** 43 is precision needed to retrieve 5 sigfigs of smallest possible price + 1 for rounding\\r\\n            value = FullMath.mulDiv(value, 10 ** 44, 1 << 128);\\r\\n        } else {\\r\\n            // leave precision for 4 decimal places + 1 place for rounding\\r\\n            value = FullMath.mulDiv(value, 10 ** 5, 1 << 128);\\r\\n        }\\r\\n\\r\\n        // get digit count\\r\\n        uint256 temp = value;\\r\\n        uint8 digits;\\r\\n        while (temp != 0) {\\r\\n            digits++;\\r\\n            temp /= 10;\\r\\n        }\\r\\n        // don't count extra digit kept for rounding\\r\\n        digits = digits - 1;\\r\\n\\r\\n        // address rounding\\r\\n        (uint256 sigfigs, bool extraDigit) = sigfigsRounded(value, digits);\\r\\n        if (extraDigit) {\\r\\n            digits++;\\r\\n        }\\r\\n\\r\\n        DecimalStringParams memory params;\\r\\n        if (priceBelow1) {\\r\\n            // 7 bytes ( \\\"0.\\\" and 5 sigfigs) + leading 0's bytes\\r\\n            params.bufferLength = uint8(uint8(7) + (uint8(43) - digits));\\r\\n            params.zerosStartIndex = 2;\\r\\n            params.zerosEndIndex = uint8(uint256(43) - digits + 1);\\r\\n            params.sigfigIndex = uint8(params.bufferLength - 1);\\r\\n        } else if (digits >= 9) {\\r\\n            // no decimal in price string\\r\\n            params.bufferLength = uint8(digits - 4);\\r\\n            params.zerosStartIndex = 5;\\r\\n            params.zerosEndIndex = uint8(params.bufferLength - 1);\\r\\n            params.sigfigIndex = 4;\\r\\n        } else {\\r\\n            // 5 sigfigs surround decimal\\r\\n            params.bufferLength = 6;\\r\\n            params.sigfigIndex = 5;\\r\\n            params.decimalIndex = uint8(digits - 4);\\r\\n        }\\r\\n        params.sigfigs = sigfigs;\\r\\n        params.isLessThanOne = priceBelow1;\\r\\n        params.isPercent = false;\\r\\n\\r\\n        return generateDecimalString(params);\\r\\n    }\\r\\n\\r\\n    struct FeeDigits {\\r\\n        uint24 temp;\\r\\n        uint8 numSigfigs;\\r\\n        uint256 digits;\\r\\n    }\\r\\n\\r\\n    /// @notice Returns string as decimal percentage of fee amount.\\r\\n    /// @param fee fee amount\\r\\n    function feeToPercentString(uint24 fee) internal pure returns (string memory) {\\r\\n        if (fee == 0) {\\r\\n            return '0%';\\r\\n        }\\r\\n\\r\\n        FeeDigits memory feeDigits = FeeDigits(fee, 0, 0);\\r\\n        while (feeDigits.temp != 0) {\\r\\n            if (feeDigits.numSigfigs > 0) {\\r\\n                // count all digits preceding least significant figure\\r\\n                feeDigits.numSigfigs++;\\r\\n            } else if (feeDigits.temp % 10 != 0) {\\r\\n                feeDigits.numSigfigs++;\\r\\n            }\\r\\n            feeDigits.digits++;\\r\\n            feeDigits.temp /= 10;\\r\\n        }\\r\\n\\r\\n        DecimalStringParams memory params;\\r\\n        uint256 nZeros;\\r\\n        if (feeDigits.digits >= 5) {\\r\\n            // if decimal > 1 (5th digit is the ones place)\\r\\n            uint256 decimalPlace = feeDigits.digits - feeDigits.numSigfigs >= 4 ? 0 : 1;\\r\\n            nZeros = feeDigits.digits - 5 < (feeDigits.numSigfigs - 1)\\r\\n                ? 0\\r\\n                : feeDigits.digits - 5 - (feeDigits.numSigfigs - 1);\\r\\n            params.zerosStartIndex = feeDigits.numSigfigs;\\r\\n            params.zerosEndIndex = uint8(params.zerosStartIndex + nZeros - 1);\\r\\n            params.sigfigIndex = uint8(params.zerosStartIndex - 1 + decimalPlace);\\r\\n            params.bufferLength = uint8(nZeros + (feeDigits.numSigfigs + 1) + decimalPlace);\\r\\n        } else {\\r\\n            // else if decimal < 1\\r\\n            nZeros = uint256(5) - feeDigits.digits;\\r\\n            params.zerosStartIndex = 2;\\r\\n            params.zerosEndIndex = uint8(nZeros + params.zerosStartIndex - 1);\\r\\n            params.bufferLength = uint8(nZeros + (feeDigits.numSigfigs + 2));\\r\\n            params.sigfigIndex = uint8((params.bufferLength) - 2);\\r\\n            params.isLessThanOne = true;\\r\\n        }\\r\\n        params.sigfigs = uint256(fee) / (10 ** (feeDigits.digits - feeDigits.numSigfigs));\\r\\n        params.isPercent = true;\\r\\n        params.decimalIndex = feeDigits.digits > 4 ? uint8(feeDigits.digits - 4) : 0;\\r\\n\\r\\n        return generateDecimalString(params);\\r\\n    }\\r\\n\\r\\n    function addressToString(address addr) internal pure returns (string memory) {\\r\\n        return HexStrings.toHexString(uint256(uint160(addr)), 20);\\r\\n    }\\r\\n\\r\\n    function generateSVGImage(ConstructTokenURIParams memory params) internal pure returns (string memory svg) {\\r\\n        string memory defs = NFTSVG.generateSVGDefs(\\r\\n            NFTSVG.SVGDefsParams({\\r\\n                color0: tokenToColorHex(uint256(uint160(params.quoteTokenAddress)), 136),\\r\\n                color1: tokenToColorHex(uint256(uint160(params.baseTokenAddress)), 136),\\r\\n                color2: tokenToColorHex(uint256(uint160(params.quoteTokenAddress)), 0),\\r\\n                color3: tokenToColorHex(uint256(uint160(params.baseTokenAddress)), 0),\\r\\n                x1: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.quoteTokenAddress)), 16, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    16,\\r\\n                    274\\r\\n                ),\\r\\n                y1: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.baseTokenAddress)), 16, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    100,\\r\\n                    484\\r\\n                ),\\r\\n                x2: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.quoteTokenAddress)), 32, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    16,\\r\\n                    274\\r\\n                ),\\r\\n                y2: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.baseTokenAddress)), 32, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    100,\\r\\n                    484\\r\\n                ),\\r\\n                x3: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.quoteTokenAddress)), 48, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    16,\\r\\n                    274\\r\\n                ),\\r\\n                y3: scale(\\r\\n                    getCircleCoord(uint256(uint160(params.baseTokenAddress)), 48, params.tokenId),\\r\\n                    0,\\r\\n                    255,\\r\\n                    100,\\r\\n                    484\\r\\n                )\\r\\n            })\\r\\n        );\\r\\n\\r\\n        string memory body = NFTSVG.generateSVGBody(\\r\\n            NFTSVG.SVGBodyParams({\\r\\n                quoteToken: addressToString(params.quoteTokenAddress),\\r\\n                baseToken: addressToString(params.baseTokenAddress),\\r\\n                poolAddress: params.poolAddress,\\r\\n                quoteTokenSymbol: params.quoteTokenSymbol,\\r\\n                baseTokenSymbol: params.baseTokenSymbol,\\r\\n                tickLower: params.tickLower,\\r\\n                tickUpper: params.tickUpper,\\r\\n                tickSpacing: params.tickSpacing,\\r\\n                overRange: overRange(params.tickLower, params.tickUpper, params.tickCurrent),\\r\\n                tokenId: params.tokenId\\r\\n            })\\r\\n        );\\r\\n\\r\\n        return NFTSVG.generateSVG(defs, body);\\r\\n    }\\r\\n\\r\\n    function overRange(int24 tickLower, int24 tickUpper, int24 tickCurrent) private pure returns (int8) {\\r\\n        if (tickCurrent < tickLower) {\\r\\n            return -1;\\r\\n        } else if (tickCurrent > tickUpper) {\\r\\n            return 1;\\r\\n        } else {\\r\\n            return 0;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function scale(\\r\\n        uint256 n,\\r\\n        uint256 inMn,\\r\\n        uint256 inMx,\\r\\n        uint256 outMn,\\r\\n        uint256 outMx\\r\\n    ) private pure returns (string memory) {\\r\\n        return (((n - inMn) * (outMx - outMn)) / (inMx - inMn) + outMn).toString();\\r\\n    }\\r\\n\\r\\n    function tokenToColorHex(uint256 token, uint256 offset) internal pure returns (string memory str) {\\r\\n        return string((token >> offset).toHexStringNoPrefix(3));\\r\\n    }\\r\\n\\r\\n    function getCircleCoord(uint256 tokenAddress, uint256 offset, uint256 tokenId) internal pure returns (uint256) {\\r\\n        return (sliceTokenHex(tokenAddress, offset) * tokenId) % 255;\\r\\n    }\\r\\n\\r\\n    function sliceTokenHex(uint256 token, uint256 offset) internal pure returns (uint256) {\\r\\n        return uint256(uint8(token >> offset));\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.7.0\"},\"contracts/libraries/HexStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nlibrary HexStrings {\\r\\n    bytes16 internal constant ALPHABET = '0123456789abcdef';\\r\\n\\r\\n    /// @notice Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\r\\n    /// @dev Credit to Open Zeppelin under MIT license https://github.com/OpenZeppelin/openzeppelin-contracts/blob/243adff49ce1700e0ecb99fe522fb16cff1d1ddc/contracts/utils/Strings.sol#L55\\r\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            bytes memory buffer = new bytes(2 * length + 2);\\r\\n            buffer[0] = '0';\\r\\n            buffer[1] = 'x';\\r\\n            for (uint256 i = 2 * length + 1; i > 1; --i) {\\r\\n                buffer[i] = ALPHABET[value & 0xf];\\r\\n                value >>= 4;\\r\\n            }\\r\\n            require(value == 0, 'Strings: hex length insufficient');\\r\\n            return string(buffer);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function toHexStringNoPrefix(uint256 value, uint256 length) internal pure returns (string memory) {\\r\\n        unchecked {\\r\\n            bytes memory buffer = new bytes(2 * length);\\r\\n            for (uint256 i = buffer.length; i > 0; i--) {\\r\\n                buffer[i - 1] = ALPHABET[value & 0xf];\\r\\n                value >>= 4;\\r\\n            }\\r\\n            return string(buffer);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/libraries/NFTSVG.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.6;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\r\\nimport '@openzeppelin/contracts/utils/Base64.sol';\\r\\nimport '@openzeppelin/contracts/utils/math/Math.sol';\\r\\n\\r\\n/// @title NFTSVG\\r\\n/// @notice Provides a function for generating an SVG associated with a Algebra NFT\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\nlibrary NFTSVG {\\r\\n    using Strings for uint256;\\r\\n\\r\\n    string private constant curve1 = 'M1 1C41 41 105 105 145 145';\\r\\n    string private constant curve2 = 'M1 1C33 49 97 113 145 145';\\r\\n    string private constant curve3 = 'M1 1C33 57 89 113 145 145';\\r\\n    string private constant curve4 = 'M1 1C25 65 81 121 145 145';\\r\\n    string private constant curve5 = 'M1 1C17 73 73 129 145 145';\\r\\n    string private constant curve6 = 'M1 1C9 81 65 137 145 145';\\r\\n    string private constant curve7 = 'M1 1C1 89 57.5 145 145 145';\\r\\n    string private constant curve8 = 'M1 1C1 97 49 145 145 145';\\r\\n\\r\\n    struct SVGBodyParams {\\r\\n        string quoteToken;\\r\\n        string baseToken;\\r\\n        address poolAddress;\\r\\n        string quoteTokenSymbol;\\r\\n        string baseTokenSymbol;\\r\\n        int24 tickLower;\\r\\n        int24 tickUpper;\\r\\n        int24 tickSpacing;\\r\\n        int8 overRange;\\r\\n        uint256 tokenId;\\r\\n    }\\r\\n\\r\\n    struct SVGDefsParams {\\r\\n        string color0;\\r\\n        string color1;\\r\\n        string color2;\\r\\n        string color3;\\r\\n        string x1;\\r\\n        string y1;\\r\\n        string x2;\\r\\n        string y2;\\r\\n        string x3;\\r\\n        string y3;\\r\\n    }\\r\\n\\r\\n    function generateSVG(string memory defs, string memory body) internal pure returns (string memory svg) {\\r\\n        /*\\r\\n        address: \\\"0xe8ab59d3bcde16a29912de83a90eb39628cfc163\\\",\\r\\n        msg: \\\"Forged in SVG for Uniswap in 2021 by 0xe8ab59d3bcde16a29912de83a90eb39628cfc163\\\",\\r\\n        sig: \\\"0x2df0e99d9cbfec33a705d83f75666d98b22dea7c1af412c584f7d626d83f02875993df740dc87563b9c73378f8462426da572d7989de88079a382ad96c57b68d1b\\\",\\r\\n        version: \\\"2\\\"\\r\\n        */\\r\\n        return string(abi.encodePacked(defs, body, '</svg>'));\\r\\n    }\\r\\n\\r\\n    function generateSVGBody(SVGBodyParams memory params) internal pure returns (string memory body) {\\r\\n        return\\r\\n            string(\\r\\n                abi.encodePacked(\\r\\n                    generateSVGBorderText(\\r\\n                        params.quoteToken,\\r\\n                        params.baseToken,\\r\\n                        params.quoteTokenSymbol,\\r\\n                        params.baseTokenSymbol\\r\\n                    ),\\r\\n                    generateSVGCardMantle(params.quoteTokenSymbol, params.baseTokenSymbol),\\r\\n                    generageSvgCurve(params.tickLower, params.tickUpper, params.tickSpacing, params.overRange),\\r\\n                    generateSVGPositionDataAndLocationCurve(\\r\\n                        params.tokenId.toString(),\\r\\n                        params.tickLower,\\r\\n                        params.tickUpper\\r\\n                    ),\\r\\n                    generateSVGRareSparkle(params.tokenId, params.poolAddress)\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n\\r\\n    function generateSVGDefs(SVGDefsParams memory params) internal pure returns (string memory svg) {\\r\\n        svg = string(\\r\\n            abi.encodePacked(\\r\\n                '<svg width=\\\"290\\\" height=\\\"500\\\" viewBox=\\\"0 0 290 500\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\"',\\r\\n                \\\" xmlns:xlink='http://www.w3.org/1999/xlink'>\\\",\\r\\n                '<defs>',\\r\\n                '<filter id=\\\"f1\\\"><feImage result=\\\"p0\\\" xlink:href=\\\"data:image/svg+xml;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                        abi.encodePacked(\\r\\n                            \\\"<svg width='290' height='500' viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'><rect width='290px' height='500px' fill='#\\\",\\r\\n                            params.color0,\\r\\n                            \\\"'/></svg>\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                '\\\"/><feImage result=\\\"p1\\\" xlink:href=\\\"data:image/svg+xml;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                        abi.encodePacked(\\r\\n                            \\\"<svg width='290' height='500' viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'><circle cx='\\\",\\r\\n                            params.x1,\\r\\n                            \\\"' cy='\\\",\\r\\n                            params.y1,\\r\\n                            \\\"' r='120px' fill='#\\\",\\r\\n                            params.color1,\\r\\n                            \\\"'/></svg>\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                '\\\"/><feImage result=\\\"p2\\\" xlink:href=\\\"data:image/svg+xml;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                        abi.encodePacked(\\r\\n                            \\\"<svg width='290' height='500' viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'><circle cx='\\\",\\r\\n                            params.x2,\\r\\n                            \\\"' cy='\\\",\\r\\n                            params.y2,\\r\\n                            \\\"' r='120px' fill='#\\\",\\r\\n                            params.color2,\\r\\n                            \\\"'/></svg>\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                '\\\" />',\\r\\n                '<feImage result=\\\"p3\\\" xlink:href=\\\"data:image/svg+xml;base64,',\\r\\n                Base64.encode(\\r\\n                    bytes(\\r\\n                        abi.encodePacked(\\r\\n                            \\\"<svg width='290' height='500' viewBox='0 0 290 500' xmlns='http://www.w3.org/2000/svg'><circle cx='\\\",\\r\\n                            params.x3,\\r\\n                            \\\"' cy='\\\",\\r\\n                            params.y3,\\r\\n                            \\\"' r='100px' fill='#\\\",\\r\\n                            params.color3,\\r\\n                            \\\"'/></svg>\\\"\\r\\n                        )\\r\\n                    )\\r\\n                ),\\r\\n                '\\\" /><feBlend mode=\\\"overlay\\\" in=\\\"p0\\\" in2=\\\"p1\\\" /><feBlend mode=\\\"exclusion\\\" in2=\\\"p2\\\" /><feBlend mode=\\\"overlay\\\" in2=\\\"p3\\\" result=\\\"blendOut\\\" /><feGaussianBlur ',\\r\\n                'in=\\\"blendOut\\\" stdDeviation=\\\"42\\\" /></filter> <clipPath id=\\\"corners\\\"><rect width=\\\"290\\\" height=\\\"500\\\" rx=\\\"42\\\" ry=\\\"42\\\" /></clipPath>',\\r\\n                '<path id=\\\"text-path-a\\\" d=\\\"M40 12 H250 A28 28 0 0 1 278 40 V460 A28 28 0 0 1 250 488 H40 A28 28 0 0 1 12 460 V40 A28 28 0 0 1 40 12 z\\\" />',\\r\\n                '<path id=\\\"minimap\\\" d=\\\"M234 444C234 457.949 242.21 463 253 463\\\" />',\\r\\n                '<filter id=\\\"top-region-blur\\\"><feGaussianBlur in=\\\"SourceGraphic\\\" stdDeviation=\\\"24\\\" /></filter>',\\r\\n                '<linearGradient id=\\\"grad-up\\\" x1=\\\"1\\\" x2=\\\"0\\\" y1=\\\"1\\\" y2=\\\"0\\\"><stop offset=\\\"0.0\\\" stop-color=\\\"white\\\" stop-opacity=\\\"1\\\" />',\\r\\n                '<stop offset=\\\".9\\\" stop-color=\\\"white\\\" stop-opacity=\\\"0\\\" /></linearGradient>',\\r\\n                '<linearGradient id=\\\"grad-down\\\" x1=\\\"0\\\" x2=\\\"1\\\" y1=\\\"0\\\" y2=\\\"1\\\"><stop offset=\\\"0.0\\\" stop-color=\\\"white\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\"0.9\\\" stop-color=\\\"white\\\" stop-opacity=\\\"0\\\" /></linearGradient>',\\r\\n                '<mask id=\\\"fade-up\\\" maskContentUnits=\\\"objectBoundingBox\\\"><rect width=\\\"1\\\" height=\\\"1\\\" fill=\\\"url(#grad-up)\\\" /></mask>',\\r\\n                '<mask id=\\\"fade-down\\\" maskContentUnits=\\\"objectBoundingBox\\\"><rect width=\\\"1\\\" height=\\\"1\\\" fill=\\\"url(#grad-down)\\\" /></mask>',\\r\\n                '<mask id=\\\"none\\\" maskContentUnits=\\\"objectBoundingBox\\\"><rect width=\\\"1\\\" height=\\\"1\\\" fill=\\\"white\\\" /></mask>',\\r\\n                '<linearGradient id=\\\"grad-symbol\\\"><stop offset=\\\"0.7\\\" stop-color=\\\"white\\\" stop-opacity=\\\"1\\\" /><stop offset=\\\".95\\\" stop-color=\\\"white\\\" stop-opacity=\\\"0\\\" /></linearGradient>',\\r\\n                '<mask id=\\\"fade-symbol\\\" maskContentUnits=\\\"userSpaceOnUse\\\"><rect width=\\\"290px\\\" height=\\\"200px\\\" fill=\\\"url(#grad-symbol)\\\" /></mask></defs>',\\r\\n                '<g clip-path=\\\"url(#corners)\\\">',\\r\\n                '<rect fill=\\\"',\\r\\n                params.color0,\\r\\n                '\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"500px\\\" />',\\r\\n                '<rect style=\\\"filter: url(#f1)\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"500px\\\" />',\\r\\n                ' <g style=\\\"filter:url(#top-region-blur); transform:scale(1.5); transform-origin:center top;\\\">',\\r\\n                '<rect fill=\\\"none\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"500px\\\" />',\\r\\n                '<ellipse cx=\\\"50%\\\" cy=\\\"0px\\\" rx=\\\"180px\\\" ry=\\\"120px\\\" fill=\\\"#000\\\" opacity=\\\"0.85\\\" /></g>',\\r\\n                '<rect x=\\\"0\\\" y=\\\"0\\\" width=\\\"290\\\" height=\\\"500\\\" rx=\\\"42\\\" ry=\\\"42\\\" fill=\\\"rgba(0,0,0,0)\\\" stroke=\\\"rgba(255,255,255,0.2)\\\" /></g>'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generateSVGBorderText(\\r\\n        string memory quoteToken,\\r\\n        string memory baseToken,\\r\\n        string memory quoteTokenSymbol,\\r\\n        string memory baseTokenSymbol\\r\\n    ) private pure returns (string memory svg) {\\r\\n        svg = string(\\r\\n            abi.encodePacked(\\r\\n                '<text text-rendering=\\\"optimizeSpeed\\\">',\\r\\n                '<textPath startOffset=\\\"-100%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\r\\n                baseToken,\\r\\n                unicode' • ',\\r\\n                baseTokenSymbol,\\r\\n                ' <animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" />',\\r\\n                '</textPath> <textPath startOffset=\\\"0%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\r\\n                baseToken,\\r\\n                unicode' • ',\\r\\n                baseTokenSymbol,\\r\\n                ' <animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /> </textPath>',\\r\\n                '<textPath startOffset=\\\"50%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\r\\n                quoteToken,\\r\\n                unicode' • ',\\r\\n                quoteTokenSymbol,\\r\\n                ' <animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\"',\\r\\n                ' repeatCount=\\\"indefinite\\\" /></textPath><textPath startOffset=\\\"-50%\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"10px\\\" xlink:href=\\\"#text-path-a\\\">',\\r\\n                quoteToken,\\r\\n                unicode' • ',\\r\\n                quoteTokenSymbol,\\r\\n                ' <animate additive=\\\"sum\\\" attributeName=\\\"startOffset\\\" from=\\\"0%\\\" to=\\\"100%\\\" begin=\\\"0s\\\" dur=\\\"30s\\\" repeatCount=\\\"indefinite\\\" /></textPath></text>'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generateSVGCardMantle(\\r\\n        string memory quoteTokenSymbol,\\r\\n        string memory baseTokenSymbol\\r\\n    ) private pure returns (string memory svg) {\\r\\n        svg = string(\\r\\n            abi.encodePacked(\\r\\n                '<g mask=\\\"url(#fade-symbol)\\\"><rect fill=\\\"none\\\" x=\\\"0px\\\" y=\\\"0px\\\" width=\\\"290px\\\" height=\\\"200px\\\" /> <text y=\\\"70px\\\" x=\\\"32px\\\" fill=\\\"white\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-weight=\\\"200\\\" font-size=\\\"36px\\\">',\\r\\n                quoteTokenSymbol,\\r\\n                '/',\\r\\n                baseTokenSymbol,\\r\\n                '</text></g>',\\r\\n                '<rect x=\\\"16\\\" y=\\\"16\\\" width=\\\"258\\\" height=\\\"468\\\" rx=\\\"26\\\" ry=\\\"26\\\" fill=\\\"rgba(0,0,0,0)\\\" stroke=\\\"rgba(255,255,255,0.2)\\\" />'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function generageSvgCurve(\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper,\\r\\n        int24 tickSpacing,\\r\\n        int8 overRange\\r\\n    ) private pure returns (string memory svg) {\\r\\n        string memory fade = overRange == 1 ? '#fade-up' : overRange == -1 ? '#fade-down' : '#none';\\r\\n        string memory curve = getCurve(tickLower, tickUpper, tickSpacing);\\r\\n        svg = string(\\r\\n            abi.encodePacked(\\r\\n                '<g mask=\\\"url(',\\r\\n                fade,\\r\\n                ')\\\"',\\r\\n                ' style=\\\"transform:translate(72px,189px)\\\">'\\r\\n                '<rect x=\\\"-16px\\\" y=\\\"-16px\\\" width=\\\"180px\\\" height=\\\"180px\\\" fill=\\\"none\\\" />'\\r\\n                '<path d=\\\"',\\r\\n                curve,\\r\\n                '\\\" stroke=\\\"rgba(0,0,0,0.3)\\\" stroke-width=\\\"32px\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" />',\\r\\n                '</g><g mask=\\\"url(',\\r\\n                fade,\\r\\n                ')\\\"',\\r\\n                ' style=\\\"transform:translate(72px,189px)\\\">',\\r\\n                '<rect x=\\\"-16px\\\" y=\\\"-16px\\\" width=\\\"180px\\\" height=\\\"180px\\\" fill=\\\"none\\\" />',\\r\\n                '<path d=\\\"',\\r\\n                curve,\\r\\n                '\\\" stroke=\\\"rgba(255,255,255,1)\\\" fill=\\\"none\\\" stroke-linecap=\\\"round\\\" /></g>',\\r\\n                generateSVGCurveCircle(overRange)\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getCurve(int24 tickLower, int24 tickUpper, int24 tickSpacing) internal pure returns (string memory curve) {\\r\\n        int24 tickRange = (tickUpper - tickLower) / tickSpacing;\\r\\n        if (tickRange <= 4) {\\r\\n            curve = curve1;\\r\\n        } else if (tickRange <= 8) {\\r\\n            curve = curve2;\\r\\n        } else if (tickRange <= 16) {\\r\\n            curve = curve3;\\r\\n        } else if (tickRange <= 32) {\\r\\n            curve = curve4;\\r\\n        } else if (tickRange <= 64) {\\r\\n            curve = curve5;\\r\\n        } else if (tickRange <= 128) {\\r\\n            curve = curve6;\\r\\n        } else if (tickRange <= 256) {\\r\\n            curve = curve7;\\r\\n        } else {\\r\\n            curve = curve8;\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateSVGCurveCircle(int8 overRange) internal pure returns (string memory svg) {\\r\\n        string memory curvex1 = '73';\\r\\n        string memory curvey1 = '190';\\r\\n        string memory curvex2 = '217';\\r\\n        string memory curvey2 = '334';\\r\\n        if (overRange == 1 || overRange == -1) {\\r\\n            svg = string(\\r\\n                abi.encodePacked(\\r\\n                    '<circle cx=\\\"',\\r\\n                    overRange == -1 ? curvex1 : curvex2,\\r\\n                    'px\\\" cy=\\\"',\\r\\n                    overRange == -1 ? curvey1 : curvey2,\\r\\n                    'px\\\" r=\\\"4px\\\" fill=\\\"white\\\" /><circle cx=\\\"',\\r\\n                    overRange == -1 ? curvex1 : curvex2,\\r\\n                    'px\\\" cy=\\\"',\\r\\n                    overRange == -1 ? curvey1 : curvey2,\\r\\n                    'px\\\" r=\\\"24px\\\" fill=\\\"none\\\" stroke=\\\"white\\\" />'\\r\\n                )\\r\\n            );\\r\\n        } else {\\r\\n            svg = string(\\r\\n                abi.encodePacked(\\r\\n                    '<circle cx=\\\"',\\r\\n                    curvex1,\\r\\n                    'px\\\" cy=\\\"',\\r\\n                    curvey1,\\r\\n                    'px\\\" r=\\\"4px\\\" fill=\\\"white\\\" />',\\r\\n                    '<circle cx=\\\"',\\r\\n                    curvex2,\\r\\n                    'px\\\" cy=\\\"',\\r\\n                    curvey2,\\r\\n                    'px\\\" r=\\\"4px\\\" fill=\\\"white\\\" />'\\r\\n                )\\r\\n            );\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateSVGPositionDataAndLocationCurve(\\r\\n        string memory tokenId,\\r\\n        int24 tickLower,\\r\\n        int24 tickUpper\\r\\n    ) private pure returns (string memory svg) {\\r\\n        string memory tickLowerStr = tickToString(tickLower);\\r\\n        string memory tickUpperStr = tickToString(tickUpper);\\r\\n        uint256 str1length = bytes(tokenId).length + 4;\\r\\n        uint256 str2length = bytes(tickLowerStr).length + 10;\\r\\n        uint256 str3length = bytes(tickUpperStr).length + 10;\\r\\n        (string memory xCoord, string memory yCoord) = rangeLocation(tickLower, tickUpper);\\r\\n        svg = string(\\r\\n            abi.encodePacked(\\r\\n                ' <g style=\\\"transform:translate(29px, 384px)\\\">',\\r\\n                '<rect width=\\\"',\\r\\n                uint256(7 * (str1length + 4)).toString(),\\r\\n                'px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\" />',\\r\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\"><tspan fill=\\\"rgba(255,255,255,0.6)\\\">ID: </tspan>',\\r\\n                tokenId,\\r\\n                '</text></g>',\\r\\n                ' <g style=\\\"transform:translate(29px, 414px)\\\">',\\r\\n                '<rect width=\\\"',\\r\\n                uint256(7 * (str2length + 4)).toString(),\\r\\n                'px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\" />',\\r\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\"><tspan fill=\\\"rgba(255,255,255,0.6)\\\">Min Tick: </tspan>',\\r\\n                tickLowerStr,\\r\\n                '</text></g>',\\r\\n                ' <g style=\\\"transform:translate(29px, 444px)\\\">',\\r\\n                '<rect width=\\\"',\\r\\n                uint256(7 * (str3length + 4)).toString(),\\r\\n                'px\\\" height=\\\"26px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"rgba(0,0,0,0.6)\\\" />',\\r\\n                '<text x=\\\"12px\\\" y=\\\"17px\\\" font-family=\\\"\\\\'Courier New\\\\', monospace\\\" font-size=\\\"12px\\\" fill=\\\"white\\\"><tspan fill=\\\"rgba(255,255,255,0.6)\\\">Max Tick: </tspan>',\\r\\n                tickUpperStr,\\r\\n                '</text></g>'\\r\\n                '<g style=\\\"transform:translate(226px, 433px)\\\">',\\r\\n                '<rect width=\\\"36px\\\" height=\\\"36px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"none\\\" stroke=\\\"rgba(255,255,255,0.2)\\\" />',\\r\\n                '<path stroke-linecap=\\\"round\\\" d=\\\"M8 9C8.00004 22.9494 16.2099 28 27 28\\\" fill=\\\"none\\\" stroke=\\\"white\\\" />',\\r\\n                '<circle style=\\\"transform:translate3d(',\\r\\n                xCoord,\\r\\n                'px, ',\\r\\n                yCoord,\\r\\n                'px, 0px)\\\" cx=\\\"0px\\\" cy=\\\"0px\\\" r=\\\"4px\\\" fill=\\\"white\\\"/></g>'\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function tickToString(int24 tick) private pure returns (string memory) {\\r\\n        string memory sign = '';\\r\\n        if (tick < 0) {\\r\\n            tick = tick * -1;\\r\\n            sign = '-';\\r\\n        }\\r\\n        return string(abi.encodePacked(sign, uint256(uint24(tick)).toString()));\\r\\n    }\\r\\n\\r\\n    function rangeLocation(int24 tickLower, int24 tickUpper) internal pure returns (string memory, string memory) {\\r\\n        int24 midPoint = (tickLower + tickUpper) / 2;\\r\\n        if (midPoint < -125_000) {\\r\\n            return ('8', '7');\\r\\n        } else if (midPoint < -75_000) {\\r\\n            return ('8', '10.5');\\r\\n        } else if (midPoint < -25_000) {\\r\\n            return ('8', '14.25');\\r\\n        } else if (midPoint < -5_000) {\\r\\n            return ('10', '18');\\r\\n        } else if (midPoint < 0) {\\r\\n            return ('11', '21');\\r\\n        } else if (midPoint < 5_000) {\\r\\n            return ('13', '23');\\r\\n        } else if (midPoint < 25_000) {\\r\\n            return ('15', '25');\\r\\n        } else if (midPoint < 75_000) {\\r\\n            return ('18', '26');\\r\\n        } else if (midPoint < 125_000) {\\r\\n            return ('21', '27');\\r\\n        } else {\\r\\n            return ('24', '27');\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function generateSVGRareSparkle(uint256 tokenId, address poolAddress) private pure returns (string memory svg) {\\r\\n        if (isRare(tokenId, poolAddress)) {\\r\\n            svg = string(\\r\\n                abi.encodePacked(\\r\\n                    '<g style=\\\"transform:translate(226px, 392px)\\\"><rect width=\\\"36px\\\" height=\\\"36px\\\" rx=\\\"8px\\\" ry=\\\"8px\\\" fill=\\\"none\\\" stroke=\\\"rgba(255,255,255,0.2)\\\" />',\\r\\n                    '<g><path style=\\\"transform:translate(6px,6px)\\\" d=\\\"M12 0L12.6522 9.56587L18 1.6077L13.7819 10.2181L22.3923 6L14.4341 ',\\r\\n                    '11.3478L24 12L14.4341 12.6522L22.3923 18L13.7819 13.7819L18 22.3923L12.6522 14.4341L12 24L11.3478 14.4341L6 22.39',\\r\\n                    '23L10.2181 13.7819L1.6077 18L9.56587 12.6522L0 12L9.56587 11.3478L1.6077 6L10.2181 10.2181L6 1.6077L11.3478 9.56587L12 0Z\\\" fill=\\\"white\\\" />',\\r\\n                    '<animateTransform attributeName=\\\"transform\\\" type=\\\"rotate\\\" from=\\\"0 18 18\\\" to=\\\"360 18 18\\\" dur=\\\"10s\\\" repeatCount=\\\"indefinite\\\"/></g></g>'\\r\\n                )\\r\\n            );\\r\\n        } else {\\r\\n            svg = '';\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function isRare(uint256 tokenId, address poolAddress) internal pure returns (bool) {\\r\\n        bytes32 h = keccak256(abi.encodePacked(tokenId, poolAddress));\\r\\n        return uint256(h) < type(uint256).max / (1 + Math.log2(tokenId) * 2);\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.7.6\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @title Errors emitted by a pool\\r\\n/// @notice Contains custom errors emitted by the pool\\r\\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\\r\\ninterface IAlgebraPoolErrors {\\r\\n  // ####  pool errors  ####\\r\\n\\r\\n  /// @notice Emitted by the reentrancy guard\\r\\n  error locked();\\r\\n\\r\\n  /// @notice Emitted if arithmetic error occurred\\r\\n  error arithmeticError();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to initialize the pool twice\\r\\n  error alreadyInitialized();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\\r\\n  error notInitialized();\\r\\n\\r\\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\\r\\n  error zeroAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\\r\\n  error invalidAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens than it should have\\r\\n  error insufficientInputAmount();\\r\\n\\r\\n  /// @notice Emitted if there was an attempt to mint zero liquidity\\r\\n  error zeroLiquidityDesired();\\r\\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\\r\\n  error zeroLiquidityActual();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\\r\\n  error flashInsufficientPaid0();\\r\\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\\r\\n  error flashInsufficientPaid1();\\r\\n\\r\\n  /// @notice Emitted if limitSqrtPrice param is incorrect\\r\\n  error invalidLimitSqrtPrice();\\r\\n\\r\\n  /// @notice Tick must be divisible by tickspacing\\r\\n  error tickIsNotSpaced();\\r\\n\\r\\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\\r\\n  error notAllowed();\\r\\n\\r\\n  /// @notice Emitted if new tick spacing exceeds max allowed value\\r\\n  error invalidNewTickSpacing();\\r\\n  /// @notice Emitted if new community fee exceeds max allowed value\\r\\n  error invalidNewCommunityFee();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\\r\\n  error dynamicFeeActive();\\r\\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\\r\\n  error dynamicFeeDisabled();\\r\\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\\r\\n  error pluginIsNotConnected();\\r\\n  /// @notice Emitted if a plugin returns invalid selector after hook call\\r\\n  /// @param expectedSelector The expected selector\\r\\n  error invalidHookResponse(bytes4 expectedSelector);\\r\\n\\r\\n  // ####  LiquidityMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if liquidity underflows\\r\\n  error liquiditySub();\\r\\n  /// @notice Emitted if liquidity overflows\\r\\n  error liquidityAdd();\\r\\n\\r\\n  // ####  TickManagement errors  ####\\r\\n\\r\\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\\r\\n  error topTickLowerOrEqBottomTick();\\r\\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\\r\\n  error bottomTickLowerThanMIN();\\r\\n  /// @notice Emitted if the topTick param is greater than max allowed value\\r\\n  error topTickAboveMAX();\\r\\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\\r\\n  error liquidityOverflow();\\r\\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\\r\\n  error tickIsNotInitialized();\\r\\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\\r\\n  error tickInvalidLinks();\\r\\n\\r\\n  // ####  SafeTransfer errors  ####\\r\\n\\r\\n  /// @notice Emitted if token transfer failed internally\\r\\n  error transferFailed();\\r\\n\\r\\n  // ####  TickMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\\r\\n  error tickOutOfRange();\\r\\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\\r\\n  error priceOutOfRange();\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = -887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n    unchecked {\\r\\n      // get abs value\\r\\n      int24 absTickMask = tick >> (24 - 1);\\r\\n      uint256 absTick = uint24((tick + absTickMask) ^ absTickMask);\\r\\n      if (absTick > uint24(MAX_TICK)) revert IAlgebraPoolErrors.tickOutOfRange();\\r\\n\\r\\n      uint256 ratio = 0x100000000000000000000000000000000;\\r\\n      if (absTick & 0x1 != 0) ratio = 0xfffcb933bd6fad37aa2d162d1a594001;\\r\\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n      if (absTick >= 0x40000) {\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n      }\\r\\n\\r\\n      if (tick > 0) {\\r\\n        assembly {\\r\\n          ratio := div(not(0), ratio)\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n      price = uint160((ratio + 0xFFFFFFFF) >> 32);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n    unchecked {\\r\\n      // second inequality must be >= because the price can never reach the price at the max tick\\r\\n      if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert IAlgebraPoolErrors.priceOutOfRange();\\r\\n      uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n      uint256 r = ratio;\\r\\n      uint256 msb;\\r\\n\\r\\n      assembly {\\r\\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(4, gt(r, 0xFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(3, gt(r, 0xFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(2, gt(r, 0xF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(1, gt(r, 0x3))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := gt(r, 0x1)\\r\\n        msb := or(msb, f)\\r\\n      }\\r\\n\\r\\n      if (msb >= 128) r = ratio >> (msb - 127);\\r\\n      else r = ratio << (127 - msb);\\r\\n\\r\\n      int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(63, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(62, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(61, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(60, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(59, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(58, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(57, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(56, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(55, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(54, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(53, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(52, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(51, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(50, f))\\r\\n      }\\r\\n\\r\\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissioned pool actions\\r\\n/// @notice Contains pool methods that may only be called by permissioned addresses\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /// @notice Set the community's % share of the fees. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newCommunityFee The new community fee percent in thousandths (1e-3)\\r\\n  function setCommunityFee(uint16 newCommunityFee) external;\\r\\n\\r\\n  /// @notice Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newTickSpacing The new tick spacing value\\r\\n  function setTickSpacing(int24 newTickSpacing) external;\\r\\n\\r\\n  /// @notice Set the new plugin address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newPluginAddress The new plugin address\\r\\n  function setPlugin(address newPluginAddress) external;\\r\\n\\r\\n  /// @notice Set new plugin config. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newConfig In the new configuration of the plugin,\\r\\n  /// each bit of which is responsible for a particular hook.\\r\\n  function setPluginConfig(uint8 newConfig) external;\\r\\n\\r\\n  /// @notice Set new community fee vault address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @dev Community fee vault receives collected community fees.\\r\\n  /// **accumulated but not yet sent to the vault community fees once will be sent to the `newCommunityVault` address**\\r\\n  /// @param newCommunityVault The address of new community fee vault\\r\\n  function setCommunityVault(address newCommunityVault) external;\\r\\n\\r\\n  /// @notice Set new pool fee. Can be called by owner if dynamic fee is disabled.\\r\\n  /// Called by the plugin if dynamic fee is enabled\\r\\n  /// @param newFee The new fee value\\r\\n  function setFee(uint16 newFee) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /// @notice The Algebra factory contract, which must adhere to the IAlgebraFactory interface\\r\\n  /// @return The contract address\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /// @notice The first of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /// @notice The second of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n  /// @return The max amount of liquidity per tick\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Important security note: when using this data by external contracts, it is necessary to take into account the possibility\\r\\n/// of manipulation (including read-only reentrancy).\\r\\n/// This interface is based on the UniswapV3 interface, credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /// @notice Safely get most important state values of Algebra Integral AMM\\r\\n  /// @dev Several values exposed as a single method to save gas when accessed externally.\\r\\n  /// **Important security note: this method checks reentrancy lock and should be preferred in most cases**.\\r\\n  /// @return sqrtPrice The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return activeLiquidity  The currently in-range liquidity available to the pool\\r\\n  /// @return nextTick The next initialized tick after current global tick\\r\\n  /// @return previousTick The previous initialized tick before (or at) current global tick\\r\\n  function safelyGetStateOfAMM()\\r\\n    external\\r\\n    view\\r\\n    returns (uint160 sqrtPrice, int24 tick, uint16 lastFee, uint8 pluginConfig, uint128 activeLiquidity, int24 nextTick, int24 previousTick);\\r\\n\\r\\n  /// @notice Allows to easily get current reentrancy lock status\\r\\n  /// @dev can be used to prevent read-only reentrancy.\\r\\n  /// This method just returns `globalState.unlocked` value\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function isUnlocked() external view returns (bool unlocked);\\r\\n\\r\\n  // ! IMPORTANT security note: the pool state can be manipulated.\\r\\n  // ! The following methods do not check reentrancy lock themselves.\\r\\n\\r\\n  /// @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n  /// and is exposed as a single method to save gas when accessed externally.\\r\\n  /// @dev **important security note: caller should check `unlocked` flag to prevent read-only reentrancy**\\r\\n  /// @return price The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run\\r\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return communityFee The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function globalState() external view returns (uint160 price, int24 tick, uint16 lastFee, uint8 pluginConfig, uint16 communityFee, bool unlocked);\\r\\n\\r\\n  /// @notice Look up information about a specific tick in the pool\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param tick The tick to look up\\r\\n  /// @return liquidityTotal The total amount of position liquidity that uses the pool either as tick lower or tick upper\\r\\n  /// @return liquidityDelta How much liquidity changes when the pool price crosses the tick\\r\\n  /// @return prevTick The previous tick in tick list\\r\\n  /// @return nextTick The next tick in tick list\\r\\n  /// @return outerFeeGrowth0Token The fee growth on the other side of the tick from the current tick in token0\\r\\n  /// @return outerFeeGrowth1Token The fee growth on the other side of the tick from the current tick in token1\\r\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n  /// a specific position.\\r\\n  function ticks(\\r\\n    int24 tick\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      int24 prevTick,\\r\\n      int24 nextTick,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token\\r\\n    );\\r\\n\\r\\n  /// @notice The timestamp of the last sending of tokens to community vault\\r\\n  /// @return The timestamp truncated to 32 bits\\r\\n  function communityFeeLastTimestamp() external view returns (uint32);\\r\\n\\r\\n  /// @notice The amounts of token0 and token1 that will be sent to the vault\\r\\n  /// @dev Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\\r\\n  /// @return communityFeePending0 The amount of token0 that will be sent to the vault\\r\\n  /// @return communityFeePending1 The amount of token1 that will be sent to the vault\\r\\n  function getCommunityFeePending() external view returns (uint128 communityFeePending0, uint128 communityFeePending1);\\r\\n\\r\\n  /// @notice Returns the address of currently used plugin\\r\\n  /// @dev The plugin is subject to change\\r\\n  /// @return pluginAddress The address of currently used plugin\\r\\n  function plugin() external view returns (address pluginAddress);\\r\\n\\r\\n  /// @notice The contract to which community fees are transferred\\r\\n  /// @return communityVaultAddress The communityVault address\\r\\n  function communityVault() external view returns (address communityVaultAddress);\\r\\n\\r\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickTree for more information\\r\\n  /// @param wordPosition Index of 256-bits word with ticks\\r\\n  /// @return The 256-bits word with packed ticks info\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token0\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token1\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The current pool fee value\\r\\n  /// @dev In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee.\\r\\n  /// If the plugin implements complex fee logic, this method may return an incorrect value or revert.\\r\\n  /// In this case, see the plugin implementation and related documentation.\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return currentFee The current pool fee value in hundredths of a bip, i.e. 1e-6\\r\\n  function fee() external view returns (uint16 currentFee);\\r\\n\\r\\n  /// @notice The tracked token0 and token1 reserves of pool\\r\\n  /// @dev If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee.\\r\\n  /// If the balance exceeds uint128, the excess will be sent to the communityVault.\\r\\n  /// @return reserve0 The last known reserve of token0\\r\\n  /// @return reserve1 The last known reserve of token1\\r\\n  function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\r\\n\\r\\n  /// @notice Returns the information about a position by the position's key\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param key The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes\\r\\n  /// @return liquidity The amount of liquidity in the position\\r\\n  /// @return innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke\\r\\n  /// @return fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n  function positions(\\r\\n    bytes32 key\\r\\n  ) external view returns (uint256 liquidity, uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token, uint128 fees0, uint128 fees1);\\r\\n\\r\\n  /// @notice The currently in range liquidity available to the pool\\r\\n  /// @dev This value has no relationship to the total liquidity across all ticks.\\r\\n  /// Returned value cannot exceed type(uint128).max\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The current in range liquidity\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /// @notice The current tick spacing\\r\\n  /// @dev Ticks can only be initialized by new mints at multiples of this value\\r\\n  /// e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n  /// However, tickspacing can be changed after the ticks have been initialized.\\r\\n  /// This value is an int24 to avoid casting even though it is always positive.\\r\\n  /// @return The current tick spacing\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /// @notice The previous initialized tick before (or at) current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The previous initialized tick\\r\\n  function prevTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The next initialized tick after current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The next initialized tick\\r\\n  function nextTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The root of tick search tree\\r\\n  /// @dev Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The root of tick search tree as bitmap\\r\\n  function tickTreeRoot() external view returns (uint32);\\r\\n\\r\\n  /// @notice The second layer of tick search tree\\r\\n  /// @dev Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The node of tick search tree second layer\\r\\n  function tickTreeSecondLayer(int16) external view returns (uint256);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n  /// @dev Mint/Burn/Swaps cannot be emitted by the pool before Initialize\\r\\n  /// @param price The initial sqrt price of the pool, as a Q64.96\\r\\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /// @notice Emitted when liquidity is minted for a given position\\r\\n  /// @param sender The address that minted the liquidity\\r\\n  /// @param owner The owner of the position and recipient of any minted liquidity\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity minted to the position range\\r\\n  /// @param amount0 How much token0 was required for the minted liquidity\\r\\n  /// @param amount1 How much token1 was required for the minted liquidity\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when fees are collected by the owner of a position\\r\\n  /// @param owner The owner of the position for which fees are collected\\r\\n  /// @param recipient The address that received fees\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param amount0 The amount of token0 fees collected\\r\\n  /// @param amount1 The amount of token1 fees collected\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Emitted when a position's liquidity is removed\\r\\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n  /// @param owner The owner of the position for which liquidity is removed\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity to remove\\r\\n  /// @param amount0 The amount of token0 withdrawn\\r\\n  /// @param amount1 The amount of token1 withdrawn\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Emitted by the pool for any swaps between token0 and token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the output of the swap\\r\\n  /// @param amount0 The delta of the token0 balance of the pool\\r\\n  /// @param amount1 The delta of the token1 balance of the pool\\r\\n  /// @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n  /// @param liquidity The liquidity of the pool after the swap\\r\\n  /// @param tick The log base 1.0001 of price of the pool after the swap\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /// @notice Emitted by the pool for any flashes of token0/token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the tokens from flash\\r\\n  /// @param amount0 The amount of token0 that was flashed\\r\\n  /// @param amount1 The amount of token1 that was flashed\\r\\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /// @notice Emitted when the community fee is changed by the pool\\r\\n  /// @param communityFeeNew The updated value of the community fee in thousandths (1e-3)\\r\\n  event CommunityFee(uint16 communityFeeNew);\\r\\n\\r\\n  /// @notice Emitted when the tick spacing changes\\r\\n  /// @param newTickSpacing The updated value of the new tick spacing\\r\\n  event TickSpacing(int24 newTickSpacing);\\r\\n\\r\\n  /// @notice Emitted when the plugin address changes\\r\\n  /// @param newPluginAddress New plugin address\\r\\n  event Plugin(address newPluginAddress);\\r\\n\\r\\n  /// @notice Emitted when the plugin config changes\\r\\n  /// @param newPluginConfig New plugin config\\r\\n  event PluginConfig(uint8 newPluginConfig);\\r\\n\\r\\n  /// @notice Emitted when the fee changes inside the pool\\r\\n  /// @param fee The current fee in hundredths of a bip, i.e. 1e-6\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  event CommunityVault(address newCommunityVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /// @notice Sets the initial price for the pool\\r\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n  /// @dev Initialization should be done in one transaction with pool creation to avoid front-running\\r\\n  /// @param initialPrice The initial sqrt price of the pool as a Q64.96\\r\\n  function initialize(uint160 initialPrice) external;\\r\\n\\r\\n  /// @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraMintCallback#algebraMintCallback\\r\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n  /// on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address for which the liquidity will be created\\r\\n  /// @param bottomTick The lower tick of the position in which to add liquidity\\r\\n  /// @param topTick The upper tick of the position in which to add liquidity\\r\\n  /// @param liquidityDesired The desired amount of liquidity to mint\\r\\n  /// @param data Any data that should be passed through to the callback\\r\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return liquidityActual The actual minted amount of liquidity\\r\\n  function mint(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 liquidityDesired,\\r\\n    bytes calldata data\\r\\n  ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\\r\\n\\r\\n  /// @notice Collects tokens owed to a position\\r\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n  /// @param recipient The address which should receive the fees collected\\r\\n  /// @param bottomTick The lower tick of the position for which to collect fees\\r\\n  /// @param topTick The upper tick of the position for which to collect fees\\r\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n  /// @return amount0 The amount of fees collected in token0\\r\\n  /// @return amount1 The amount of fees collected in token1\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n  /// @dev Fees must be collected separately via a call to #collect\\r\\n  /// @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n  /// @param topTick The upper tick of the position for which to burn liquidity\\r\\n  /// @param amount How much liquidity to burn\\r\\n  /// @param data Any data that should be passed through to the plugin\\r\\n  /// @return amount0 The amount of token0 sent to the recipient\\r\\n  /// @return amount1 The amount of token1 sent to the recipient\\r\\n  function burn(int24 bottomTick, int24 topTick, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0 with prepayment\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// caller must send tokens in callback before swap calculation\\r\\n  /// the actually sent amount of tokens is used for further calculations\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountToSell The amount of the swap, only positive (exact input) amount allowed\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swapWithPaymentInAdvance(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountToSell,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback#algebraFlashCallback\\r\\n  /// @dev All excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee.\\r\\n  /// If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\\r\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\r\\n  /// @param amount0 The amount of token0 to send\\r\\n  /// @param amount1 The amount of token1 to send\\r\\n  /// @param data Any data to be passed through to the callback\\r\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\nimport './pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title The interface for a Algebra Pool\\r\\n/// @dev The pool interface is broken up into many smaller pieces.\\r\\n/// This interface includes custom error definitions and cannot be used in older versions of Solidity.\\r\\n/// For older versions of Solidity use #IAlgebraPoolLegacy\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents,\\r\\n  IAlgebraPoolErrors\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"@cryptoalgebra/integral-core/contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      // Subtract 256 bit remainder from 512 bit number\\r\\n      assembly {\\r\\n        let remainder := mulmod(a, b, denominator)\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      uint256 twos = (0 - denominator) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the preconditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      if (a == 0 || ((result = a * b) / a == b)) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n        }\\r\\n      } else {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n          require(result < type(uint256).max);\\r\\n          result++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function unsafeDivRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0xB380e9cB2aFDe83A56b3c5E219F27E1993173b0d","bytecode":"","deployedBytecode":"","abi":[{"inputs":[],"name":"tickOutOfRange","type":"error"},{"inputs":[{"components":[{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"address","name":"quoteTokenAddress","type":"address"},{"internalType":"address","name":"baseTokenAddress","type":"address"},{"internalType":"string","name":"quoteTokenSymbol","type":"string"},{"internalType":"string","name":"baseTokenSymbol","type":"string"},{"internalType":"uint8","name":"quoteTokenDecimals","type":"uint8"},{"internalType":"uint8","name":"baseTokenDecimals","type":"uint8"},{"internalType":"bool","name":"flipRatio","type":"bool"},{"internalType":"int24","name":"tickLower","type":"int24"},{"internalType":"int24","name":"tickUpper","type":"int24"},{"internalType":"int24","name":"tickCurrent","type":"int24"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"address","name":"poolAddress","type":"address"}],"internalType":"struct NFTDescriptor.ConstructTokenURIParams","name":"params","type":"tuple"}],"name":"constructTokenURI","outputs":[{"internalType":"string","name":"","type":"string"}],"stateMutability":"pure","type":"function"}]}