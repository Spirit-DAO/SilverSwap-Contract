{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/lens/TickLens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol';\\r\\nimport '@cryptoalgebra/integral-core/contracts/libraries/TickTree.sol';\\r\\n\\r\\nimport '../interfaces/ITickLens.sol';\\r\\n\\r\\n/// @title Algebra Integral 1.0 Tick Lens contract\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\ncontract TickLens is ITickLens {\\r\\n    /// @inheritdoc ITickLens\\r\\n    function getPopulatedTicksInWord(\\r\\n        address pool,\\r\\n        int16 tickTableIndex\\r\\n    ) public view override returns (PopulatedTick[] memory populatedTicks) {\\r\\n        // fetch bitmap\\r\\n        uint256 bitmap = IAlgebraPool(pool).tickTable(tickTableIndex);\\r\\n        unchecked {\\r\\n            // calculate the number of populated ticks\\r\\n            uint256 numberOfPopulatedTicks;\\r\\n            for (uint256 i = 0; i < 256; i++) {\\r\\n                if (bitmap & (1 << i) > 0) numberOfPopulatedTicks++;\\r\\n            }\\r\\n\\r\\n            // fetch populated tick data\\r\\n            populatedTicks = new PopulatedTick[](numberOfPopulatedTicks);\\r\\n            for (uint256 i = 0; i < 256; i++) {\\r\\n                if (bitmap & (1 << i) > 0) {\\r\\n                    int24 populatedTick = ((int24(tickTableIndex) << 8) + int24(uint24(i)));\\r\\n                    (uint256 liquidityGross, int128 liquidityNet, , ) = _getTick(pool, populatedTick);\\r\\n                    populatedTicks[--numberOfPopulatedTicks] = PopulatedTick({\\r\\n                        tick: populatedTick,\\r\\n                        liquidityNet: liquidityNet,\\r\\n                        liquidityGross: uint128(liquidityGross)\\r\\n                    });\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITickLens\\r\\n    function getClosestActiveTicks(\\r\\n        address pool,\\r\\n        int24 targetTick\\r\\n    ) public view override returns (PopulatedTick[2] memory populatedTicks) {\\r\\n        uint32 tickTreeRoot = IAlgebraPool(pool).tickTreeRoot();\\r\\n\\r\\n        uint16 rootIndex = uint16(uint24((int24(targetTick >> 8) + TickTree.SECOND_LAYER_OFFSET) >> 8));\\r\\n\\r\\n        int24 activeTickIndex;\\r\\n        bool initialized;\\r\\n\\r\\n        if ((1 << rootIndex) & tickTreeRoot != 0) {\\r\\n            uint256 leafNode = _fetchBitmap(pool, int16(targetTick >> 8));\\r\\n\\r\\n            (activeTickIndex, initialized) = TickTree._nextActiveBitInWord(leafNode, targetTick);\\r\\n\\r\\n            if (!initialized) {\\r\\n                int16 secondLayerIndex = int16((targetTick >> 8) + int24(TickTree.SECOND_LAYER_OFFSET) + 1);\\r\\n                uint256 secondLayerNode = _fetchSecondLayerNode(pool, secondLayerIndex >> 8);\\r\\n                (int24 activeLeafIndex, bool initializedSecondLayer) = TickTree._nextActiveBitInWord(\\r\\n                    secondLayerNode,\\r\\n                    secondLayerIndex\\r\\n                );\\r\\n\\r\\n                if (initializedSecondLayer) {\\r\\n                    int24 nextTickIndex = int24(activeLeafIndex - TickTree.SECOND_LAYER_OFFSET) << 8;\\r\\n                    leafNode = _fetchBitmap(pool, int16(activeLeafIndex - TickTree.SECOND_LAYER_OFFSET));\\r\\n                    (activeTickIndex, initialized) = TickTree._nextActiveBitInWord(leafNode, nextTickIndex);\\r\\n                } else {\\r\\n                    rootIndex++;\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (!initialized) {\\r\\n            (int24 nextActiveSecondLayerNode, ) = TickTree._nextActiveBitInWord(tickTreeRoot, int16(rootIndex));\\r\\n            uint256 secondLayerNode = _fetchSecondLayerNode(pool, int16(nextActiveSecondLayerNode));\\r\\n\\r\\n            (int24 activeLeafIndex, bool initializedSecondLayer) = TickTree._nextActiveBitInWord(\\r\\n                secondLayerNode,\\r\\n                int24(nextActiveSecondLayerNode) << 8\\r\\n            );\\r\\n            if (initializedSecondLayer) {\\r\\n                uint256 leafNode = _fetchBitmap(pool, int16(activeLeafIndex - TickTree.SECOND_LAYER_OFFSET));\\r\\n\\r\\n                (activeTickIndex, ) = TickTree._nextActiveBitInWord(\\r\\n                    leafNode,\\r\\n                    int24(activeLeafIndex - TickTree.SECOND_LAYER_OFFSET) << 8\\r\\n                );\\r\\n            } else {\\r\\n                activeTickIndex = TickMath.MAX_TICK;\\r\\n            }\\r\\n        }\\r\\n\\r\\n        if (activeTickIndex == targetTick) {\\r\\n            (uint256 liquidityGross, int128 liquidityNet, , int24 nextTick) = _getTick(pool, targetTick);\\r\\n            populatedTicks[0] = PopulatedTick({\\r\\n                tick: targetTick,\\r\\n                liquidityNet: liquidityNet,\\r\\n                liquidityGross: uint128(liquidityGross)\\r\\n            });\\r\\n\\r\\n            (liquidityGross, liquidityNet, , ) = _getTick(pool, nextTick);\\r\\n\\r\\n            populatedTicks[1] = PopulatedTick({\\r\\n                tick: nextTick,\\r\\n                liquidityNet: liquidityNet,\\r\\n                liquidityGross: uint128(liquidityGross)\\r\\n            });\\r\\n        } else {\\r\\n            (uint256 liquidityGross, int128 liquidityNet, int24 previousTick, ) = _getTick(pool, activeTickIndex);\\r\\n            populatedTicks[1] = PopulatedTick({\\r\\n                tick: activeTickIndex,\\r\\n                liquidityNet: liquidityNet,\\r\\n                liquidityGross: uint128(liquidityGross)\\r\\n            });\\r\\n\\r\\n            (liquidityGross, liquidityNet, , ) = _getTick(pool, previousTick);\\r\\n\\r\\n            populatedTicks[0] = PopulatedTick({\\r\\n                tick: previousTick,\\r\\n                liquidityNet: liquidityNet,\\r\\n                liquidityGross: uint128(liquidityGross)\\r\\n            });\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc ITickLens\\r\\n    function getNextActiveTicks(\\r\\n        address pool,\\r\\n        int24 startingTick,\\r\\n        uint256 amount,\\r\\n        bool upperDirection\\r\\n    ) public view override returns (PopulatedTick[] memory populatedTicks) {\\r\\n        int24 currentTick = startingTick;\\r\\n\\r\\n        // prevent pointers from being initialized\\r\\n        // if we initialize the populatedTicks array directly, it will automatically write `amount` pointers to structs in array\\r\\n        bytes32[] memory populatedTicksPointers = new bytes32[](amount);\\r\\n        assembly {\\r\\n            populatedTicks := populatedTicksPointers\\r\\n        }\\r\\n\\r\\n        (uint256 liquidityGross, int128 liquidityNet, int24 previousTick, int24 nextTick, , ) = IAlgebraPool(pool)\\r\\n            .ticks(currentTick);\\r\\n        require(previousTick != nextTick, 'Invalid startingTick');\\r\\n\\r\\n        bytes32 freeMemoryPointer;\\r\\n        assembly {\\r\\n            freeMemoryPointer := mload(0x40)\\r\\n        }\\r\\n        unchecked {\\r\\n            for (uint256 i; i < amount; ++i) {\\r\\n                // allocate memory for new struct and set it without rewriting free memory pointer\\r\\n                assembly {\\r\\n                    mstore(freeMemoryPointer, currentTick)\\r\\n                    mstore(add(freeMemoryPointer, 0x20), liquidityNet)\\r\\n                    mstore(add(freeMemoryPointer, 0x40), liquidityGross)\\r\\n                }\\r\\n\\r\\n                // prevent array length check and store new pointer in array\\r\\n                assembly {\\r\\n                    mstore(add(mul(i, 0x20), add(populatedTicks, 0x20)), freeMemoryPointer)\\r\\n                    freeMemoryPointer := add(freeMemoryPointer, 0x60)\\r\\n                }\\r\\n\\r\\n                int24 newCurrentTick = upperDirection ? nextTick : previousTick;\\r\\n                if (newCurrentTick == currentTick) {\\r\\n                    // reached MAX or MIN tick\\r\\n                    assembly {\\r\\n                        mstore(populatedTicks, add(i, 1)) // cap returning array length\\r\\n                    }\\r\\n                    break;\\r\\n                }\\r\\n                currentTick = newCurrentTick;\\r\\n                (liquidityGross, liquidityNet, previousTick, nextTick) = _getTick(pool, currentTick);\\r\\n            }\\r\\n        }\\r\\n        assembly {\\r\\n            mstore(0x40, freeMemoryPointer) // rewrite free memory pointer slot\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // prevents memory expansion during staticcall\\r\\n    // will use [0x00, 0xC0] memory slots\\r\\n    function _getTick(\\r\\n        address pool,\\r\\n        int24 index\\r\\n    ) internal view virtual returns (uint128 liquidityGross, int128 liquidityNet, int24 previousTick, int24 nextTick) {\\r\\n        assembly {\\r\\n            let freeMemoryPointer := mload(0x40) // we will need to restore memory further\\r\\n            let slot1 := mload(0x60)\\r\\n            let slot2 := mload(0x80)\\r\\n            let slot3 := mload(0xA0)\\r\\n\\r\\n            mstore(0x00, 0xf30dba9300000000000000000000000000000000000000000000000000000000) // \\\"ticks\\\" selector\\r\\n            mstore(0x04, index)\\r\\n            let success := staticcall(gas(), pool, 0, 0x24, 0, 0xC0)\\r\\n            liquidityGross := mload(0)\\r\\n            liquidityNet := mload(0x20)\\r\\n            previousTick := mload(0x40)\\r\\n            nextTick := mload(0x60)\\r\\n\\r\\n            mstore(0x40, freeMemoryPointer) // restore memory\\r\\n            mstore(0x60, slot1)\\r\\n            mstore(0x80, slot2)\\r\\n            mstore(0xA0, slot3)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fetchBitmap(address pool, int16 index) internal view virtual returns (uint256 word) {\\r\\n        assembly {\\r\\n            mstore(0x00, 0xc677e3e000000000000000000000000000000000000000000000000000000000) // \\\"tickTable(int16)\\\" selector\\r\\n            mstore(0x04, index)\\r\\n            let success := staticcall(gas(), pool, 0, 0x24, 0, 0x20)\\r\\n            word := mload(0)\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _fetchSecondLayerNode(address pool, int16 index) internal view virtual returns (uint256 word) {\\r\\n        assembly {\\r\\n            mstore(0x00, 0xd861903700000000000000000000000000000000000000000000000000000000) // \\\"tickTreeSecondLayer(int16)\\\" selector\\r\\n            mstore(0x04, index)\\r\\n            let success := staticcall(gas(), pool, 0, 0x24, 0, 0x20)\\r\\n            word := mload(0)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/ITickLens.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.7.5;\\r\\npragma abicoder v2;\\r\\n\\r\\n/// @title Tick Lens\\r\\n/// @notice Provides functions for fetching chunks of tick data for a pool\\r\\n/// @dev This avoids the waterfall of fetching the tick bitmap, parsing the bitmap to know which ticks to fetch, and\\r\\n/// then sending additional multicalls to fetch the tick data\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\ninterface ITickLens {\\r\\n    struct PopulatedTick {\\r\\n        int24 tick;\\r\\n        int128 liquidityNet;\\r\\n        uint128 liquidityGross;\\r\\n    }\\r\\n\\r\\n    /// @notice Get all the tick data for the populated ticks from a word of the tick bitmap of a pool\\r\\n    /// @param pool The address of the pool for which to fetch populated tick data\\r\\n    /// @param tickTableIndex The index of the word in the tick bitmap for which to parse the bitmap and\\r\\n    /// fetch all the populated ticks\\r\\n    /// @return populatedTicks An array of tick data for the given word in the tick bitmap\\r\\n    function getPopulatedTicksInWord(\\r\\n        address pool,\\r\\n        int16 tickTableIndex\\r\\n    ) external view returns (PopulatedTick[] memory populatedTicks);\\r\\n\\r\\n    /// @notice Get closest initialized ticks around `targetTick`\\r\\n    /// @param pool The address of the pool for which to fetch populated tick data\\r\\n    /// @param targetTick The tick around which the nearest ticks will be searched\\r\\n    /// @return populatedTicks An array of two ticks: before or at `targetTick` and after `targetTick`\\r\\n    function getClosestActiveTicks(\\r\\n        address pool,\\r\\n        int24 targetTick\\r\\n    ) external view returns (PopulatedTick[2] memory populatedTicks);\\r\\n\\r\\n    /// @notice Get all the tick data for the `amount` (or less) of populated ticks after `startingTick` (including `startingTick` itself)\\r\\n    /// @param pool The address of the pool for which to fetch populated tick data\\r\\n    /// @param startingTick The starting tick index. Must be populated tick\\r\\n    /// @param amount The maximum amount of ticks requested\\r\\n    /// @param upperDirection The direction of search. Will fetch 'next' ticks in direction of price increase if true\\r\\n    /// @return populatedTicks An array of tick data for fetched ticks (`amount` or less)\\r\\n    function getNextActiveTicks(\\r\\n        address pool,\\r\\n        int24 startingTick,\\r\\n        uint256 amount,\\r\\n        bool upperDirection\\r\\n    ) external view returns (PopulatedTick[] memory populatedTicks);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.7.5\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @title Errors emitted by a pool\\r\\n/// @notice Contains custom errors emitted by the pool\\r\\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\\r\\ninterface IAlgebraPoolErrors {\\r\\n  // ####  pool errors  ####\\r\\n\\r\\n  /// @notice Emitted by the reentrancy guard\\r\\n  error locked();\\r\\n\\r\\n  /// @notice Emitted if arithmetic error occurred\\r\\n  error arithmeticError();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to initialize the pool twice\\r\\n  error alreadyInitialized();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\\r\\n  error notInitialized();\\r\\n\\r\\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\\r\\n  error zeroAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\\r\\n  error invalidAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens than it should have\\r\\n  error insufficientInputAmount();\\r\\n\\r\\n  /// @notice Emitted if there was an attempt to mint zero liquidity\\r\\n  error zeroLiquidityDesired();\\r\\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\\r\\n  error zeroLiquidityActual();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\\r\\n  error flashInsufficientPaid0();\\r\\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\\r\\n  error flashInsufficientPaid1();\\r\\n\\r\\n  /// @notice Emitted if limitSqrtPrice param is incorrect\\r\\n  error invalidLimitSqrtPrice();\\r\\n\\r\\n  /// @notice Tick must be divisible by tickspacing\\r\\n  error tickIsNotSpaced();\\r\\n\\r\\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\\r\\n  error notAllowed();\\r\\n\\r\\n  /// @notice Emitted if new tick spacing exceeds max allowed value\\r\\n  error invalidNewTickSpacing();\\r\\n  /// @notice Emitted if new community fee exceeds max allowed value\\r\\n  error invalidNewCommunityFee();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\\r\\n  error dynamicFeeActive();\\r\\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\\r\\n  error dynamicFeeDisabled();\\r\\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\\r\\n  error pluginIsNotConnected();\\r\\n  /// @notice Emitted if a plugin returns invalid selector after hook call\\r\\n  /// @param expectedSelector The expected selector\\r\\n  error invalidHookResponse(bytes4 expectedSelector);\\r\\n\\r\\n  // ####  LiquidityMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if liquidity underflows\\r\\n  error liquiditySub();\\r\\n  /// @notice Emitted if liquidity overflows\\r\\n  error liquidityAdd();\\r\\n\\r\\n  // ####  TickManagement errors  ####\\r\\n\\r\\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\\r\\n  error topTickLowerOrEqBottomTick();\\r\\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\\r\\n  error bottomTickLowerThanMIN();\\r\\n  /// @notice Emitted if the topTick param is greater than max allowed value\\r\\n  error topTickAboveMAX();\\r\\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\\r\\n  error liquidityOverflow();\\r\\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\\r\\n  error tickIsNotInitialized();\\r\\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\\r\\n  error tickInvalidLinks();\\r\\n\\r\\n  // ####  SafeTransfer errors  ####\\r\\n\\r\\n  /// @notice Emitted if token transfer failed internally\\r\\n  error transferFailed();\\r\\n\\r\\n  // ####  TickMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\\r\\n  error tickOutOfRange();\\r\\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\\r\\n  error priceOutOfRange();\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"@cryptoalgebra/integral-core/contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = -887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n    unchecked {\\r\\n      // get abs value\\r\\n      int24 absTickMask = tick >> (24 - 1);\\r\\n      uint256 absTick = uint24((tick + absTickMask) ^ absTickMask);\\r\\n      if (absTick > uint24(MAX_TICK)) revert IAlgebraPoolErrors.tickOutOfRange();\\r\\n\\r\\n      uint256 ratio = 0x100000000000000000000000000000000;\\r\\n      if (absTick & 0x1 != 0) ratio = 0xfffcb933bd6fad37aa2d162d1a594001;\\r\\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n      if (absTick >= 0x40000) {\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n      }\\r\\n\\r\\n      if (tick > 0) {\\r\\n        assembly {\\r\\n          ratio := div(not(0), ratio)\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n      price = uint160((ratio + 0xFFFFFFFF) >> 32);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n    unchecked {\\r\\n      // second inequality must be >= because the price can never reach the price at the max tick\\r\\n      if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert IAlgebraPoolErrors.priceOutOfRange();\\r\\n      uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n      uint256 r = ratio;\\r\\n      uint256 msb;\\r\\n\\r\\n      assembly {\\r\\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(4, gt(r, 0xFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(3, gt(r, 0xFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(2, gt(r, 0xF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(1, gt(r, 0x3))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := gt(r, 0x1)\\r\\n        msb := or(msb, f)\\r\\n      }\\r\\n\\r\\n      if (msb >= 128) r = ratio >> (msb - 127);\\r\\n      else r = ratio << (127 - msb);\\r\\n\\r\\n      int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(63, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(62, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(61, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(60, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(59, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(58, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(57, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(56, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(55, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(54, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(53, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(52, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(51, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(50, f))\\r\\n      }\\r\\n\\r\\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"@cryptoalgebra/integral-core/contracts/libraries/TickTree.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './TickMath.sol';\\r\\n\\r\\n/// @title Packed tick initialized state library\\r\\n/// @notice Stores a packed mapping of tick index to its initialized state and search tree\\r\\n/// @dev The leafs mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\r\\nlibrary TickTree {\\r\\n  int16 internal constant SECOND_LAYER_OFFSET = 3466; // ceil(-MIN_TICK / 256)\\r\\n\\r\\n  /// @notice Toggles the initialized state for a given tick from false to true, or vice versa\\r\\n  /// @param leafs The mapping of words with ticks\\r\\n  /// @param secondLayer The mapping of words with leafs\\r\\n  /// @param treeRoot The word with info about active subtrees\\r\\n  /// @param tick The tick to toggle\\r\\n  function toggleTick(\\r\\n    mapping(int16 => uint256) storage leafs,\\r\\n    mapping(int16 => uint256) storage secondLayer,\\r\\n    uint32 treeRoot,\\r\\n    int24 tick\\r\\n  ) internal returns (uint32 newTreeRoot) {\\r\\n    newTreeRoot = treeRoot;\\r\\n    (bool toggledNode, int16 nodeIndex) = _toggleBitInNode(leafs, tick); // toggle in leaf\\r\\n    if (toggledNode) {\\r\\n      unchecked {\\r\\n        (toggledNode, nodeIndex) = _toggleBitInNode(secondLayer, nodeIndex + SECOND_LAYER_OFFSET);\\r\\n      }\\r\\n      if (toggledNode) {\\r\\n        assembly {\\r\\n          newTreeRoot := xor(newTreeRoot, shl(nodeIndex, 1))\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Toggles a bit in a tree layer by its index\\r\\n  /// @param treeLevel The level of tree\\r\\n  /// @param bitIndex The end-to-end index of a bit in a layer of tree\\r\\n  /// @return toggledNode Toggled whole node or not\\r\\n  /// @return nodeIndex Number of corresponding node\\r\\n  function _toggleBitInNode(mapping(int16 => uint256) storage treeLevel, int24 bitIndex) private returns (bool toggledNode, int16 nodeIndex) {\\r\\n    assembly {\\r\\n      nodeIndex := sar(8, bitIndex)\\r\\n    }\\r\\n    uint256 node = treeLevel[nodeIndex];\\r\\n    assembly {\\r\\n      toggledNode := iszero(node)\\r\\n      node := xor(node, shl(and(bitIndex, 0xFF), 1))\\r\\n      toggledNode := xor(toggledNode, iszero(node))\\r\\n    }\\r\\n    treeLevel[nodeIndex] = node;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the next initialized tick in tree to the right (gte) of the given tick or `MAX_TICK`\\r\\n  /// @param leafs The words with ticks\\r\\n  /// @param secondLayer The words with info about active leafs\\r\\n  /// @param treeRoot The word with info about active subtrees\\r\\n  /// @param tick The starting tick\\r\\n  /// @return nextTick The next initialized tick or `MAX_TICK`\\r\\n  function getNextTick(\\r\\n    mapping(int16 => uint256) storage leafs,\\r\\n    mapping(int16 => uint256) storage secondLayer,\\r\\n    uint32 treeRoot,\\r\\n    int24 tick\\r\\n  ) internal view returns (int24 nextTick) {\\r\\n    unchecked {\\r\\n      tick++; // start searching from the next tick\\r\\n      int16 nodeIndex;\\r\\n      assembly {\\r\\n        // index in treeRoot\\r\\n        nodeIndex := shr(8, add(sar(8, tick), SECOND_LAYER_OFFSET))\\r\\n      }\\r\\n      bool initialized;\\r\\n      // if subtree has active ticks\\r\\n      if (treeRoot & (1 << uint16(nodeIndex)) != 0) {\\r\\n        // try to find initialized tick in the corresponding leaf of the tree\\r\\n        (nodeIndex, nextTick, initialized) = _nextActiveBitInSameNode(leafs, tick);\\r\\n        if (initialized) return nextTick;\\r\\n\\r\\n        // try to find next initialized leaf in the tree\\r\\n        (nodeIndex, nextTick, initialized) = _nextActiveBitInSameNode(secondLayer, nodeIndex + SECOND_LAYER_OFFSET + 1);\\r\\n      }\\r\\n      if (!initialized) {\\r\\n        // try to find which subtree has an active leaf\\r\\n        // nodeIndex is now the index of the second level node\\r\\n        (nextTick, initialized) = _nextActiveBitInWord(treeRoot, ++nodeIndex);\\r\\n        if (!initialized) return TickMath.MAX_TICK;\\r\\n        nextTick = _firstActiveBitInNode(secondLayer, nextTick); // we found a second level node that has a leaf with an active tick\\r\\n      }\\r\\n      nextTick = _firstActiveBitInNode(leafs, nextTick - SECOND_LAYER_OFFSET);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the index of the next active bit in the same tree node\\r\\n  /// @param treeLevel The level of search tree\\r\\n  /// @param bitIndex The starting bit index\\r\\n  /// @return nodeIndex The index of corresponding node\\r\\n  /// @return nextBitIndex The index of next active bit or last bit in node\\r\\n  /// @return initialized Is nextBitIndex initialized or not\\r\\n  function _nextActiveBitInSameNode(\\r\\n    mapping(int16 => uint256) storage treeLevel,\\r\\n    int24 bitIndex\\r\\n  ) internal view returns (int16 nodeIndex, int24 nextBitIndex, bool initialized) {\\r\\n    assembly {\\r\\n      nodeIndex := sar(8, bitIndex)\\r\\n    }\\r\\n    (nextBitIndex, initialized) = _nextActiveBitInWord(treeLevel[nodeIndex], bitIndex);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns first active bit in given node\\r\\n  /// @param treeLevel The level of search tree\\r\\n  /// @param nodeIndex The index of corresponding node in the level of tree\\r\\n  /// @return bitIndex Number of next active bit or last bit in node\\r\\n  function _firstActiveBitInNode(mapping(int16 => uint256) storage treeLevel, int24 nodeIndex) internal view returns (int24 bitIndex) {\\r\\n    assembly {\\r\\n      bitIndex := shl(8, nodeIndex)\\r\\n    }\\r\\n    (bitIndex, ) = _nextActiveBitInWord(treeLevel[int16(nodeIndex)], bitIndex);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the next initialized bit contained in the word that is to the right or at (gte) of the given bit\\r\\n  /// @param word The word in which to compute the next initialized bit\\r\\n  /// @param bitIndex The end-to-end index of a bit in a layer of tree\\r\\n  /// @return nextBitIndex The next initialized or uninitialized bit up to 256 bits away from the current bit\\r\\n  /// @return initialized Whether the next bit is initialized, as the function only searches within up to 256 bits\\r\\n  function _nextActiveBitInWord(uint256 word, int24 bitIndex) internal pure returns (int24 nextBitIndex, bool initialized) {\\r\\n    uint256 bitIndexInWord;\\r\\n    assembly {\\r\\n      bitIndexInWord := and(bitIndex, 0xFF)\\r\\n    }\\r\\n    unchecked {\\r\\n      uint256 _row = word >> bitIndexInWord; // all the 1s at or to the left of the bitIndexInWord\\r\\n      if (_row == 0) {\\r\\n        nextBitIndex = bitIndex | 255;\\r\\n      } else {\\r\\n        nextBitIndex = bitIndex + int24(uint24(getSingleSignificantBit((0 - _row) & _row))); // least significant bit\\r\\n        initialized = true;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice get position of single 1-bit\\r\\n  /// @dev it is assumed that word contains exactly one 1-bit, otherwise the result will be incorrect\\r\\n  /// @param word The word containing only one 1-bit\\r\\n  function getSingleSignificantBit(uint256 word) internal pure returns (uint8 singleBitPos) {\\r\\n    assembly {\\r\\n      singleBitPos := iszero(and(word, 0x5555555555555555555555555555555555555555555555555555555555555555))\\r\\n      singleBitPos := or(singleBitPos, shl(7, iszero(and(word, 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(6, iszero(and(word, 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(5, iszero(and(word, 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(4, iszero(and(word, 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(3, iszero(and(word, 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF))))\\r\\n      singleBitPos := or(singleBitPos, shl(2, iszero(and(word, 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F))))\\r\\n      singleBitPos := or(singleBitPos, shl(1, iszero(and(word, 0x3333333333333333333333333333333333333333333333333333333333333333))))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /// @notice The Algebra factory contract, which must adhere to the IAlgebraFactory interface\\r\\n  /// @return The contract address\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /// @notice The first of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /// @notice The second of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n  /// @return The max amount of liquidity per tick\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Important security note: when using this data by external contracts, it is necessary to take into account the possibility\\r\\n/// of manipulation (including read-only reentrancy).\\r\\n/// This interface is based on the UniswapV3 interface, credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /// @notice Safely get most important state values of Algebra Integral AMM\\r\\n  /// @dev Several values exposed as a single method to save gas when accessed externally.\\r\\n  /// **Important security note: this method checks reentrancy lock and should be preferred in most cases**.\\r\\n  /// @return sqrtPrice The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return activeLiquidity  The currently in-range liquidity available to the pool\\r\\n  /// @return nextTick The next initialized tick after current global tick\\r\\n  /// @return previousTick The previous initialized tick before (or at) current global tick\\r\\n  function safelyGetStateOfAMM()\\r\\n    external\\r\\n    view\\r\\n    returns (uint160 sqrtPrice, int24 tick, uint16 lastFee, uint8 pluginConfig, uint128 activeLiquidity, int24 nextTick, int24 previousTick);\\r\\n\\r\\n  /// @notice Allows to easily get current reentrancy lock status\\r\\n  /// @dev can be used to prevent read-only reentrancy.\\r\\n  /// This method just returns `globalState.unlocked` value\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function isUnlocked() external view returns (bool unlocked);\\r\\n\\r\\n  // ! IMPORTANT security note: the pool state can be manipulated.\\r\\n  // ! The following methods do not check reentrancy lock themselves.\\r\\n\\r\\n  /// @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n  /// and is exposed as a single method to save gas when accessed externally.\\r\\n  /// @dev **important security note: caller should check `unlocked` flag to prevent read-only reentrancy**\\r\\n  /// @return price The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run\\r\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return communityFee The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function globalState() external view returns (uint160 price, int24 tick, uint16 lastFee, uint8 pluginConfig, uint16 communityFee, bool unlocked);\\r\\n\\r\\n  /// @notice Look up information about a specific tick in the pool\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param tick The tick to look up\\r\\n  /// @return liquidityTotal The total amount of position liquidity that uses the pool either as tick lower or tick upper\\r\\n  /// @return liquidityDelta How much liquidity changes when the pool price crosses the tick\\r\\n  /// @return prevTick The previous tick in tick list\\r\\n  /// @return nextTick The next tick in tick list\\r\\n  /// @return outerFeeGrowth0Token The fee growth on the other side of the tick from the current tick in token0\\r\\n  /// @return outerFeeGrowth1Token The fee growth on the other side of the tick from the current tick in token1\\r\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n  /// a specific position.\\r\\n  function ticks(\\r\\n    int24 tick\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      int24 prevTick,\\r\\n      int24 nextTick,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token\\r\\n    );\\r\\n\\r\\n  /// @notice The timestamp of the last sending of tokens to community vault\\r\\n  /// @return The timestamp truncated to 32 bits\\r\\n  function communityFeeLastTimestamp() external view returns (uint32);\\r\\n\\r\\n  /// @notice The amounts of token0 and token1 that will be sent to the vault\\r\\n  /// @dev Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\\r\\n  /// @return communityFeePending0 The amount of token0 that will be sent to the vault\\r\\n  /// @return communityFeePending1 The amount of token1 that will be sent to the vault\\r\\n  function getCommunityFeePending() external view returns (uint128 communityFeePending0, uint128 communityFeePending1);\\r\\n\\r\\n  /// @notice Returns the address of currently used plugin\\r\\n  /// @dev The plugin is subject to change\\r\\n  /// @return pluginAddress The address of currently used plugin\\r\\n  function plugin() external view returns (address pluginAddress);\\r\\n\\r\\n  /// @notice The contract to which community fees are transferred\\r\\n  /// @return communityVaultAddress The communityVault address\\r\\n  function communityVault() external view returns (address communityVaultAddress);\\r\\n\\r\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickTree for more information\\r\\n  /// @param wordPosition Index of 256-bits word with ticks\\r\\n  /// @return The 256-bits word with packed ticks info\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token0\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token1\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The current pool fee value\\r\\n  /// @dev In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee.\\r\\n  /// If the plugin implements complex fee logic, this method may return an incorrect value or revert.\\r\\n  /// In this case, see the plugin implementation and related documentation.\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return currentFee The current pool fee value in hundredths of a bip, i.e. 1e-6\\r\\n  function fee() external view returns (uint16 currentFee);\\r\\n\\r\\n  /// @notice The tracked token0 and token1 reserves of pool\\r\\n  /// @dev If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee.\\r\\n  /// If the balance exceeds uint128, the excess will be sent to the communityVault.\\r\\n  /// @return reserve0 The last known reserve of token0\\r\\n  /// @return reserve1 The last known reserve of token1\\r\\n  function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\r\\n\\r\\n  /// @notice Returns the information about a position by the position's key\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param key The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes\\r\\n  /// @return liquidity The amount of liquidity in the position\\r\\n  /// @return innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke\\r\\n  /// @return fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n  function positions(\\r\\n    bytes32 key\\r\\n  ) external view returns (uint256 liquidity, uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token, uint128 fees0, uint128 fees1);\\r\\n\\r\\n  /// @notice The currently in range liquidity available to the pool\\r\\n  /// @dev This value has no relationship to the total liquidity across all ticks.\\r\\n  /// Returned value cannot exceed type(uint128).max\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The current in range liquidity\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /// @notice The current tick spacing\\r\\n  /// @dev Ticks can only be initialized by new mints at multiples of this value\\r\\n  /// e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n  /// However, tickspacing can be changed after the ticks have been initialized.\\r\\n  /// This value is an int24 to avoid casting even though it is always positive.\\r\\n  /// @return The current tick spacing\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /// @notice The previous initialized tick before (or at) current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The previous initialized tick\\r\\n  function prevTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The next initialized tick after current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The next initialized tick\\r\\n  function nextTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The root of tick search tree\\r\\n  /// @dev Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The root of tick search tree as bitmap\\r\\n  function tickTreeRoot() external view returns (uint32);\\r\\n\\r\\n  /// @notice The second layer of tick search tree\\r\\n  /// @dev Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The node of tick search tree second layer\\r\\n  function tickTreeSecondLayer(int16) external view returns (uint256);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n  /// @dev Mint/Burn/Swaps cannot be emitted by the pool before Initialize\\r\\n  /// @param price The initial sqrt price of the pool, as a Q64.96\\r\\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /// @notice Emitted when liquidity is minted for a given position\\r\\n  /// @param sender The address that minted the liquidity\\r\\n  /// @param owner The owner of the position and recipient of any minted liquidity\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity minted to the position range\\r\\n  /// @param amount0 How much token0 was required for the minted liquidity\\r\\n  /// @param amount1 How much token1 was required for the minted liquidity\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when fees are collected by the owner of a position\\r\\n  /// @param owner The owner of the position for which fees are collected\\r\\n  /// @param recipient The address that received fees\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param amount0 The amount of token0 fees collected\\r\\n  /// @param amount1 The amount of token1 fees collected\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Emitted when a position's liquidity is removed\\r\\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n  /// @param owner The owner of the position for which liquidity is removed\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity to remove\\r\\n  /// @param amount0 The amount of token0 withdrawn\\r\\n  /// @param amount1 The amount of token1 withdrawn\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Emitted by the pool for any swaps between token0 and token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the output of the swap\\r\\n  /// @param amount0 The delta of the token0 balance of the pool\\r\\n  /// @param amount1 The delta of the token1 balance of the pool\\r\\n  /// @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n  /// @param liquidity The liquidity of the pool after the swap\\r\\n  /// @param tick The log base 1.0001 of price of the pool after the swap\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /// @notice Emitted by the pool for any flashes of token0/token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the tokens from flash\\r\\n  /// @param amount0 The amount of token0 that was flashed\\r\\n  /// @param amount1 The amount of token1 that was flashed\\r\\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /// @notice Emitted when the community fee is changed by the pool\\r\\n  /// @param communityFeeNew The updated value of the community fee in thousandths (1e-3)\\r\\n  event CommunityFee(uint16 communityFeeNew);\\r\\n\\r\\n  /// @notice Emitted when the tick spacing changes\\r\\n  /// @param newTickSpacing The updated value of the new tick spacing\\r\\n  event TickSpacing(int24 newTickSpacing);\\r\\n\\r\\n  /// @notice Emitted when the plugin address changes\\r\\n  /// @param newPluginAddress New plugin address\\r\\n  event Plugin(address newPluginAddress);\\r\\n\\r\\n  /// @notice Emitted when the plugin config changes\\r\\n  /// @param newPluginConfig New plugin config\\r\\n  event PluginConfig(uint8 newPluginConfig);\\r\\n\\r\\n  /// @notice Emitted when the fee changes inside the pool\\r\\n  /// @param fee The current fee in hundredths of a bip, i.e. 1e-6\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  event CommunityVault(address newCommunityVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /// @notice Sets the initial price for the pool\\r\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n  /// @dev Initialization should be done in one transaction with pool creation to avoid front-running\\r\\n  /// @param initialPrice The initial sqrt price of the pool as a Q64.96\\r\\n  function initialize(uint160 initialPrice) external;\\r\\n\\r\\n  /// @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraMintCallback#algebraMintCallback\\r\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n  /// on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address for which the liquidity will be created\\r\\n  /// @param bottomTick The lower tick of the position in which to add liquidity\\r\\n  /// @param topTick The upper tick of the position in which to add liquidity\\r\\n  /// @param liquidityDesired The desired amount of liquidity to mint\\r\\n  /// @param data Any data that should be passed through to the callback\\r\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return liquidityActual The actual minted amount of liquidity\\r\\n  function mint(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 liquidityDesired,\\r\\n    bytes calldata data\\r\\n  ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\\r\\n\\r\\n  /// @notice Collects tokens owed to a position\\r\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n  /// @param recipient The address which should receive the fees collected\\r\\n  /// @param bottomTick The lower tick of the position for which to collect fees\\r\\n  /// @param topTick The upper tick of the position for which to collect fees\\r\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n  /// @return amount0 The amount of fees collected in token0\\r\\n  /// @return amount1 The amount of fees collected in token1\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n  /// @dev Fees must be collected separately via a call to #collect\\r\\n  /// @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n  /// @param topTick The upper tick of the position for which to burn liquidity\\r\\n  /// @param amount How much liquidity to burn\\r\\n  /// @param data Any data that should be passed through to the plugin\\r\\n  /// @return amount0 The amount of token0 sent to the recipient\\r\\n  /// @return amount1 The amount of token1 sent to the recipient\\r\\n  function burn(int24 bottomTick, int24 topTick, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0 with prepayment\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// caller must send tokens in callback before swap calculation\\r\\n  /// the actually sent amount of tokens is used for further calculations\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountToSell The amount of the swap, only positive (exact input) amount allowed\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swapWithPaymentInAdvance(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountToSell,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback#algebraFlashCallback\\r\\n  /// @dev All excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee.\\r\\n  /// If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\\r\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\r\\n  /// @param amount0 The amount of token0 to send\\r\\n  /// @param amount1 The amount of token1 to send\\r\\n  /// @param data Any data to be passed through to the callback\\r\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissioned pool actions\\r\\n/// @notice Contains pool methods that may only be called by permissioned addresses\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /// @notice Set the community's % share of the fees. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newCommunityFee The new community fee percent in thousandths (1e-3)\\r\\n  function setCommunityFee(uint16 newCommunityFee) external;\\r\\n\\r\\n  /// @notice Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newTickSpacing The new tick spacing value\\r\\n  function setTickSpacing(int24 newTickSpacing) external;\\r\\n\\r\\n  /// @notice Set the new plugin address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newPluginAddress The new plugin address\\r\\n  function setPlugin(address newPluginAddress) external;\\r\\n\\r\\n  /// @notice Set new plugin config. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newConfig In the new configuration of the plugin,\\r\\n  /// each bit of which is responsible for a particular hook.\\r\\n  function setPluginConfig(uint8 newConfig) external;\\r\\n\\r\\n  /// @notice Set new community fee vault address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @dev Community fee vault receives collected community fees.\\r\\n  /// **accumulated but not yet sent to the vault community fees once will be sent to the `newCommunityVault` address**\\r\\n  /// @param newCommunityVault The address of new community fee vault\\r\\n  function setCommunityVault(address newCommunityVault) external;\\r\\n\\r\\n  /// @notice Set new pool fee. Can be called by owner if dynamic fee is disabled.\\r\\n  /// Called by the plugin if dynamic fee is enabled\\r\\n  /// @param newFee The new fee value\\r\\n  function setFee(uint16 newFee) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"@cryptoalgebra/integral-core/contracts/interfaces/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\nimport './pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title The interface for a Algebra Pool\\r\\n/// @dev The pool interface is broken up into many smaller pieces.\\r\\n/// This interface includes custom error definitions and cannot be used in older versions of Solidity.\\r\\n/// For older versions of Solidity use #IAlgebraPoolLegacy\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents,\\r\\n  IAlgebraPoolErrors\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"}}}","address":"0x503C9244896C25f9cC6f673f379E796EeF64d6F2","bytecode":"0x608060405234801561001057600080fd5b50610f15806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063351fb47814610046578063c5493f771461006f578063ec92d7fa14610082575b600080fd5b610059610054366004610b41565b6100a2565b6040516100669190610b7e565b60405180910390f35b61005961007d366004610c04565b61029d565b610095610090366004610c5a565b6104a1565b6040516100669190610c86565b6040517fc677e3e0000000000000000000000000000000000000000000000000000000008152600182900b600482015260609060009073ffffffffffffffffffffffffffffffffffffffff85169063c677e3e090602401602060405180830381865afa158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a9190610cdf565b90506000805b610100811015610164576001811b83161561015c576001909101905b600101610140565b508067ffffffffffffffff81111561017e5761017e610cf8565b6040519080825280602002602001820160405280156101e757816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161019c5790505b50925060005b610100811015610294576001811b83161561028c57600885901b60020b8101600080610219898461086d565b505091506fffffffffffffffffffffffffffffffff16915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508786600190039650868151811061027d5761027d610d27565b60200260200101819052505050505b6001016101ed565b50505092915050565b60608360008467ffffffffffffffff8111156102bb576102bb610cf8565b6040519080825280602002602001820160405280156102e4578160200160208202803683370190505b506040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015290935083915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8c169063f30dba939060240160c060405180830381865afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190610d56565b505093509350935093508060020b8260020b03610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964207374617274696e675469636b000000000000000000000000604482015260640160405180910390fd5b60405160005b8a81101561048e578782528460208301528560408301528160208a0160208302015260608201915060008a61043e5784610440565b835b90508860020b8160020b0361045b57600182018a525061048e565b8098506104688e8a61086d565b6fffffffffffffffffffffffffffffffff90931699509097509550935050600101610409565b5060405250949998505050505050505050565b6104a9610abb565b60008373ffffffffffffffffffffffffffffffffffffffff1663578b9a366040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610dc5565b905060006008610532610d8a600287900b831d610e21565b60020b901d9050600080600161ffff84161b841663ffffffff16156106245760006105648860088960020b901d6108e4565b90506105708188610924565b90935091508161062257600061058f610d8a60028a900b60081d610e21565b61059a906001610e21565b905060006105af8a60088460010b901d610a7b565b90506000806105c1838560010b610924565b91509150801561060f57600060086105db610d8a85610e68565b60020b901b90506105f78d6105f2610d8a86610e68565b6108e4565b95506106038682610924565b909850965061061d9050565b8761061981610ea9565b9850505b505050505b505b806106d857600061063e8563ffffffff168560010b610924565b509050600061064d8983610a7b565b90506000806106638360088660020b901b610924565b9150915080156106a757600061067f8c6105f2610d8a86610e68565b905061069d816008610693610d8a87610e68565b60020b901b610924565b5096506106d39050565b6106d07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610eca565b95505b505050505b8560020b8260020b036107a95760008060006106f48a8a61086d565b93505092506fffffffffffffffffffffffffffffffff16925060405180606001604052808a60020b815260200183600f0b8152602001846fffffffffffffffffffffffffffffffff168152508860006002811061075357610753610d27565b60200201526107628a8261086d565b50506040805160608101825260029490940b8452600f9190910b6020808501919091526fffffffffffffffffffffffffffffffff9290921690830152880152506108639050565b60008060006107b88a8661086d565b50925092506fffffffffffffffffffffffffffffffff16925060405180606001604052808660020b815260200183600f0b8152602001846fffffffffffffffffffffffffffffffff168152508860016002811061081757610817610d27565b60200201526108268a8261086d565b50506040805160608101825260029490940b8452600f9190910b60208401526fffffffffffffffffffffffffffffffff9190911690820152875250505b5050505092915050565b60008060008060405160605160805160a0517ff30dba93000000000000000000000000000000000000000000000000000000006000528860045260c06000602460008d5afa5060005197506020519650604051955060605194508360405282606052816080528060a0525050505092959194509250565b60007fc677e3e000000000000000000000000000000000000000000000000000000000600052816004526020600060246000865afa505060005192915050565b60008060ff831684811c808303610940578460ff179350610a72565b7f555555555555555555555555555555555555555555555555555555555555555560008290038216908116156fffffffffffffffffffffffffffffffff82161560071b1777ffffffffffffffff0000000000000000ffffffffffffffff82161560061b177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff82161560051b177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff82161560041b177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff82161560031b177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f82161560021b177f33333333333333333333333333333333333333333333333333333333333333339091161560011b1760ff1685019350600192505b50509250929050565b60007fd861903700000000000000000000000000000000000000000000000000000000600052816004526020600060246000865afa505060005192915050565b60405180604001604052806002905b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610aca5790505090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b3c57600080fd5b919050565b60008060408385031215610b5457600080fd5b610b5d83610b18565b915060208301358060010b8114610b7357600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610be6578351805160020b8452602080820151600f0b908501526040908101516fffffffffffffffffffffffffffffffff169084015260608301938501939250600101610b9a565b50909695505050505050565b8060020b8114610c0157600080fd5b50565b60008060008060808587031215610c1a57600080fd5b610c2385610b18565b93506020850135610c3381610bf2565b92506040850135915060608501358015158114610c4f57600080fd5b939692955090935050565b60008060408385031215610c6d57600080fd5b610c7683610b18565b91506020830135610b7381610bf2565b60c08101818360005b6002811015610294578151805160020b8452602080820151600f0b908501526040908101516fffffffffffffffffffffffffffffffff169084015260608301925060209190910190600101610c8f565b600060208284031215610cf157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008060008060008060c08789031215610d6f57600080fd5b86519550602087015180600f0b8114610d8757600080fd5b6040880151909550610d9881610bf2565b6060880151909450610da981610bf2565b809350506080870151915060a087015190509295509295509295565b600060208284031215610dd757600080fd5b815163ffffffff81168114610deb57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600281810b9083900b01627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082121715610e6257610e62610df2565b92915050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff82131715610e6257610e62610df2565b600061ffff808316818103610ec057610ec0610df2565b6001019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103610eff57610eff610df2565b6000039291505056fea164736f6c6343000814000a","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063351fb47814610046578063c5493f771461006f578063ec92d7fa14610082575b600080fd5b610059610054366004610b41565b6100a2565b6040516100669190610b7e565b60405180910390f35b61005961007d366004610c04565b61029d565b610095610090366004610c5a565b6104a1565b6040516100669190610c86565b6040517fc677e3e0000000000000000000000000000000000000000000000000000000008152600182900b600482015260609060009073ffffffffffffffffffffffffffffffffffffffff85169063c677e3e090602401602060405180830381865afa158015610116573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013a9190610cdf565b90506000805b610100811015610164576001811b83161561015c576001909101905b600101610140565b508067ffffffffffffffff81111561017e5761017e610cf8565b6040519080825280602002602001820160405280156101e757816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90920191018161019c5790505b50925060005b610100811015610294576001811b83161561028c57600885901b60020b8101600080610219898461086d565b505091506fffffffffffffffffffffffffffffffff16915060405180606001604052808460020b815260200182600f0b8152602001836fffffffffffffffffffffffffffffffff168152508786600190039650868151811061027d5761027d610d27565b60200260200101819052505050505b6001016101ed565b50505092915050565b60608360008467ffffffffffffffff8111156102bb576102bb610cf8565b6040519080825280602002602001820160405280156102e4578160200160208202803683370190505b506040517ff30dba93000000000000000000000000000000000000000000000000000000008152600284900b600482015290935083915060009081908190819073ffffffffffffffffffffffffffffffffffffffff8c169063f30dba939060240160c060405180830381865afa158015610362573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103869190610d56565b505093509350935093508060020b8260020b03610403576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e76616c6964207374617274696e675469636b000000000000000000000000604482015260640160405180910390fd5b60405160005b8a81101561048e578782528460208301528560408301528160208a0160208302015260608201915060008a61043e5784610440565b835b90508860020b8160020b0361045b57600182018a525061048e565b8098506104688e8a61086d565b6fffffffffffffffffffffffffffffffff90931699509097509550935050600101610409565b5060405250949998505050505050505050565b6104a9610abb565b60008373ffffffffffffffffffffffffffffffffffffffff1663578b9a366040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104f6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051a9190610dc5565b905060006008610532610d8a600287900b831d610e21565b60020b901d9050600080600161ffff84161b841663ffffffff16156106245760006105648860088960020b901d6108e4565b90506105708188610924565b90935091508161062257600061058f610d8a60028a900b60081d610e21565b61059a906001610e21565b905060006105af8a60088460010b901d610a7b565b90506000806105c1838560010b610924565b91509150801561060f57600060086105db610d8a85610e68565b60020b901b90506105f78d6105f2610d8a86610e68565b6108e4565b95506106038682610924565b909850965061061d9050565b8761061981610ea9565b9850505b505050505b505b806106d857600061063e8563ffffffff168560010b610924565b509050600061064d8983610a7b565b90506000806106638360088660020b901b610924565b9150915080156106a757600061067f8c6105f2610d8a86610e68565b905061069d816008610693610d8a87610e68565b60020b901b610924565b5096506106d39050565b6106d07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff27618610eca565b95505b505050505b8560020b8260020b036107a95760008060006106f48a8a61086d565b93505092506fffffffffffffffffffffffffffffffff16925060405180606001604052808a60020b815260200183600f0b8152602001846fffffffffffffffffffffffffffffffff168152508860006002811061075357610753610d27565b60200201526107628a8261086d565b50506040805160608101825260029490940b8452600f9190910b6020808501919091526fffffffffffffffffffffffffffffffff9290921690830152880152506108639050565b60008060006107b88a8661086d565b50925092506fffffffffffffffffffffffffffffffff16925060405180606001604052808660020b815260200183600f0b8152602001846fffffffffffffffffffffffffffffffff168152508860016002811061081757610817610d27565b60200201526108268a8261086d565b50506040805160608101825260029490940b8452600f9190910b60208401526fffffffffffffffffffffffffffffffff9190911690820152875250505b5050505092915050565b60008060008060405160605160805160a0517ff30dba93000000000000000000000000000000000000000000000000000000006000528860045260c06000602460008d5afa5060005197506020519650604051955060605194508360405282606052816080528060a0525050505092959194509250565b60007fc677e3e000000000000000000000000000000000000000000000000000000000600052816004526020600060246000865afa505060005192915050565b60008060ff831684811c808303610940578460ff179350610a72565b7f555555555555555555555555555555555555555555555555555555555555555560008290038216908116156fffffffffffffffffffffffffffffffff82161560071b1777ffffffffffffffff0000000000000000ffffffffffffffff82161560061b177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff82161560051b177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff82161560041b177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff82161560031b177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f82161560021b177f33333333333333333333333333333333333333333333333333333333333333339091161560011b1760ff1685019350600192505b50509250929050565b60007fd861903700000000000000000000000000000000000000000000000000000000600052816004526020600060246000865afa505060005192915050565b60405180604001604052806002905b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff909201910181610aca5790505090565b803573ffffffffffffffffffffffffffffffffffffffff81168114610b3c57600080fd5b919050565b60008060408385031215610b5457600080fd5b610b5d83610b18565b915060208301358060010b8114610b7357600080fd5b809150509250929050565b6020808252825182820181905260009190848201906040850190845b81811015610be6578351805160020b8452602080820151600f0b908501526040908101516fffffffffffffffffffffffffffffffff169084015260608301938501939250600101610b9a565b50909695505050505050565b8060020b8114610c0157600080fd5b50565b60008060008060808587031215610c1a57600080fd5b610c2385610b18565b93506020850135610c3381610bf2565b92506040850135915060608501358015158114610c4f57600080fd5b939692955090935050565b60008060408385031215610c6d57600080fd5b610c7683610b18565b91506020830135610b7381610bf2565b60c08101818360005b6002811015610294578151805160020b8452602080820151600f0b908501526040908101516fffffffffffffffffffffffffffffffff169084015260608301925060209190910190600101610c8f565b600060208284031215610cf157600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008060008060008060c08789031215610d6f57600080fd5b86519550602087015180600f0b8114610d8757600080fd5b6040880151909550610d9881610bf2565b6060880151909450610da981610bf2565b809350506080870151915060a087015190509295509295509295565b600060208284031215610dd757600080fd5b815163ffffffff81168114610deb57600080fd5b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600281810b9083900b01627fffff81137fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80000082121715610e6257610e62610df2565b92915050565b600282810b9082900b037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008112627fffff82131715610e6257610e62610df2565b600061ffff808316818103610ec057610ec0610df2565b6001019392505050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103610eff57610eff610df2565b6000039291505056fea164736f6c6343000814000a","abi":[{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"int24","name":"targetTick","type":"int24"}],"name":"getClosestActiveTicks","outputs":[{"components":[{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint128","name":"liquidityGross","type":"uint128"}],"internalType":"struct ITickLens.PopulatedTick[2]","name":"populatedTicks","type":"tuple[2]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"int24","name":"startingTick","type":"int24"},{"internalType":"uint256","name":"amount","type":"uint256"},{"internalType":"bool","name":"upperDirection","type":"bool"}],"name":"getNextActiveTicks","outputs":[{"components":[{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint128","name":"liquidityGross","type":"uint128"}],"internalType":"struct ITickLens.PopulatedTick[]","name":"populatedTicks","type":"tuple[]"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"},{"internalType":"int16","name":"tickTableIndex","type":"int16"}],"name":"getPopulatedTicksInWord","outputs":[{"components":[{"internalType":"int24","name":"tick","type":"int24"},{"internalType":"int128","name":"liquidityNet","type":"int128"},{"internalType":"uint128","name":"liquidityGross","type":"uint128"}],"internalType":"struct ITickLens.PopulatedTick[]","name":"populatedTicks","type":"tuple[]"}],"stateMutability":"view","type":"function"}]}