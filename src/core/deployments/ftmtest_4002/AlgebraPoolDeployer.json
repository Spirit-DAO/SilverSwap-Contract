{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/AlgebraPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\npragma abicoder v1;\\r\\n\\r\\nimport './interfaces/IAlgebraPoolDeployer.sol';\\r\\n\\r\\nimport './AlgebraPool.sol';\\r\\n\\r\\n/// @title Algebra pool deployer\\r\\n/// @notice Is used by AlgebraFactory to deploy pools\\r\\n/// @dev Version: Algebra Integral 1.0\\r\\ncontract AlgebraPoolDeployer is IAlgebraPoolDeployer {\\r\\n  /// @dev two storage slots for dense cache packing\\r\\n  bytes32 private cache0;\\r\\n  bytes32 private cache1;\\r\\n\\r\\n  address private immutable factory;\\r\\n\\r\\n  constructor(address _factory) {\\r\\n    require(_factory != address(0));\\r\\n    factory = _factory;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolDeployer\\r\\n  function getDeployParameters() external view override returns (address _plugin, address _factory, address _token0, address _token1) {\\r\\n    (_plugin, _token0, _token1) = _readFromCache();\\r\\n    _factory = factory;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolDeployer\\r\\n  function deploy(address plugin, address token0, address token1) external override returns (address pool) {\\r\\n    require(msg.sender == factory);\\r\\n\\r\\n    _writeToCache(plugin, token0, token1);\\r\\n    pool = address(new AlgebraPool{salt: keccak256(abi.encode(token0, token1))}());\\r\\n    (cache0, cache1) = (bytes32(0), bytes32(0));\\r\\n  }\\r\\n\\r\\n  /// @notice densely packs three addresses into two storage slots\\r\\n  function _writeToCache(address plugin, address token0, address token1) private {\\r\\n    assembly {\\r\\n      // cache0 = [plugin, token0[0, 96]], cache1 = [token0[0, 64], 0-s x32 , token1]\\r\\n      token0 := and(token0, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF) // clean higher bits, just in case\\r\\n      sstore(cache0.slot, or(shr(64, token0), shl(96, plugin)))\\r\\n      sstore(cache1.slot, or(shl(160, token0), and(token1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)))\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice reads three densely packed addresses from two storage slots\\r\\n  function _readFromCache() private view returns (address plugin, address token0, address token1) {\\r\\n    (bytes32 _cache0, bytes32 _cache1) = (cache0, cache1);\\r\\n    assembly {\\r\\n      plugin := shr(96, _cache0)\\r\\n      token0 := or(shl(64, and(_cache0, 0xFFFFFFFFFFFFFFFFFFFFFFFF)), shr(160, _cache1))\\r\\n      token1 := and(_cache1, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF)\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/IAlgebraPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title An interface for a contract that is capable of deploying Algebra Pools\\r\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\r\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\r\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain.\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolDeployer {\\r\\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\r\\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\\r\\n  /// @return plugin The pool associated plugin (if any)\\r\\n  /// @return factory The Algebra Factory address\\r\\n  /// @return token0 The first token of the pool by address sort order\\r\\n  /// @return token1 The second token of the pool by address sort order\\r\\n  function getDeployParameters() external view returns (address plugin, address factory, address token0, address token1);\\r\\n\\r\\n  /// @dev Deploys a pool with the given parameters by transiently setting the parameters in cache.\\r\\n  /// @param plugin The pool associated plugin (if any)\\r\\n  /// @param token0 The first token of the pool by address sort order\\r\\n  /// @param token1 The second token of the pool by address sort order\\r\\n  /// @return pool The deployed pool's address\\r\\n  function deploy(address plugin, address token0, address token1) external returns (address pool);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/callback/IAlgebraSwapCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#swap\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#swap must implement this interface\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraSwapCallback {\\r\\n  /// @notice Called to `msg.sender` after executing a swap via IAlgebraPool#swap.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the swap.\\r\\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// amount0Delta and amount1Delta can both be 0 if no tokens were swapped.\\r\\n  /// @param amount0Delta The amount of token0 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token0 to the pool.\\r\\n  /// @param amount1Delta The amount of token1 that was sent (negative) or must be received (positive) by the pool by\\r\\n  /// the end of the swap. If positive, the callback must send that amount of token1 to the pool.\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#swap call\\r\\n  function algebraSwapCallback(int256 amount0Delta, int256 amount1Delta, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/callback/IAlgebraMintCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#mint\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#mint must implement this interface\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraMintCallback {\\r\\n  /// @notice Called to `msg.sender` after minting liquidity to a position from IAlgebraPool#mint.\\r\\n  /// @dev In the implementation you must pay the pool tokens owed for the minted liquidity.\\r\\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// @param amount0Owed The amount of token0 due to the pool for the minted liquidity\\r\\n  /// @param amount1Owed The amount of token1 due to the pool for the minted liquidity\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#mint call\\r\\n  function algebraMintCallback(uint256 amount0Owed, uint256 amount1Owed, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/plugin/IAlgebraDynamicFeePlugin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra plugin with dynamic fee logic\\r\\n/// @dev A plugin with a dynamic fee must implement this interface so that the current fee can be known through the pool\\r\\n/// If the dynamic fee logic does not allow the fee to be calculated without additional data, the method should revert with the appropriate message\\r\\ninterface IAlgebraDynamicFeePlugin {\\r\\n  /// @notice Returns fee from plugin\\r\\n  /// @return fee The pool fee value in hundredths of a bip, i.e. 1e-6\\r\\n  function getCurrentFee() external view returns (uint16 fee);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/callback/IAlgebraFlashCallback.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Callback for IAlgebraPoolActions#flash\\r\\n/// @notice Any contract that calls IAlgebraPoolActions#flash must implement this interface\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraFlashCallback {\\r\\n  /// @notice Called to `msg.sender` after transferring to the recipient from IAlgebraPool#flash.\\r\\n  /// @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\\r\\n  /// The caller of this method _must_ be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\\r\\n  /// @param fee0 The fee amount in token0 due to the pool by the end of the flash\\r\\n  /// @param fee1 The fee amount in token1 due to the pool by the end of the flash\\r\\n  /// @param data Any data passed through by the caller via the IAlgebraPoolActions#flash call\\r\\n  function algebraFlashCallback(uint256 fee0, uint256 fee1, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolImmutables.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that never changes\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolImmutables {\\r\\n  /// @notice The Algebra factory contract, which must adhere to the IAlgebraFactory interface\\r\\n  /// @return The contract address\\r\\n  function factory() external view returns (address);\\r\\n\\r\\n  /// @notice The first of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /// @notice The second of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /// @notice The maximum amount of position liquidity that can use any tick in the range\\r\\n  /// @dev This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and\\r\\n  /// also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool\\r\\n  /// @return The max amount of liquidity per tick\\r\\n  function maxLiquidityPerTick() external view returns (uint128);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolPermissionedActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissioned pool actions\\r\\n/// @notice Contains pool methods that may only be called by permissioned addresses\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolPermissionedActions {\\r\\n  /// @notice Set the community's % share of the fees. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newCommunityFee The new community fee percent in thousandths (1e-3)\\r\\n  function setCommunityFee(uint16 newCommunityFee) external;\\r\\n\\r\\n  /// @notice Set the new tick spacing values. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newTickSpacing The new tick spacing value\\r\\n  function setTickSpacing(int24 newTickSpacing) external;\\r\\n\\r\\n  /// @notice Set the new plugin address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newPluginAddress The new plugin address\\r\\n  function setPlugin(address newPluginAddress) external;\\r\\n\\r\\n  /// @notice Set new plugin config. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @param newConfig In the new configuration of the plugin,\\r\\n  /// each bit of which is responsible for a particular hook.\\r\\n  function setPluginConfig(uint8 newConfig) external;\\r\\n\\r\\n  /// @notice Set new community fee vault address. Only factory owner or POOLS_ADMINISTRATOR_ROLE role\\r\\n  /// @dev Community fee vault receives collected community fees.\\r\\n  /// **accumulated but not yet sent to the vault community fees once will be sent to the `newCommunityVault` address**\\r\\n  /// @param newCommunityVault The address of new community fee vault\\r\\n  function setCommunityVault(address newCommunityVault) external;\\r\\n\\r\\n  /// @notice Set new pool fee. Can be called by owner if dynamic fee is disabled.\\r\\n  /// Called by the plugin if dynamic fee is enabled\\r\\n  /// @param newFee The new fee value\\r\\n  function setFee(uint16 newFee) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Pool state that can change\\r\\n/// @dev Important security note: when using this data by external contracts, it is necessary to take into account the possibility\\r\\n/// of manipulation (including read-only reentrancy).\\r\\n/// This interface is based on the UniswapV3 interface, credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolState {\\r\\n  /// @notice Safely get most important state values of Algebra Integral AMM\\r\\n  /// @dev Several values exposed as a single method to save gas when accessed externally.\\r\\n  /// **Important security note: this method checks reentrancy lock and should be preferred in most cases**.\\r\\n  /// @return sqrtPrice The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current global tick of the pool. May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return activeLiquidity  The currently in-range liquidity available to the pool\\r\\n  /// @return nextTick The next initialized tick after current global tick\\r\\n  /// @return previousTick The previous initialized tick before (or at) current global tick\\r\\n  function safelyGetStateOfAMM()\\r\\n    external\\r\\n    view\\r\\n    returns (uint160 sqrtPrice, int24 tick, uint16 lastFee, uint8 pluginConfig, uint128 activeLiquidity, int24 nextTick, int24 previousTick);\\r\\n\\r\\n  /// @notice Allows to easily get current reentrancy lock status\\r\\n  /// @dev can be used to prevent read-only reentrancy.\\r\\n  /// This method just returns `globalState.unlocked` value\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function isUnlocked() external view returns (bool unlocked);\\r\\n\\r\\n  // ! IMPORTANT security note: the pool state can be manipulated.\\r\\n  // ! The following methods do not check reentrancy lock themselves.\\r\\n\\r\\n  /// @notice The globalState structure in the pool stores many values but requires only one slot\\r\\n  /// and is exposed as a single method to save gas when accessed externally.\\r\\n  /// @dev **important security note: caller should check `unlocked` flag to prevent read-only reentrancy**\\r\\n  /// @return price The current price of the pool as a sqrt(dToken1/dToken0) Q64.96 value\\r\\n  /// @return tick The current tick of the pool, i.e. according to the last tick transition that was run\\r\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @return lastFee The current (last known) pool fee value in hundredths of a bip, i.e. 1e-6 (so '100' is '0.01%'). May be obsolete if using dynamic fee plugin\\r\\n  /// @return pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @return communityFee The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\\r\\n  /// @return unlocked Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  function globalState() external view returns (uint160 price, int24 tick, uint16 lastFee, uint8 pluginConfig, uint16 communityFee, bool unlocked);\\r\\n\\r\\n  /// @notice Look up information about a specific tick in the pool\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param tick The tick to look up\\r\\n  /// @return liquidityTotal The total amount of position liquidity that uses the pool either as tick lower or tick upper\\r\\n  /// @return liquidityDelta How much liquidity changes when the pool price crosses the tick\\r\\n  /// @return prevTick The previous tick in tick list\\r\\n  /// @return nextTick The next tick in tick list\\r\\n  /// @return outerFeeGrowth0Token The fee growth on the other side of the tick from the current tick in token0\\r\\n  /// @return outerFeeGrowth1Token The fee growth on the other side of the tick from the current tick in token1\\r\\n  /// In addition, these values are only relative and must be used only in comparison to previous snapshots for\\r\\n  /// a specific position.\\r\\n  function ticks(\\r\\n    int24 tick\\r\\n  )\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint256 liquidityTotal,\\r\\n      int128 liquidityDelta,\\r\\n      int24 prevTick,\\r\\n      int24 nextTick,\\r\\n      uint256 outerFeeGrowth0Token,\\r\\n      uint256 outerFeeGrowth1Token\\r\\n    );\\r\\n\\r\\n  /// @notice The timestamp of the last sending of tokens to community vault\\r\\n  /// @return The timestamp truncated to 32 bits\\r\\n  function communityFeeLastTimestamp() external view returns (uint32);\\r\\n\\r\\n  /// @notice The amounts of token0 and token1 that will be sent to the vault\\r\\n  /// @dev Will be sent COMMUNITY_FEE_TRANSFER_FREQUENCY after communityFeeLastTimestamp\\r\\n  /// @return communityFeePending0 The amount of token0 that will be sent to the vault\\r\\n  /// @return communityFeePending1 The amount of token1 that will be sent to the vault\\r\\n  function getCommunityFeePending() external view returns (uint128 communityFeePending0, uint128 communityFeePending1);\\r\\n\\r\\n  /// @notice Returns the address of currently used plugin\\r\\n  /// @dev The plugin is subject to change\\r\\n  /// @return pluginAddress The address of currently used plugin\\r\\n  function plugin() external view returns (address pluginAddress);\\r\\n\\r\\n  /// @notice The contract to which community fees are transferred\\r\\n  /// @return communityVaultAddress The communityVault address\\r\\n  function communityVault() external view returns (address communityVaultAddress);\\r\\n\\r\\n  /// @notice Returns 256 packed tick initialized boolean values. See TickTree for more information\\r\\n  /// @param wordPosition Index of 256-bits word with ticks\\r\\n  /// @return The 256-bits word with packed ticks info\\r\\n  function tickTable(int16 wordPosition) external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token0\\r\\n  function totalFeeGrowth0Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool\\r\\n  /// @dev This value can overflow the uint256\\r\\n  /// @return The fee growth accumulator for token1\\r\\n  function totalFeeGrowth1Token() external view returns (uint256);\\r\\n\\r\\n  /// @notice The current pool fee value\\r\\n  /// @dev In case dynamic fee is enabled in the pool, this method will call the plugin to get the current fee.\\r\\n  /// If the plugin implements complex fee logic, this method may return an incorrect value or revert.\\r\\n  /// In this case, see the plugin implementation and related documentation.\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return currentFee The current pool fee value in hundredths of a bip, i.e. 1e-6\\r\\n  function fee() external view returns (uint16 currentFee);\\r\\n\\r\\n  /// @notice The tracked token0 and token1 reserves of pool\\r\\n  /// @dev If at any time the real balance is larger, the excess will be transferred to liquidity providers as additional fee.\\r\\n  /// If the balance exceeds uint128, the excess will be sent to the communityVault.\\r\\n  /// @return reserve0 The last known reserve of token0\\r\\n  /// @return reserve1 The last known reserve of token1\\r\\n  function getReserves() external view returns (uint128 reserve0, uint128 reserve1);\\r\\n\\r\\n  /// @notice Returns the information about a position by the position's key\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @param key The position's key is a packed concatenation of the owner address, bottomTick and topTick indexes\\r\\n  /// @return liquidity The amount of liquidity in the position\\r\\n  /// @return innerFeeGrowth0Token Fee growth of token0 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return innerFeeGrowth1Token Fee growth of token1 inside the tick range as of the last mint/burn/poke\\r\\n  /// @return fees0 The computed amount of token0 owed to the position as of the last mint/burn/poke\\r\\n  /// @return fees1 The computed amount of token1 owed to the position as of the last mint/burn/poke\\r\\n  function positions(\\r\\n    bytes32 key\\r\\n  ) external view returns (uint256 liquidity, uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token, uint128 fees0, uint128 fees1);\\r\\n\\r\\n  /// @notice The currently in range liquidity available to the pool\\r\\n  /// @dev This value has no relationship to the total liquidity across all ticks.\\r\\n  /// Returned value cannot exceed type(uint128).max\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The current in range liquidity\\r\\n  function liquidity() external view returns (uint128);\\r\\n\\r\\n  /// @notice The current tick spacing\\r\\n  /// @dev Ticks can only be initialized by new mints at multiples of this value\\r\\n  /// e.g.: a tickSpacing of 60 means ticks can be initialized every 60th tick, i.e., ..., -120, -60, 0, 60, 120, ...\\r\\n  /// However, tickspacing can be changed after the ticks have been initialized.\\r\\n  /// This value is an int24 to avoid casting even though it is always positive.\\r\\n  /// @return The current tick spacing\\r\\n  function tickSpacing() external view returns (int24);\\r\\n\\r\\n  /// @notice The previous initialized tick before (or at) current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The previous initialized tick\\r\\n  function prevTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The next initialized tick after current global tick\\r\\n  /// @dev **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The next initialized tick\\r\\n  function nextTickGlobal() external view returns (int24);\\r\\n\\r\\n  /// @notice The root of tick search tree\\r\\n  /// @dev Each bit corresponds to one node in the second layer of tick tree: '1' if node has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The root of tick search tree as bitmap\\r\\n  function tickTreeRoot() external view returns (uint32);\\r\\n\\r\\n  /// @notice The second layer of tick search tree\\r\\n  /// @dev Each bit in node corresponds to one node in the leafs layer (`tickTable`) of tick tree: '1' if leaf has at least one active bit.\\r\\n  /// **important security note: caller should check reentrancy lock to prevent read-only reentrancy**\\r\\n  /// @return The node of tick search tree second layer\\r\\n  function tickTreeSecondLayer(int16) external view returns (uint256);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @title Errors emitted by a pool\\r\\n/// @notice Contains custom errors emitted by the pool\\r\\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\\r\\ninterface IAlgebraPoolErrors {\\r\\n  // ####  pool errors  ####\\r\\n\\r\\n  /// @notice Emitted by the reentrancy guard\\r\\n  error locked();\\r\\n\\r\\n  /// @notice Emitted if arithmetic error occurred\\r\\n  error arithmeticError();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to initialize the pool twice\\r\\n  error alreadyInitialized();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\\r\\n  error notInitialized();\\r\\n\\r\\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\\r\\n  error zeroAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\\r\\n  error invalidAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens than it should have\\r\\n  error insufficientInputAmount();\\r\\n\\r\\n  /// @notice Emitted if there was an attempt to mint zero liquidity\\r\\n  error zeroLiquidityDesired();\\r\\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\\r\\n  error zeroLiquidityActual();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\\r\\n  error flashInsufficientPaid0();\\r\\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\\r\\n  error flashInsufficientPaid1();\\r\\n\\r\\n  /// @notice Emitted if limitSqrtPrice param is incorrect\\r\\n  error invalidLimitSqrtPrice();\\r\\n\\r\\n  /// @notice Tick must be divisible by tickspacing\\r\\n  error tickIsNotSpaced();\\r\\n\\r\\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\\r\\n  error notAllowed();\\r\\n\\r\\n  /// @notice Emitted if new tick spacing exceeds max allowed value\\r\\n  error invalidNewTickSpacing();\\r\\n  /// @notice Emitted if new community fee exceeds max allowed value\\r\\n  error invalidNewCommunityFee();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\\r\\n  error dynamicFeeActive();\\r\\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\\r\\n  error dynamicFeeDisabled();\\r\\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\\r\\n  error pluginIsNotConnected();\\r\\n  /// @notice Emitted if a plugin returns invalid selector after hook call\\r\\n  /// @param expectedSelector The expected selector\\r\\n  error invalidHookResponse(bytes4 expectedSelector);\\r\\n\\r\\n  // ####  LiquidityMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if liquidity underflows\\r\\n  error liquiditySub();\\r\\n  /// @notice Emitted if liquidity overflows\\r\\n  error liquidityAdd();\\r\\n\\r\\n  // ####  TickManagement errors  ####\\r\\n\\r\\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\\r\\n  error topTickLowerOrEqBottomTick();\\r\\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\\r\\n  error bottomTickLowerThanMIN();\\r\\n  /// @notice Emitted if the topTick param is greater than max allowed value\\r\\n  error topTickAboveMAX();\\r\\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\\r\\n  error liquidityOverflow();\\r\\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\\r\\n  error tickIsNotInitialized();\\r\\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\\r\\n  error tickInvalidLinks();\\r\\n\\r\\n  // ####  SafeTransfer errors  ####\\r\\n\\r\\n  /// @notice Emitted if token transfer failed internally\\r\\n  error transferFailed();\\r\\n\\r\\n  // ####  TickMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\\r\\n  error tickOutOfRange();\\r\\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\\r\\n  error priceOutOfRange();\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"contracts/interfaces/pool/IAlgebraPoolEvents.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Events emitted by a pool\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolEvents {\\r\\n  /// @notice Emitted exactly once by a pool when #initialize is first called on the pool\\r\\n  /// @dev Mint/Burn/Swaps cannot be emitted by the pool before Initialize\\r\\n  /// @param price The initial sqrt price of the pool, as a Q64.96\\r\\n  /// @param tick The initial tick of the pool, i.e. log base 1.0001 of the starting price of the pool\\r\\n  event Initialize(uint160 price, int24 tick);\\r\\n\\r\\n  /// @notice Emitted when liquidity is minted for a given position\\r\\n  /// @param sender The address that minted the liquidity\\r\\n  /// @param owner The owner of the position and recipient of any minted liquidity\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity minted to the position range\\r\\n  /// @param amount0 How much token0 was required for the minted liquidity\\r\\n  /// @param amount1 How much token1 was required for the minted liquidity\\r\\n  event Mint(\\r\\n    address sender,\\r\\n    address indexed owner,\\r\\n    int24 indexed bottomTick,\\r\\n    int24 indexed topTick,\\r\\n    uint128 liquidityAmount,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1\\r\\n  );\\r\\n\\r\\n  /// @notice Emitted when fees are collected by the owner of a position\\r\\n  /// @param owner The owner of the position for which fees are collected\\r\\n  /// @param recipient The address that received fees\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param amount0 The amount of token0 fees collected\\r\\n  /// @param amount1 The amount of token1 fees collected\\r\\n  event Collect(address indexed owner, address recipient, int24 indexed bottomTick, int24 indexed topTick, uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Emitted when a position's liquidity is removed\\r\\n  /// @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect\\r\\n  /// @param owner The owner of the position for which liquidity is removed\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param liquidityAmount The amount of liquidity to remove\\r\\n  /// @param amount0 The amount of token0 withdrawn\\r\\n  /// @param amount1 The amount of token1 withdrawn\\r\\n  event Burn(address indexed owner, int24 indexed bottomTick, int24 indexed topTick, uint128 liquidityAmount, uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Emitted by the pool for any swaps between token0 and token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the output of the swap\\r\\n  /// @param amount0 The delta of the token0 balance of the pool\\r\\n  /// @param amount1 The delta of the token1 balance of the pool\\r\\n  /// @param price The sqrt(price) of the pool after the swap, as a Q64.96\\r\\n  /// @param liquidity The liquidity of the pool after the swap\\r\\n  /// @param tick The log base 1.0001 of price of the pool after the swap\\r\\n  event Swap(address indexed sender, address indexed recipient, int256 amount0, int256 amount1, uint160 price, uint128 liquidity, int24 tick);\\r\\n\\r\\n  /// @notice Emitted by the pool for any flashes of token0/token1\\r\\n  /// @param sender The address that initiated the swap call, and that received the callback\\r\\n  /// @param recipient The address that received the tokens from flash\\r\\n  /// @param amount0 The amount of token0 that was flashed\\r\\n  /// @param amount1 The amount of token1 that was flashed\\r\\n  /// @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee\\r\\n  /// @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee\\r\\n  event Flash(address indexed sender, address indexed recipient, uint256 amount0, uint256 amount1, uint256 paid0, uint256 paid1);\\r\\n\\r\\n  /// @notice Emitted when the community fee is changed by the pool\\r\\n  /// @param communityFeeNew The updated value of the community fee in thousandths (1e-3)\\r\\n  event CommunityFee(uint16 communityFeeNew);\\r\\n\\r\\n  /// @notice Emitted when the tick spacing changes\\r\\n  /// @param newTickSpacing The updated value of the new tick spacing\\r\\n  event TickSpacing(int24 newTickSpacing);\\r\\n\\r\\n  /// @notice Emitted when the plugin address changes\\r\\n  /// @param newPluginAddress New plugin address\\r\\n  event Plugin(address newPluginAddress);\\r\\n\\r\\n  /// @notice Emitted when the plugin config changes\\r\\n  /// @param newPluginConfig New plugin config\\r\\n  event PluginConfig(uint8 newPluginConfig);\\r\\n\\r\\n  /// @notice Emitted when the fee changes inside the pool\\r\\n  /// @param fee The current fee in hundredths of a bip, i.e. 1e-6\\r\\n  event Fee(uint16 fee);\\r\\n\\r\\n  event CommunityVault(address newCommunityVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolActions.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Permissionless pool actions\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolActions {\\r\\n  /// @notice Sets the initial price for the pool\\r\\n  /// @dev Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value\\r\\n  /// @dev Initialization should be done in one transaction with pool creation to avoid front-running\\r\\n  /// @param initialPrice The initial sqrt price of the pool as a Q64.96\\r\\n  function initialize(uint160 initialPrice) external;\\r\\n\\r\\n  /// @notice Adds liquidity for the given recipient/bottomTick/topTick position\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraMintCallback#algebraMintCallback\\r\\n  /// in which they must pay any token0 or token1 owed for the liquidity. The amount of token0/token1 due depends\\r\\n  /// on bottomTick, topTick, the amount of liquidity, and the current price.\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address for which the liquidity will be created\\r\\n  /// @param bottomTick The lower tick of the position in which to add liquidity\\r\\n  /// @param topTick The upper tick of the position in which to add liquidity\\r\\n  /// @param liquidityDesired The desired amount of liquidity to mint\\r\\n  /// @param data Any data that should be passed through to the callback\\r\\n  /// @return amount0 The amount of token0 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return amount1 The amount of token1 that was paid to mint the given amount of liquidity. Matches the value in the callback\\r\\n  /// @return liquidityActual The actual minted amount of liquidity\\r\\n  function mint(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 liquidityDesired,\\r\\n    bytes calldata data\\r\\n  ) external returns (uint256 amount0, uint256 amount1, uint128 liquidityActual);\\r\\n\\r\\n  /// @notice Collects tokens owed to a position\\r\\n  /// @dev Does not recompute fees earned, which must be done either via mint or burn of any amount of liquidity.\\r\\n  /// Collect must be called by the position owner. To withdraw only token0 or only token1, amount0Requested or\\r\\n  /// amount1Requested may be set to zero. To withdraw all tokens owed, caller may pass any value greater than the\\r\\n  /// actual tokens owed, e.g. type(uint128).max. Tokens owed may be from accumulated swap fees or burned liquidity.\\r\\n  /// @param recipient The address which should receive the fees collected\\r\\n  /// @param bottomTick The lower tick of the position for which to collect fees\\r\\n  /// @param topTick The upper tick of the position for which to collect fees\\r\\n  /// @param amount0Requested How much token0 should be withdrawn from the fees owed\\r\\n  /// @param amount1Requested How much token1 should be withdrawn from the fees owed\\r\\n  /// @return amount0 The amount of fees collected in token0\\r\\n  /// @return amount1 The amount of fees collected in token1\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external returns (uint128 amount0, uint128 amount1);\\r\\n\\r\\n  /// @notice Burn liquidity from the sender and account tokens owed for the liquidity to the position\\r\\n  /// @dev Can be used to trigger a recalculation of fees owed to a position by calling with an amount of 0\\r\\n  /// @dev Fees must be collected separately via a call to #collect\\r\\n  /// @param bottomTick The lower tick of the position for which to burn liquidity\\r\\n  /// @param topTick The upper tick of the position for which to burn liquidity\\r\\n  /// @param amount How much liquidity to burn\\r\\n  /// @param data Any data that should be passed through to the plugin\\r\\n  /// @return amount0 The amount of token0 sent to the recipient\\r\\n  /// @return amount1 The amount of token1 sent to the recipient\\r\\n  function burn(int24 bottomTick, int24 topTick, uint128 amount, bytes calldata data) external returns (uint256 amount0, uint256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Swap token0 for token1, or token1 for token0 with prepayment\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraSwapCallback#algebraSwapCallback\\r\\n  /// caller must send tokens in callback before swap calculation\\r\\n  /// the actually sent amount of tokens is used for further calculations\\r\\n  /// @param leftoversRecipient The address which will receive potential surplus of paid tokens\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountToSell The amount of the swap, only positive (exact input) amount allowed\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param data Any data to be passed through to the callback. If using the Router it should contain SwapRouter#SwapCallbackData\\r\\n  /// @return amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @return amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  function swapWithPaymentInAdvance(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountToSell,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external returns (int256 amount0, int256 amount1);\\r\\n\\r\\n  /// @notice Receive token0 and/or token1 and pay it back, plus a fee, in the callback\\r\\n  /// @dev The caller of this method receives a callback in the form of IAlgebraFlashCallback#algebraFlashCallback\\r\\n  /// @dev All excess tokens paid in the callback are distributed to currently in-range liquidity providers as an additional fee.\\r\\n  /// If there are no in-range liquidity providers, the fee will be transferred to the first active provider in the future\\r\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\r\\n  /// @param amount0 The amount of token0 to send\\r\\n  /// @param amount1 The amount of token1 to send\\r\\n  /// @param data Any data to be passed through to the callback\\r\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/IAlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\nimport './pool/IAlgebraPoolImmutables.sol';\\r\\nimport './pool/IAlgebraPoolState.sol';\\r\\nimport './pool/IAlgebraPoolActions.sol';\\r\\nimport './pool/IAlgebraPoolPermissionedActions.sol';\\r\\nimport './pool/IAlgebraPoolEvents.sol';\\r\\nimport './pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title The interface for a Algebra Pool\\r\\n/// @dev The pool interface is broken up into many smaller pieces.\\r\\n/// This interface includes custom error definitions and cannot be used in older versions of Solidity.\\r\\n/// For older versions of Solidity use #IAlgebraPoolLegacy\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPool is\\r\\n  IAlgebraPoolImmutables,\\r\\n  IAlgebraPoolState,\\r\\n  IAlgebraPoolActions,\\r\\n  IAlgebraPoolPermissionedActions,\\r\\n  IAlgebraPoolEvents,\\r\\n  IAlgebraPoolErrors\\r\\n{\\r\\n  // used only for combining interfaces\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"contracts/libraries/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\n/// @title Safe casting methods\\r\\n/// @notice Contains methods for safely casting between types\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary SafeCast {\\r\\n  /// @notice Cast a uint256 to a uint160, revert on overflow\\r\\n  /// @param y The uint256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type uint160\\r\\n  function toUint160(uint256 y) internal pure returns (uint160 z) {\\r\\n    require((z = uint160(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a uint256 to a uint128, revert on overflow\\r\\n  /// @param y The uint256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type uint128\\r\\n  function toUint128(uint256 y) internal pure returns (uint128 z) {\\r\\n    require((z = uint128(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a int256 to a int128, revert on overflow or underflow\\r\\n  /// @param y The int256 to be downcasted\\r\\n  /// @return z The downcasted integer, now type int128\\r\\n  function toInt128(int256 y) internal pure returns (int128 z) {\\r\\n    require((z = int128(y)) == y);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a uint128 to a int128, revert on overflow\\r\\n  /// @param y The uint128 to be downcasted\\r\\n  /// @return z The downcasted integer, now type int128\\r\\n  function toInt128(uint128 y) internal pure returns (int128 z) {\\r\\n    require((z = int128(y)) >= 0);\\r\\n  }\\r\\n\\r\\n  /// @notice Cast a uint256 to a int256, revert on overflow\\r\\n  /// @param y The uint256 to be casted\\r\\n  /// @return z The casted integer, now type int256\\r\\n  function toInt256(uint256 y) internal pure returns (int256 z) {\\r\\n    require((z = int256(y)) >= 0);\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0 <0.9.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      // Subtract 256 bit remainder from 512 bit number\\r\\n      assembly {\\r\\n        let remainder := mulmod(a, b, denominator)\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      uint256 twos = (0 - denominator) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the preconditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      if (a == 0 || ((result = a * b) / a == b)) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n        }\\r\\n      } else {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n          require(result < type(uint256).max);\\r\\n          result++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function unsafeDivRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\n/// @title Contains common constants for Algebra contracts\\r\\n/// @dev Constants moved to the library, not the base contract, to further emphasize their constant nature\\r\\nlibrary Constants {\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint256 internal constant Q96 = 1 << 96;\\r\\n  uint256 internal constant Q128 = 1 << 128;\\r\\n\\r\\n  uint24 internal constant FEE_DENOMINATOR = 1e6;\\r\\n  uint16 internal constant FLASH_FEE = 0.01e4; // fee for flash loan in hundredths of a bip (0.01%)\\r\\n  uint16 internal constant INIT_DEFAULT_FEE = 0.05e4; // init default fee value in hundredths of a bip (0.05%)\\r\\n  uint16 internal constant MAX_DEFAULT_FEE = 5e4; // max default fee value in hundredths of a bip (5%)\\r\\n\\r\\n  int24 internal constant INIT_DEFAULT_TICK_SPACING = 60;\\r\\n  int24 internal constant MAX_TICK_SPACING = 500;\\r\\n  int24 internal constant MIN_TICK_SPACING = 1;\\r\\n\\r\\n  // the frequency with which the accumulated community fees are sent to the vault\\r\\n  uint32 internal constant COMMUNITY_FEE_TRANSFER_FREQUENCY = 8 hours;\\r\\n\\r\\n  // max(uint128) / (MAX_TICK - MIN_TICK)\\r\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 191757638537527648490752896198553;\\r\\n\\r\\n  uint16 internal constant MAX_COMMUNITY_FEE = 1e3; // 100%\\r\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1e3;\\r\\n  // role that can change settings in pools\\r\\n  bytes32 internal constant POOLS_ADMINISTRATOR_ROLE = keccak256('POOLS_ADMINISTRATOR');\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0 <0.9.0\"},\"contracts/libraries/TokenDeltaMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './SafeCast.sol';\\r\\nimport './FullMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title Functions based on Q64.96 sqrt price and liquidity\\r\\n/// @notice Contains the math that uses square root of price as a Q64.96 and liquidity to compute deltas\\r\\nlibrary TokenDeltaMath {\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the token0 delta between two prices\\r\\n  /// @dev Calculates liquidity / sqrt(lower) - liquidity / sqrt(upper)\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up or down\\r\\n  /// @return token0Delta Amount of token0 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken0Delta(uint160 priceLower, uint160 priceUpper, uint128 liquidity, bool roundUp) internal pure returns (uint256 token0Delta) {\\r\\n    unchecked {\\r\\n      uint256 priceDelta = priceUpper - priceLower;\\r\\n      require(priceDelta < priceUpper); // forbids underflow and 0 priceLower\\r\\n      uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n      token0Delta = roundUp\\r\\n        ? FullMath.unsafeDivRoundingUp(FullMath.mulDivRoundingUp(priceDelta, liquidityShifted, priceUpper), priceLower) // denominator always > 0\\r\\n        : FullMath.mulDiv(priceDelta, liquidityShifted, priceUpper) / priceLower;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the token1 delta between two prices\\r\\n  /// @dev Calculates liquidity * (sqrt(upper) - sqrt(lower))\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param roundUp Whether to round the amount up, or down\\r\\n  /// @return token1Delta Amount of token1 required to cover a position of size liquidity between the two passed prices\\r\\n  function getToken1Delta(uint160 priceLower, uint160 priceUpper, uint128 liquidity, bool roundUp) internal pure returns (uint256 token1Delta) {\\r\\n    unchecked {\\r\\n      require(priceUpper >= priceLower);\\r\\n      uint256 priceDelta = priceUpper - priceLower;\\r\\n      token1Delta = roundUp ? FullMath.mulDivRoundingUp(priceDelta, liquidity, Constants.Q96) : FullMath.mulDiv(priceDelta, liquidity, Constants.Q96);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token0 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token0 delta\\r\\n  /// @return token0Delta Amount of token0 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken0Delta(uint160 priceLower, uint160 priceUpper, int128 liquidity) internal pure returns (int256 token0Delta) {\\r\\n    unchecked {\\r\\n      token0Delta = liquidity >= 0\\r\\n        ? getToken0Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n        : -getToken0Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Helper that gets signed token1 delta\\r\\n  /// @param priceLower A Q64.96 sqrt price\\r\\n  /// @param priceUpper Another Q64.96 sqrt price\\r\\n  /// @param liquidity The change in liquidity for which to compute the token1 delta\\r\\n  /// @return token1Delta Amount of token1 corresponding to the passed liquidityDelta between the two prices\\r\\n  function getToken1Delta(uint160 priceLower, uint160 priceUpper, int128 liquidity) internal pure returns (int256 token1Delta) {\\r\\n    unchecked {\\r\\n      token1Delta = liquidity >= 0\\r\\n        ? getToken1Delta(priceLower, priceUpper, uint128(liquidity), true).toInt256()\\r\\n        : -getToken1Delta(priceLower, priceUpper, uint128(-liquidity), false).toInt256();\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/libraries/TickMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title Math library for computing sqrt prices from ticks and vice versa\\r\\n/// @notice Computes sqrt price for ticks of size 1.0001, i.e. sqrt(1.0001^tick) as fixed point Q64.96 numbers. Supports\\r\\n/// prices between 2**-128 and 2**128\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary TickMath {\\r\\n  /// @dev The minimum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**-128\\r\\n  int24 internal constant MIN_TICK = -887272;\\r\\n  /// @dev The maximum tick that may be passed to #getSqrtRatioAtTick computed from log base 1.0001 of 2**128\\r\\n  int24 internal constant MAX_TICK = -MIN_TICK;\\r\\n\\r\\n  /// @dev The minimum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MIN_TICK)\\r\\n  uint160 internal constant MIN_SQRT_RATIO = 4295128739;\\r\\n  /// @dev The maximum value that can be returned from #getSqrtRatioAtTick. Equivalent to getSqrtRatioAtTick(MAX_TICK)\\r\\n  uint160 internal constant MAX_SQRT_RATIO = 1461446703485210103287273052203988822378723970342;\\r\\n\\r\\n  /// @notice Calculates sqrt(1.0001^tick) * 2^96\\r\\n  /// @dev Throws if |tick| > max tick\\r\\n  /// @param tick The input tick for the above formula\\r\\n  /// @return price A Fixed point Q64.96 number representing the sqrt of the ratio of the two assets (token1/token0)\\r\\n  /// at the given tick\\r\\n  function getSqrtRatioAtTick(int24 tick) internal pure returns (uint160 price) {\\r\\n    unchecked {\\r\\n      // get abs value\\r\\n      int24 absTickMask = tick >> (24 - 1);\\r\\n      uint256 absTick = uint24((tick + absTickMask) ^ absTickMask);\\r\\n      if (absTick > uint24(MAX_TICK)) revert IAlgebraPoolErrors.tickOutOfRange();\\r\\n\\r\\n      uint256 ratio = 0x100000000000000000000000000000000;\\r\\n      if (absTick & 0x1 != 0) ratio = 0xfffcb933bd6fad37aa2d162d1a594001;\\r\\n      if (absTick & 0x2 != 0) ratio = (ratio * 0xfff97272373d413259a46990580e213a) >> 128;\\r\\n      if (absTick & 0x4 != 0) ratio = (ratio * 0xfff2e50f5f656932ef12357cf3c7fdcc) >> 128;\\r\\n      if (absTick & 0x8 != 0) ratio = (ratio * 0xffe5caca7e10e4e61c3624eaa0941cd0) >> 128;\\r\\n      if (absTick & 0x10 != 0) ratio = (ratio * 0xffcb9843d60f6159c9db58835c926644) >> 128;\\r\\n      if (absTick & 0x20 != 0) ratio = (ratio * 0xff973b41fa98c081472e6896dfb254c0) >> 128;\\r\\n      if (absTick & 0x40 != 0) ratio = (ratio * 0xff2ea16466c96a3843ec78b326b52861) >> 128;\\r\\n      if (absTick & 0x80 != 0) ratio = (ratio * 0xfe5dee046a99a2a811c461f1969c3053) >> 128;\\r\\n      if (absTick & 0x100 != 0) ratio = (ratio * 0xfcbe86c7900a88aedcffc83b479aa3a4) >> 128;\\r\\n      if (absTick & 0x200 != 0) ratio = (ratio * 0xf987a7253ac413176f2b074cf7815e54) >> 128;\\r\\n      if (absTick & 0x400 != 0) ratio = (ratio * 0xf3392b0822b70005940c7a398e4b70f3) >> 128;\\r\\n      if (absTick & 0x800 != 0) ratio = (ratio * 0xe7159475a2c29b7443b29c7fa6e889d9) >> 128;\\r\\n      if (absTick & 0x1000 != 0) ratio = (ratio * 0xd097f3bdfd2022b8845ad8f792aa5825) >> 128;\\r\\n      if (absTick & 0x2000 != 0) ratio = (ratio * 0xa9f746462d870fdf8a65dc1f90e061e5) >> 128;\\r\\n      if (absTick & 0x4000 != 0) ratio = (ratio * 0x70d869a156d2a1b890bb3df62baf32f7) >> 128;\\r\\n      if (absTick & 0x8000 != 0) ratio = (ratio * 0x31be135f97d08fd981231505542fcfa6) >> 128;\\r\\n      if (absTick & 0x10000 != 0) ratio = (ratio * 0x9aa508b5b7a84e1c677de54f3e99bc9) >> 128;\\r\\n      if (absTick & 0x20000 != 0) ratio = (ratio * 0x5d6af8dedb81196699c329225ee604) >> 128;\\r\\n      if (absTick >= 0x40000) {\\r\\n        if (absTick & 0x40000 != 0) ratio = (ratio * 0x2216e584f5fa1ea926041bedfe98) >> 128;\\r\\n        if (absTick & 0x80000 != 0) ratio = (ratio * 0x48a170391f7dc42444e8fa2) >> 128;\\r\\n      }\\r\\n\\r\\n      if (tick > 0) {\\r\\n        assembly {\\r\\n          ratio := div(not(0), ratio)\\r\\n        }\\r\\n      }\\r\\n\\r\\n      // this divides by 1<<32 rounding up to go from a Q128.128 to a Q128.96.\\r\\n      // we then downcast because we know the result always fits within 160 bits due to our tick input constraint\\r\\n      // we round up in the division so getTickAtSqrtRatio of the output price is always consistent\\r\\n      price = uint160((ratio + 0xFFFFFFFF) >> 32);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the greatest tick value such that getRatioAtTick(tick) <= ratio\\r\\n  /// @dev Throws in case price < MIN_SQRT_RATIO, as MIN_SQRT_RATIO is the lowest value getRatioAtTick may\\r\\n  /// ever return.\\r\\n  /// @param price The sqrt ratio for which to compute the tick as a Q64.96\\r\\n  /// @return tick The greatest tick for which the ratio is less than or equal to the input ratio\\r\\n  function getTickAtSqrtRatio(uint160 price) internal pure returns (int24 tick) {\\r\\n    unchecked {\\r\\n      // second inequality must be >= because the price can never reach the price at the max tick\\r\\n      if (price < MIN_SQRT_RATIO || price >= MAX_SQRT_RATIO) revert IAlgebraPoolErrors.priceOutOfRange();\\r\\n      uint256 ratio = uint256(price) << 32;\\r\\n\\r\\n      uint256 r = ratio;\\r\\n      uint256 msb;\\r\\n\\r\\n      assembly {\\r\\n        let f := shl(7, gt(r, 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(6, gt(r, 0xFFFFFFFFFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(5, gt(r, 0xFFFFFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(4, gt(r, 0xFFFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(3, gt(r, 0xFF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(2, gt(r, 0xF))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := shl(1, gt(r, 0x3))\\r\\n        msb := or(msb, f)\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        let f := gt(r, 0x1)\\r\\n        msb := or(msb, f)\\r\\n      }\\r\\n\\r\\n      if (msb >= 128) r = ratio >> (msb - 127);\\r\\n      else r = ratio << (127 - msb);\\r\\n\\r\\n      int256 log_2 = (int256(msb) - 128) << 64;\\r\\n\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(63, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(62, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(61, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(60, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(59, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(58, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(57, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(56, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(55, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(54, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(53, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(52, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(51, f))\\r\\n        r := shr(f, r)\\r\\n      }\\r\\n      assembly {\\r\\n        r := shr(127, mul(r, r))\\r\\n        let f := shr(128, r)\\r\\n        log_2 := or(log_2, shl(50, f))\\r\\n      }\\r\\n\\r\\n      int256 log_sqrt10001 = log_2 * 255738958999603826347141; // 128.128 number\\r\\n\\r\\n      int24 tickLow = int24((log_sqrt10001 - 3402992956809132418596140100660247210) >> 128);\\r\\n      int24 tickHi = int24((log_sqrt10001 + 291339464771989622907027621153398088495) >> 128);\\r\\n\\r\\n      tick = tickLow == tickHi ? tickLow : getSqrtRatioAtTick(tickHi) <= price ? tickHi : tickLow;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/libraries/LiquidityMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\nimport './TickMath.sol';\\r\\nimport './TokenDeltaMath.sol';\\r\\n\\r\\n/// @title Math library for liquidity\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LiquidityMath {\\r\\n  /// @notice Add a signed liquidity delta to liquidity and revert if it overflows or underflows\\r\\n  /// @param x The liquidity before change\\r\\n  /// @param y The delta by which liquidity should be changed\\r\\n  /// @return z The liquidity delta\\r\\n  function addDelta(uint128 x, int128 y) internal pure returns (uint128 z) {\\r\\n    unchecked {\\r\\n      if (y < 0) {\\r\\n        if ((z = x - uint128(-y)) >= x) revert IAlgebraPoolErrors.liquiditySub();\\r\\n      } else {\\r\\n        if ((z = x + uint128(y)) < x) revert IAlgebraPoolErrors.liquidityAdd();\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getAmountsForLiquidity(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int128 liquidityDelta,\\r\\n    int24 currentTick,\\r\\n    uint160 currentPrice\\r\\n  ) internal pure returns (uint256 amount0, uint256 amount1, int128 globalLiquidityDelta) {\\r\\n    uint160 priceAtBottomTick = TickMath.getSqrtRatioAtTick(bottomTick);\\r\\n    uint160 priceAtTopTick = TickMath.getSqrtRatioAtTick(topTick);\\r\\n\\r\\n    int256 amount0Int;\\r\\n    int256 amount1Int;\\r\\n    if (currentTick < bottomTick) {\\r\\n      // If current tick is less than the provided bottom one then only the token0 has to be provided\\r\\n      amount0Int = TokenDeltaMath.getToken0Delta(priceAtBottomTick, priceAtTopTick, liquidityDelta);\\r\\n    } else if (currentTick < topTick) {\\r\\n      amount0Int = TokenDeltaMath.getToken0Delta(currentPrice, priceAtTopTick, liquidityDelta);\\r\\n      amount1Int = TokenDeltaMath.getToken1Delta(priceAtBottomTick, currentPrice, liquidityDelta);\\r\\n      globalLiquidityDelta = liquidityDelta;\\r\\n    } else {\\r\\n      // If current tick is greater than the provided top one then only the token1 has to be provided\\r\\n      amount1Int = TokenDeltaMath.getToken1Delta(priceAtBottomTick, priceAtTopTick, liquidityDelta);\\r\\n    }\\r\\n\\r\\n    unchecked {\\r\\n      (amount0, amount1) = liquidityDelta < 0 ? (uint256(-amount0Int), uint256(-amount1Int)) : (uint256(amount0Int), uint256(amount1Int));\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/libraries/TickManagement.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\nimport './TickMath.sol';\\r\\nimport './LiquidityMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title Library for managing and interacting with ticks\\r\\n/// @notice Contains functions for managing tick processes and relevant calculations\\r\\n/// @dev Ticks are organized as a doubly linked list\\r\\nlibrary TickManagement {\\r\\n  // info stored for each initialized individual tick\\r\\n  struct Tick {\\r\\n    uint256 liquidityTotal; // the total position liquidity that references this tick\\r\\n    int128 liquidityDelta; // amount of net liquidity added (subtracted) when tick is crossed left-right (right-left),\\r\\n    int24 prevTick;\\r\\n    int24 nextTick;\\r\\n    // fee growth per unit of liquidity on the _other_ side of this tick (relative to the current tick)\\r\\n    // only has relative meaning, not absolute — the value depends on when the tick is initialized\\r\\n    uint256 outerFeeGrowth0Token;\\r\\n    uint256 outerFeeGrowth1Token;\\r\\n  }\\r\\n\\r\\n  function checkTickRangeValidity(int24 bottomTick, int24 topTick) internal pure {\\r\\n    if (topTick > TickMath.MAX_TICK) revert IAlgebraPoolErrors.topTickAboveMAX();\\r\\n    if (topTick <= bottomTick) revert IAlgebraPoolErrors.topTickLowerOrEqBottomTick();\\r\\n    if (bottomTick < TickMath.MIN_TICK) revert IAlgebraPoolErrors.bottomTickLowerThanMIN();\\r\\n  }\\r\\n\\r\\n  /// @notice Retrieves fee growth data\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param bottomTick The lower tick boundary of the position\\r\\n  /// @param topTick The upper tick boundary of the position\\r\\n  /// @param currentTick The current tick\\r\\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @return innerFeeGrowth0Token The all-time fee growth in token0, per unit of liquidity, inside the position's tick boundaries\\r\\n  /// @return innerFeeGrowth1Token The all-time fee growth in token1, per unit of liquidity, inside the position's tick boundaries\\r\\n  function getInnerFeeGrowth(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int24 currentTick,\\r\\n    uint256 totalFeeGrowth0Token,\\r\\n    uint256 totalFeeGrowth1Token\\r\\n  ) internal view returns (uint256 innerFeeGrowth0Token, uint256 innerFeeGrowth1Token) {\\r\\n    Tick storage lower = self[bottomTick];\\r\\n    Tick storage upper = self[topTick];\\r\\n\\r\\n    unchecked {\\r\\n      if (currentTick < topTick) {\\r\\n        if (currentTick >= bottomTick) {\\r\\n          innerFeeGrowth0Token = totalFeeGrowth0Token - lower.outerFeeGrowth0Token;\\r\\n          innerFeeGrowth1Token = totalFeeGrowth1Token - lower.outerFeeGrowth1Token;\\r\\n        } else {\\r\\n          innerFeeGrowth0Token = lower.outerFeeGrowth0Token;\\r\\n          innerFeeGrowth1Token = lower.outerFeeGrowth1Token;\\r\\n        }\\r\\n        innerFeeGrowth0Token -= upper.outerFeeGrowth0Token;\\r\\n        innerFeeGrowth1Token -= upper.outerFeeGrowth1Token;\\r\\n      } else {\\r\\n        innerFeeGrowth0Token = upper.outerFeeGrowth0Token - lower.outerFeeGrowth0Token;\\r\\n        innerFeeGrowth1Token = upper.outerFeeGrowth1Token - lower.outerFeeGrowth1Token;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Updates a tick and returns true if the tick was flipped from initialized to uninitialized, or vice versa\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The tick that will be updated\\r\\n  /// @param currentTick The current tick\\r\\n  /// @param liquidityDelta A new amount of liquidity to be added (subtracted) when tick is crossed from left to right (right to left)\\r\\n  /// @param totalFeeGrowth0Token The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param totalFeeGrowth1Token The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @param upper True for updating a position's upper tick, or false for updating a position's lower tick\\r\\n  /// @return flipped Whether the tick was flipped from initialized to uninitialized, or vice versa\\r\\n  function update(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 tick,\\r\\n    int24 currentTick,\\r\\n    int128 liquidityDelta,\\r\\n    uint256 totalFeeGrowth0Token,\\r\\n    uint256 totalFeeGrowth1Token,\\r\\n    bool upper\\r\\n  ) internal returns (bool flipped) {\\r\\n    Tick storage data = self[tick];\\r\\n\\r\\n    uint256 liquidityTotalBefore = data.liquidityTotal;\\r\\n    uint256 liquidityTotalAfter = LiquidityMath.addDelta(uint128(liquidityTotalBefore), liquidityDelta);\\r\\n    if (liquidityTotalAfter > Constants.MAX_LIQUIDITY_PER_TICK) revert IAlgebraPoolErrors.liquidityOverflow();\\r\\n\\r\\n    int128 liquidityDeltaBefore = data.liquidityDelta;\\r\\n    // when the lower (upper) tick is crossed left to right (right to left), liquidity must be added (removed)\\r\\n    data.liquidityDelta = upper ? int128(int256(liquidityDeltaBefore) - liquidityDelta) : int128(int256(liquidityDeltaBefore) + liquidityDelta);\\r\\n    data.liquidityTotal = liquidityTotalAfter;\\r\\n\\r\\n    flipped = (liquidityTotalAfter == 0);\\r\\n    if (liquidityTotalBefore == 0) {\\r\\n      flipped = !flipped;\\r\\n      // by convention, we assume that all growth before a tick was initialized happened _below_ the tick\\r\\n      if (tick <= currentTick) (data.outerFeeGrowth0Token, data.outerFeeGrowth1Token) = (totalFeeGrowth0Token, totalFeeGrowth1Token);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Transitions to next tick as needed by price movement\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The destination tick of the transition\\r\\n  /// @param feeGrowth0 The all-time global fee growth, per unit of liquidity, in token0\\r\\n  /// @param feeGrowth1 The all-time global fee growth, per unit of liquidity, in token1\\r\\n  /// @return liquidityDelta The amount of liquidity added (subtracted) when tick is crossed from left to right (right to left)\\r\\n  /// @return prevTick The previous active tick before _tick_\\r\\n  /// @return nextTick The next active tick after _tick_\\r\\n  function cross(\\r\\n    mapping(int24 => Tick) storage self,\\r\\n    int24 tick,\\r\\n    uint256 feeGrowth0,\\r\\n    uint256 feeGrowth1\\r\\n  ) internal returns (int128 liquidityDelta, int24 prevTick, int24 nextTick) {\\r\\n    Tick storage data = self[tick];\\r\\n    unchecked {\\r\\n      (data.outerFeeGrowth1Token, data.outerFeeGrowth0Token) = (feeGrowth1 - data.outerFeeGrowth1Token, feeGrowth0 - data.outerFeeGrowth0Token);\\r\\n    }\\r\\n    return (data.liquidityDelta, data.prevTick, data.nextTick);\\r\\n  }\\r\\n\\r\\n  /// @notice Used for initial setup of ticks list\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  function initTickState(mapping(int24 => Tick) storage self) internal {\\r\\n    (self[TickMath.MIN_TICK].prevTick, self[TickMath.MIN_TICK].nextTick) = (TickMath.MIN_TICK, TickMath.MAX_TICK);\\r\\n    (self[TickMath.MAX_TICK].prevTick, self[TickMath.MAX_TICK].nextTick) = (TickMath.MIN_TICK, TickMath.MAX_TICK);\\r\\n  }\\r\\n\\r\\n  /// @notice Removes tick from the linked list\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The tick that will be removed\\r\\n  /// @return prevTick The previous active tick before _tick_\\r\\n  /// @return nextTick The next active tick after _tick_\\r\\n  function removeTick(mapping(int24 => Tick) storage self, int24 tick) internal returns (int24 prevTick, int24 nextTick) {\\r\\n    (prevTick, nextTick) = (self[tick].prevTick, self[tick].nextTick);\\r\\n    delete self[tick];\\r\\n\\r\\n    if (tick == TickMath.MIN_TICK || tick == TickMath.MAX_TICK) {\\r\\n      // MIN_TICK and MAX_TICK cannot be removed from tick list\\r\\n      (self[tick].prevTick, self[tick].nextTick) = (prevTick, nextTick);\\r\\n    } else {\\r\\n      if (prevTick == nextTick) revert IAlgebraPoolErrors.tickIsNotInitialized();\\r\\n      self[prevTick].nextTick = nextTick;\\r\\n      self[nextTick].prevTick = prevTick;\\r\\n    }\\r\\n    return (prevTick, nextTick);\\r\\n  }\\r\\n\\r\\n  /// @notice Adds tick to the linked list\\r\\n  /// @param self The mapping containing all tick information for initialized ticks\\r\\n  /// @param tick The tick that will be inserted\\r\\n  /// @param prevTick The previous active tick before _tick_\\r\\n  /// @param nextTick The next active tick after _tick_\\r\\n  function insertTick(mapping(int24 => Tick) storage self, int24 tick, int24 prevTick, int24 nextTick) internal {\\r\\n    if (tick == TickMath.MIN_TICK || tick == TickMath.MAX_TICK) return;\\r\\n    if (!(prevTick < tick && nextTick > tick)) revert IAlgebraPoolErrors.tickInvalidLinks();\\r\\n    (self[tick].prevTick, self[tick].nextTick) = (prevTick, nextTick);\\r\\n\\r\\n    self[prevTick].nextTick = tick;\\r\\n    self[nextTick].prevTick = tick;\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title SafeTransfer\\r\\n/// @notice Safe ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @dev Credit to Solmate under MIT license: https://github.com/transmissions11/solmate/blob/ed67feda67b24fdeff8ad1032360f0ee6047ba0a/src/utils/SafeTransferLib.sol\\r\\n/// @dev Please note that this library does not check if the token has a code! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransfer {\\r\\n  /// @notice Transfers tokens to a recipient\\r\\n  /// @dev Calls transfer on token contract, errors with transferFailed() if transfer fails\\r\\n  /// @param token The contract address of the token which will be transferred\\r\\n  /// @param to The recipient of the transfer\\r\\n  /// @param amount The amount of the token to transfer\\r\\n  function safeTransfer(address token, address to, uint256 amount) internal {\\r\\n    bool success;\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40) // we will need to restore 0x40 slot\\r\\n      mstore(0x00, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // \\\"transfer(address,uint256)\\\" selector\\r\\n      mstore(0x04, and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // append cleaned \\\"to\\\" address\\r\\n      mstore(0x24, amount)\\r\\n      // now we use 0x00 - 0x44 bytes (68), freeMemoryPointer is dirty\\r\\n      success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\\r\\n      success := and(\\r\\n        // set success to true if call isn't reverted and returned exactly 1 (can't just be non-zero data) or nothing\\r\\n        or(and(eq(mload(0), 1), eq(returndatasize(), 32)), iszero(returndatasize())),\\r\\n        success\\r\\n      )\\r\\n      mstore(0x40, freeMemoryPointer) // restore the freeMemoryPointer\\r\\n    }\\r\\n\\r\\n    if (!success) revert IAlgebraPoolErrors.transferFailed();\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/base/common/Timestamp.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\n/// @title Abstract contract with modified blockTimestamp functionality\\r\\n/// @notice Allows the pool and other contracts to get a timestamp truncated to 32 bits\\r\\n/// @dev Can be overridden in tests to make testing easier\\r\\nabstract contract Timestamp {\\r\\n  /// @dev This function is created for testing by overriding it.\\r\\n  /// @return A timestamp converted to uint32\\r\\n  function _blockTimestamp() internal view virtual returns (uint32) {\\r\\n    return uint32(block.timestamp); // truncation is desired\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/plugin/IAlgebraPluginFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title An interface for a contract that is capable of deploying Algebra plugins\\r\\n/// @dev Such a factory is needed if the plugin should be automatically created and connected to each new pool\\r\\ninterface IAlgebraPluginFactory {\\r\\n  /// @notice Deploys new plugin contract for pool\\r\\n  /// @param pool The address of the pool for which the new plugin will be created\\r\\n  /// @param token0 First token of the pool\\r\\n  /// @param token1 Second token of the pool\\r\\n  /// @return New plugin address\\r\\n  function createPlugin(address pool, address token0, address token1) external returns (address);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/vault/IAlgebraVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra Vault Factory\\r\\n/// @notice This contract can be used for automatic vaults creation\\r\\n/// @dev Version: Algebra Integral\\r\\ninterface IAlgebraVaultFactory {\\r\\n  /// @notice returns address of the community fee vault for the pool\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function getVaultForPool(address pool) external view returns (address communityFeeVault);\\r\\n\\r\\n  /// @notice creates the community fee vault for the pool if needed\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function createVaultForPool(address pool) external returns (address communityFeeVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/IAlgebraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport './plugin/IAlgebraPluginFactory.sol';\\r\\nimport './vault/IAlgebraVaultFactory.sol';\\r\\n\\r\\n/// @title The interface for the Algebra Factory\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraFactory {\\r\\n  /// @notice Emitted when a process of ownership renounce is started\\r\\n  /// @param timestamp The timestamp of event\\r\\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\\r\\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce cancelled\\r\\n  /// @param timestamp The timestamp of event\\r\\n  event RenounceOwnershipStop(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce finished\\r\\n  /// @param timestamp The timestamp of ownership renouncement\\r\\n  event RenounceOwnershipFinish(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a pool is created\\r\\n  /// @param token0 The first token of the pool by address sort order\\r\\n  /// @param token1 The second token of the pool by address sort order\\r\\n  /// @param pool The address of the created pool\\r\\n  event Pool(address indexed token0, address indexed token1, address pool);\\r\\n\\r\\n  /// @notice Emitted when the default community fee is changed\\r\\n  /// @param newDefaultCommunityFee The new default community fee value\\r\\n  event DefaultCommunityFee(uint16 newDefaultCommunityFee);\\r\\n\\r\\n  /// @notice Emitted when the default tickspacing is changed\\r\\n  /// @param newDefaultTickspacing The new default tickspacing value\\r\\n  event DefaultTickspacing(int24 newDefaultTickspacing);\\r\\n\\r\\n  /// @notice Emitted when the default fee is changed\\r\\n  /// @param newDefaultFee The new default fee value\\r\\n  event DefaultFee(uint16 newDefaultFee);\\r\\n\\r\\n  /// @notice Emitted when the defaultPluginFactory address is changed\\r\\n  /// @param defaultPluginFactoryAddress The new defaultPluginFactory address\\r\\n  event DefaultPluginFactory(address defaultPluginFactoryAddress);\\r\\n\\r\\n  /// @notice Emitted when the vaultFactory address is changed\\r\\n  /// @param newVaultFactory The new vaultFactory address\\r\\n  event VaultFactory(address newVaultFactory);\\r\\n\\r\\n  /// @notice role that can change communityFee and tickspacing in pools\\r\\n  /// @return The hash corresponding to this role\\r\\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /// @notice Returns `true` if `account` has been granted `role` or `account` is owner.\\r\\n  /// @param role The hash corresponding to the role\\r\\n  /// @param account The address for which the role is checked\\r\\n  /// @return bool Whether the address has this role or the owner role or not\\r\\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /// @notice Returns the current owner of the factory\\r\\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\\r\\n  /// @return The address of the factory owner\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the current poolDeployerAddress\\r\\n  /// @return The address of the poolDeployer\\r\\n  function poolDeployer() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the default community fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultCommunityFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default tickspacing\\r\\n  /// @return Tickspacing which will be set at the creation of the pool\\r\\n  function defaultTickspacing() external view returns (int24);\\r\\n\\r\\n  /// @notice Return the current pluginFactory address\\r\\n  /// @dev This contract is used to automatically set a plugin address in new liquidity pools\\r\\n  /// @return Algebra plugin factory\\r\\n  function defaultPluginFactory() external view returns (IAlgebraPluginFactory);\\r\\n\\r\\n  /// @notice Return the current vaultFactory address\\r\\n  /// @dev This contract is used to automatically set a vault address in new liquidity pools\\r\\n  /// @return Algebra vault factory\\r\\n  function vaultFactory() external view returns (IAlgebraVaultFactory);\\r\\n\\r\\n  /// @notice Returns the default communityFee, tickspacing, fee and communityFeeVault for pool\\r\\n  /// @param pool the address of liquidity pool\\r\\n  /// @return communityFee which will be set at the creation of the pool\\r\\n  /// @return tickSpacing which will be set at the creation of the pool\\r\\n  /// @return fee which will be set at the creation of the pool\\r\\n  /// @return communityFeeVault the address of communityFeeVault\\r\\n  function defaultConfigurationForPool(\\r\\n    address pool\\r\\n  ) external view returns (uint16 communityFee, int24 tickSpacing, uint16 fee, address communityFeeVault);\\r\\n\\r\\n  /// @notice Deterministically computes the pool address given the token0 and token1\\r\\n  /// @dev The method does not check if such a pool has been created\\r\\n  /// @param token0 first token\\r\\n  /// @param token1 second token\\r\\n  /// @return pool The contract address of the Algebra pool\\r\\n  function computePoolAddress(address token0, address token1) external view returns (address pool);\\r\\n\\r\\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\\r\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n  /// @param tokenA The contract address of either token0 or token1\\r\\n  /// @param tokenB The contract address of the other token\\r\\n  /// @return pool The pool address\\r\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\r\\n\\r\\n  /// @notice returns keccak256 of AlgebraPool init bytecode.\\r\\n  /// @dev the hash value changes with any change in the pool bytecode\\r\\n  /// @return Keccak256 hash of AlgebraPool contract init bytecode\\r\\n  function POOL_INIT_CODE_HASH() external view returns (bytes32);\\r\\n\\r\\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\\r\\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\\r\\n\\r\\n  /// @notice Creates a pool for the given two tokens\\r\\n  /// @param tokenA One of the two tokens in the desired pool\\r\\n  /// @param tokenB The other of the two tokens in the desired pool\\r\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\\r\\n  /// The call will revert if the pool already exists or the token arguments are invalid.\\r\\n  /// @return pool The address of the newly created pool\\r\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\r\\n\\r\\n  /// @dev updates default community fee for new pools\\r\\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\\r\\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external;\\r\\n\\r\\n  /// @dev updates default fee for new pools\\r\\n  /// @param newDefaultFee The new  fee, _must_ be <= MAX_DEFAULT_FEE\\r\\n  function setDefaultFee(uint16 newDefaultFee) external;\\r\\n\\r\\n  /// @dev updates default tickspacing for new pools\\r\\n  /// @param newDefaultTickspacing The new tickspacing, _must_ be <= MAX_TICK_SPACING and >= MIN_TICK_SPACING\\r\\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external;\\r\\n\\r\\n  /// @dev updates pluginFactory address\\r\\n  /// @param newDefaultPluginFactory address of new plugin factory\\r\\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external;\\r\\n\\r\\n  /// @dev updates vaultFactory address\\r\\n  /// @param newVaultFactory address of new vault factory\\r\\n  function setVaultFactory(address newVaultFactory) external;\\r\\n\\r\\n  /// @notice Starts process of renounceOwnership. After that, a certain period\\r\\n  /// of time must pass before the ownership renounce can be completed.\\r\\n  function startRenounceOwnership() external;\\r\\n\\r\\n  /// @notice Stops process of renounceOwnership and removes timer.\\r\\n  function stopRenounceOwnership() external;\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/IERC20Minimal.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title Minimal ERC20 interface for Algebra\\r\\n/// @notice Contains a subset of the full ERC20 interface that is used in Algebra\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IERC20Minimal {\\r\\n  /// @notice Returns the balance of a token\\r\\n  /// @param account The account for which to look up the number of tokens it has, i.e. its balance\\r\\n  /// @return The number of tokens held by the account\\r\\n  function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n  /// @notice Transfers the amount of token from the `msg.sender` to the recipient\\r\\n  /// @param recipient The account that will receive the amount transferred\\r\\n  /// @param amount The number of tokens to send from the sender to the recipient\\r\\n  /// @return Returns true for a successful transfer, false for an unsuccessful transfer\\r\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /// @notice Returns the current allowance given to a spender by an owner\\r\\n  /// @param owner The account of the token owner\\r\\n  /// @param spender The account of the token spender\\r\\n  /// @return The current allowance granted by `owner` to `spender`\\r\\n  function allowance(address owner, address spender) external view returns (uint256);\\r\\n\\r\\n  /// @notice Sets the allowance of a spender from the `msg.sender` to the value `amount`\\r\\n  /// @param spender The account which will be allowed to spend a given amount of the owners tokens\\r\\n  /// @param amount The amount of tokens allowed to be used by `spender`\\r\\n  /// @return Returns true for a successful approval, false for unsuccessful\\r\\n  function approve(address spender, uint256 amount) external returns (bool);\\r\\n\\r\\n  /// @notice Transfers `amount` tokens from `sender` to `recipient` up to the allowance given to the `msg.sender`\\r\\n  /// @param sender The account from which the transfer will be initiated\\r\\n  /// @param recipient The recipient of the transfer\\r\\n  /// @param amount The amount of the transfer\\r\\n  /// @return Returns true for a successful transfer, false for unsuccessful\\r\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\r\\n\\r\\n  /// @notice Event emitted when tokens are transferred from one address to another, either via `#transfer` or `#transferFrom`.\\r\\n  /// @param from The account from which the tokens were sent, i.e. the balance decreased\\r\\n  /// @param to The account to which the tokens were sent, i.e. the balance increased\\r\\n  /// @param value The amount of tokens that were transferred\\r\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\r\\n\\r\\n  /// @notice Event emitted when the approval amount for the spender of a given owner's tokens changes.\\r\\n  /// @param owner The account that approved spending of its tokens\\r\\n  /// @param spender The account for which the spending allowance was modified\\r\\n  /// @param value The new allowance from the owner to the spender\\r\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/libraries/Plugins.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title Contains logic and constants for interacting with the plugin through hooks\\r\\n/// @dev Allows pool to check which hooks are enabled, as well as control the return selector\\r\\nlibrary Plugins {\\r\\n  function hasFlag(uint8 pluginConfig, uint256 flag) internal pure returns (bool res) {\\r\\n    assembly {\\r\\n      res := gt(and(pluginConfig, flag), 0)\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function shouldReturn(bytes4 selector, bytes4 expectedSelector) internal pure {\\r\\n    if (selector != expectedSelector) revert IAlgebraPoolErrors.invalidHookResponse(expectedSelector);\\r\\n  }\\r\\n\\r\\n  uint256 internal constant BEFORE_SWAP_FLAG = 1;\\r\\n  uint256 internal constant AFTER_SWAP_FLAG = 1 << 1;\\r\\n  uint256 internal constant BEFORE_POSITION_MODIFY_FLAG = 1 << 2;\\r\\n  uint256 internal constant AFTER_POSITION_MODIFY_FLAG = 1 << 3;\\r\\n  uint256 internal constant BEFORE_FLASH_FLAG = 1 << 4;\\r\\n  uint256 internal constant AFTER_FLASH_FLAG = 1 << 5;\\r\\n  uint256 internal constant AFTER_INIT_FLAG = 1 << 6;\\r\\n  uint256 internal constant DYNAMIC_FEE = 1 << 7;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/base/AlgebraPoolBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../interfaces/callback/IAlgebraSwapCallback.sol';\\r\\nimport '../interfaces/callback/IAlgebraMintCallback.sol';\\r\\nimport '../interfaces/callback/IAlgebraFlashCallback.sol';\\r\\nimport '../interfaces/plugin/IAlgebraDynamicFeePlugin.sol';\\r\\nimport '../interfaces/IAlgebraPool.sol';\\r\\nimport '../interfaces/IAlgebraFactory.sol';\\r\\nimport '../interfaces/IAlgebraPoolDeployer.sol';\\r\\nimport '../interfaces/IERC20Minimal.sol';\\r\\n\\r\\nimport '../libraries/TickManagement.sol';\\r\\nimport '../libraries/SafeTransfer.sol';\\r\\nimport '../libraries/Constants.sol';\\r\\nimport '../libraries/Plugins.sol';\\r\\n\\r\\nimport './common/Timestamp.sol';\\r\\n\\r\\n/// @title Algebra pool base abstract contract\\r\\n/// @notice Contains state variables, immutables and common internal functions\\r\\n/// @dev Decoupling into a separate abstract contract simplifies testing\\r\\nabstract contract AlgebraPoolBase is IAlgebraPool, Timestamp {\\r\\n  using TickManagement for mapping(int24 => TickManagement.Tick);\\r\\n\\r\\n  /// @notice The struct with important state values of pool\\r\\n  /// @dev fits into one storage slot\\r\\n  /// @param price The square root of the current price in Q64.96 format\\r\\n  /// @param tick The current tick (price(tick) <= current price). May not always be equal to SqrtTickMath.getTickAtSqrtRatio(price) if the price is on a tick boundary\\r\\n  /// @param lastFee The current (last known) fee in hundredths of a bip, i.e. 1e-6 (so 100 is 0.01%). May be obsolete if using dynamic fee plugin\\r\\n  /// @param pluginConfig The current plugin config as bitmap. Each bit is responsible for enabling/disabling the hooks, the last bit turns on/off dynamic fees logic\\r\\n  /// @param communityFee The community fee represented as a percent of all collected fee in thousandths, i.e. 1e-3 (so 100 is 10%)\\r\\n  /// @param unlocked  Reentrancy lock flag, true if the pool currently is unlocked, otherwise - false\\r\\n  struct GlobalState {\\r\\n    uint160 price;\\r\\n    int24 tick;\\r\\n    uint16 lastFee;\\r\\n    uint8 pluginConfig;\\r\\n    uint16 communityFee;\\r\\n    bool unlocked;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  uint128 public constant override maxLiquidityPerTick = Constants.MAX_LIQUIDITY_PER_TICK;\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override factory;\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override token0;\\r\\n  /// @inheritdoc IAlgebraPoolImmutables\\r\\n  address public immutable override token1;\\r\\n\\r\\n  // ! IMPORTANT security note: the pool state can be manipulated\\r\\n  // ! external contracts using this data must prevent read-only reentrancy\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  uint256 public override totalFeeGrowth0Token;\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  uint256 public override totalFeeGrowth1Token;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  GlobalState public override globalState;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  mapping(int24 => TickManagement.Tick) public override ticks;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  uint32 public override communityFeeLastTimestamp;\\r\\n  /// @dev The amounts of token0 and token1 that will be sent to the vault\\r\\n  uint104 internal communityFeePending0;\\r\\n  uint104 internal communityFeePending1;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  address public override plugin;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  address public override communityVault;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  mapping(int16 => uint256) public override tickTable;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  int24 public override nextTickGlobal;\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  int24 public override prevTickGlobal;\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  uint128 public override liquidity;\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  int24 public override tickSpacing;\\r\\n  // shares one slot with TickStructure.tickTreeRoot\\r\\n\\r\\n  /// @notice Check that the lower and upper ticks do not violate the boundaries of allowed ticks and are specified in the correct order\\r\\n  modifier onlyValidTicks(int24 bottomTick, int24 topTick) {\\r\\n    TickManagement.checkTickRangeValidity(bottomTick, topTick);\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor() {\\r\\n    address _plugin;\\r\\n    (_plugin, factory, token0, token1) = _getDeployParameters();\\r\\n    (prevTickGlobal, nextTickGlobal) = (TickMath.MIN_TICK, TickMath.MAX_TICK);\\r\\n    globalState.unlocked = true;\\r\\n    if (_plugin != address(0)) {\\r\\n      _setPlugin(_plugin);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  /// @dev safe from read-only reentrancy getter function\\r\\n  function safelyGetStateOfAMM()\\r\\n    external\\r\\n    view\\r\\n    override\\r\\n    returns (uint160 sqrtPrice, int24 tick, uint16 lastFee, uint8 pluginConfig, uint128 activeLiquidity, int24 nextTick, int24 previousTick)\\r\\n  {\\r\\n    sqrtPrice = globalState.price;\\r\\n    tick = globalState.tick;\\r\\n    lastFee = globalState.lastFee;\\r\\n    pluginConfig = globalState.pluginConfig;\\r\\n    bool unlocked = globalState.unlocked;\\r\\n    if (!unlocked) revert IAlgebraPoolErrors.locked();\\r\\n\\r\\n    activeLiquidity = liquidity;\\r\\n    nextTick = nextTickGlobal;\\r\\n    previousTick = prevTickGlobal;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  function isUnlocked() external view override returns (bool unlocked) {\\r\\n    return globalState.unlocked;\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  function getCommunityFeePending() external view override returns (uint128, uint128) {\\r\\n    return (communityFeePending0, communityFeePending1);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  function fee() external view override returns (uint16 currentFee) {\\r\\n    currentFee = globalState.lastFee;\\r\\n    uint8 pluginConfig = globalState.pluginConfig;\\r\\n\\r\\n    if (Plugins.hasFlag(pluginConfig, Plugins.DYNAMIC_FEE)) return IAlgebraDynamicFeePlugin(plugin).getCurrentFee();\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the parameter values ​​for creating the pool. They are not passed in the constructor to make it easier to use create2 opcode\\r\\n  /// Can be overridden in tests\\r\\n  function _getDeployParameters() internal virtual returns (address, address, address, address) {\\r\\n    return IAlgebraPoolDeployer(msg.sender).getDeployParameters();\\r\\n  }\\r\\n\\r\\n  /// @dev Gets the default settings for pool initialization. Can be overridden in tests\\r\\n  function _getDefaultConfiguration() internal virtual returns (uint16, int24, uint16, address) {\\r\\n    return IAlgebraFactory(factory).defaultConfigurationForPool(address(this));\\r\\n  }\\r\\n\\r\\n  // The main external calls that are used by the pool. Can be overridden in tests\\r\\n\\r\\n  function _balanceToken0() internal view virtual returns (uint256) {\\r\\n    return IERC20Minimal(token0).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function _balanceToken1() internal view virtual returns (uint256) {\\r\\n    return IERC20Minimal(token1).balanceOf(address(this));\\r\\n  }\\r\\n\\r\\n  function _transfer(address token, address to, uint256 amount) internal virtual {\\r\\n    SafeTransfer.safeTransfer(token, to, amount);\\r\\n  }\\r\\n\\r\\n  // These 'callback' functions are wrappers over the callbacks that the pool calls on the msg.sender\\r\\n  // These methods can be overridden in tests\\r\\n\\r\\n  /// @dev Using function to save bytecode\\r\\n  function _swapCallback(int256 amount0, int256 amount1, bytes calldata data) internal virtual {\\r\\n    IAlgebraSwapCallback(msg.sender).algebraSwapCallback(amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  function _mintCallback(uint256 amount0, uint256 amount1, bytes calldata data) internal virtual {\\r\\n    IAlgebraMintCallback(msg.sender).algebraMintCallback(amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  function _flashCallback(uint256 fee0, uint256 fee1, bytes calldata data) internal virtual {\\r\\n    IAlgebraFlashCallback(msg.sender).algebraFlashCallback(fee0, fee1, data);\\r\\n  }\\r\\n\\r\\n  // This virtual function is implemented in TickStructure and used in Positions\\r\\n  /// @dev Add or remove a pair of ticks to the corresponding data structure\\r\\n  function _addOrRemoveTicks(int24 bottomTick, int24 topTick, bool toggleBottom, bool toggleTop, int24 currentTick, bool remove) internal virtual;\\r\\n\\r\\n  function _setCommunityFee(uint16 _communityFee) internal {\\r\\n    globalState.communityFee = _communityFee;\\r\\n    emit CommunityFee(_communityFee);\\r\\n  }\\r\\n\\r\\n  function _setCommunityFeeVault(address _communityFeeVault) internal {\\r\\n    communityVault = _communityFeeVault;\\r\\n    emit CommunityVault(_communityFeeVault);\\r\\n  }\\r\\n\\r\\n  function _setFee(uint16 _fee) internal {\\r\\n    globalState.lastFee = _fee;\\r\\n    emit Fee(_fee);\\r\\n  }\\r\\n\\r\\n  function _setTickSpacing(int24 _tickSpacing) internal {\\r\\n    tickSpacing = _tickSpacing;\\r\\n    emit TickSpacing(_tickSpacing);\\r\\n  }\\r\\n\\r\\n  function _setPlugin(address _plugin) internal {\\r\\n    plugin = _plugin;\\r\\n    emit Plugin(_plugin);\\r\\n  }\\r\\n\\r\\n  function _setPluginConfig(uint8 _pluginConfig) internal {\\r\\n    globalState.pluginConfig = _pluginConfig;\\r\\n    emit PluginConfig(_pluginConfig);\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/base/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './AlgebraPoolBase.sol';\\r\\n\\r\\n/// @title Algebra reentrancy protection\\r\\n/// @notice Provides a modifier that protects against reentrancy\\r\\nabstract contract ReentrancyGuard is AlgebraPoolBase {\\r\\n  /// @notice checks that reentrancy lock is unlocked\\r\\n  modifier onlyUnlocked() {\\r\\n    _checkUnlocked();\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @dev using private function to save bytecode\\r\\n  function _checkUnlocked() internal view {\\r\\n    if (!globalState.unlocked) revert IAlgebraPoolErrors.locked();\\r\\n  }\\r\\n\\r\\n  /// @dev using private function to save bytecode\\r\\n  function _lock() internal {\\r\\n    if (!globalState.unlocked) revert IAlgebraPoolErrors.locked();\\r\\n    globalState.unlocked = false;\\r\\n  }\\r\\n\\r\\n  /// @dev using private function to save bytecode\\r\\n  function _unlock() internal {\\r\\n    globalState.unlocked = true;\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/libraries/LowGasSafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Optimized overflow and underflow safe math operations\\r\\n/// @notice Contains methods for doing math operations that revert on overflow or underflow for minimal gas cost\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/blob/main/contracts/libraries\\r\\nlibrary LowGasSafeMath {\\r\\n  /// @notice Returns x + y, reverts if sum overflows uint256\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    unchecked {\\r\\n      require((z = x + y) >= x);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    unchecked {\\r\\n      require((z = x - y) <= x);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x * y, reverts if overflows\\r\\n  /// @param x The multiplicand\\r\\n  /// @param y The multiplier\\r\\n  /// @return z The product of x and y\\r\\n  function mul(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    unchecked {\\r\\n      require(x == 0 || (z = x * y) / x == y);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    unchecked {\\r\\n      require((z = x + y) >= x == (y >= 0));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x - y, reverts if overflows or underflows\\r\\n  /// @param x The minuend\\r\\n  /// @param y The subtrahend\\r\\n  /// @return z The difference of x and y\\r\\n  function sub(int256 x, int256 y) internal pure returns (int256 z) {\\r\\n    unchecked {\\r\\n      require((z = x - y) <= x == (y >= 0));\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns x + y, reverts if overflows or underflows\\r\\n  /// @param x The augend\\r\\n  /// @param y The addend\\r\\n  /// @return z The sum of x and y\\r\\n  function add128(uint128 x, uint128 y) internal pure returns (uint128 z) {\\r\\n    unchecked {\\r\\n      require((z = x + y) >= x);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/libraries/PriceMovementMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\nimport './FullMath.sol';\\r\\nimport './LowGasSafeMath.sol';\\r\\nimport './TokenDeltaMath.sol';\\r\\nimport './Constants.sol';\\r\\n\\r\\n/// @title Computes the result of price movement\\r\\n/// @notice Contains methods for computing the result of price movement within a single tick price range.\\r\\nlibrary PriceMovementMath {\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an input amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0, or if the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price, i.e., before accounting for the input amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param input How much of token0, or token1, is being swapped in\\r\\n  /// @param zeroToOne Whether the amount in is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after adding the input amount to token0 or token1\\r\\n  function getNewPriceAfterInput(uint160 price, uint128 liquidity, uint256 input, bool zeroToOne) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, input, zeroToOne, true);\\r\\n  }\\r\\n\\r\\n  /// @notice Gets the next sqrt price given an output amount of token0 or token1\\r\\n  /// @dev Throws if price or liquidity are 0 or the next price is out of bounds\\r\\n  /// @param price The starting Q64.96 sqrt price before accounting for the output amount\\r\\n  /// @param liquidity The amount of usable liquidity\\r\\n  /// @param output How much of token0, or token1, is being swapped out\\r\\n  /// @param zeroToOne Whether the amount out is token0 or token1\\r\\n  /// @return resultPrice The Q64.96 sqrt price after removing the output amount of token0 or token1\\r\\n  function getNewPriceAfterOutput(uint160 price, uint128 liquidity, uint256 output, bool zeroToOne) internal pure returns (uint160 resultPrice) {\\r\\n    return getNewPrice(price, liquidity, output, zeroToOne, false);\\r\\n  }\\r\\n\\r\\n  function getNewPrice(uint160 price, uint128 liquidity, uint256 amount, bool zeroToOne, bool fromInput) internal pure returns (uint160 resultPrice) {\\r\\n    unchecked {\\r\\n      require(price != 0);\\r\\n      require(liquidity != 0);\\r\\n      if (amount == 0) return price;\\r\\n\\r\\n      if (zeroToOne == fromInput) {\\r\\n        // rounding up or down\\r\\n        uint256 liquidityShifted = uint256(liquidity) << Constants.RESOLUTION;\\r\\n\\r\\n        if (fromInput) {\\r\\n          uint256 product;\\r\\n          if ((product = amount * price) / amount == price) {\\r\\n            uint256 denominator = liquidityShifted + product;\\r\\n            if (denominator >= liquidityShifted) return uint160(FullMath.mulDivRoundingUp(liquidityShifted, price, denominator)); // always fits in 160 bits\\r\\n          }\\r\\n\\r\\n          return uint160(FullMath.unsafeDivRoundingUp(liquidityShifted, (liquidityShifted / price).add(amount))); // denominator always > 0\\r\\n        } else {\\r\\n          uint256 product;\\r\\n          require((product = amount * price) / amount == price); // if the product overflows, we know the denominator underflows\\r\\n          require(liquidityShifted > product); // in addition, we must check that the denominator does not underflow\\r\\n          return FullMath.mulDivRoundingUp(liquidityShifted, price, liquidityShifted - product).toUint160();\\r\\n        }\\r\\n      } else {\\r\\n        // if we're adding (subtracting), rounding down requires rounding the quotient down (up)\\r\\n        // in both cases, avoid a mulDiv for most inputs\\r\\n        if (fromInput) {\\r\\n          return\\r\\n            uint256(price)\\r\\n              .add(amount <= type(uint160).max ? (amount << Constants.RESOLUTION) / liquidity : FullMath.mulDiv(amount, Constants.Q96, liquidity))\\r\\n              .toUint160();\\r\\n        } else {\\r\\n          uint256 quotient = amount <= type(uint160).max\\r\\n            ? FullMath.unsafeDivRoundingUp(amount << Constants.RESOLUTION, liquidity) // denominator always > 0\\r\\n            : FullMath.mulDivRoundingUp(amount, Constants.Q96, liquidity);\\r\\n\\r\\n          require(price > quotient);\\r\\n          return uint160(price - quotient); // always fits 160 bits\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function getInputTokenDelta01(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(to, from, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getInputTokenDelta10(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(from, to, liquidity, true);\\r\\n  }\\r\\n\\r\\n  function getOutputTokenDelta01(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken1Delta(to, from, liquidity, false);\\r\\n  }\\r\\n\\r\\n  function getOutputTokenDelta10(uint160 to, uint160 from, uint128 liquidity) internal pure returns (uint256) {\\r\\n    return TokenDeltaMath.getToken0Delta(from, to, liquidity, false);\\r\\n  }\\r\\n\\r\\n  /// @notice Computes the result of swapping some amount in, or amount out, given the parameters of the swap\\r\\n  /// @dev The fee, plus the amount in, will never exceed the amount remaining if the swap's `amountSpecified` is positive\\r\\n  /// @param zeroToOne The direction of price movement\\r\\n  /// @param currentPrice The current Q64.96 sqrt price of the pool\\r\\n  /// @param targetPrice The Q64.96 sqrt price that cannot be exceeded, from which the direction of the swap is inferred\\r\\n  /// @param liquidity The usable liquidity\\r\\n  /// @param amountAvailable How much input or output amount is remaining to be swapped in/out\\r\\n  /// @param fee The fee taken from the input amount, expressed in hundredths of a bip\\r\\n  /// @return resultPrice The Q64.96 sqrt price after swapping the amount in/out, not to exceed the price target\\r\\n  /// @return input The amount to be swapped in, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return output The amount to be received, of either token0 or token1, based on the direction of the swap\\r\\n  /// @return feeAmount The amount of input that will be taken as a fee\\r\\n  function movePriceTowardsTarget(\\r\\n    bool zeroToOne,\\r\\n    uint160 currentPrice,\\r\\n    uint160 targetPrice,\\r\\n    uint128 liquidity,\\r\\n    int256 amountAvailable,\\r\\n    uint16 fee\\r\\n  ) internal pure returns (uint160 resultPrice, uint256 input, uint256 output, uint256 feeAmount) {\\r\\n    unchecked {\\r\\n      function(uint160, uint160, uint128) pure returns (uint256) getInputTokenAmount = zeroToOne ? getInputTokenDelta01 : getInputTokenDelta10;\\r\\n\\r\\n      if (amountAvailable >= 0) {\\r\\n        // exactIn or not\\r\\n        uint256 amountAvailableAfterFee = FullMath.mulDiv(uint256(amountAvailable), Constants.FEE_DENOMINATOR - fee, Constants.FEE_DENOMINATOR);\\r\\n        input = getInputTokenAmount(targetPrice, currentPrice, liquidity);\\r\\n        if (amountAvailableAfterFee >= input) {\\r\\n          resultPrice = targetPrice;\\r\\n          feeAmount = FullMath.mulDivRoundingUp(input, fee, Constants.FEE_DENOMINATOR - fee);\\r\\n        } else {\\r\\n          resultPrice = getNewPriceAfterInput(currentPrice, liquidity, amountAvailableAfterFee, zeroToOne);\\r\\n          assert(targetPrice != resultPrice); // should always be true\\r\\n\\r\\n          input = getInputTokenAmount(resultPrice, currentPrice, liquidity);\\r\\n          // we didn't reach the target, so take the remainder of the maximum input as fee\\r\\n          feeAmount = uint256(amountAvailable) - input; // input <= amountAvailable due to used formulas. This invariant is checked by fuzzy tests\\r\\n        }\\r\\n\\r\\n        output = (zeroToOne ? getOutputTokenDelta01 : getOutputTokenDelta10)(resultPrice, currentPrice, liquidity);\\r\\n      } else {\\r\\n        function(uint160, uint160, uint128) pure returns (uint256) getOutputTokenAmount = zeroToOne ? getOutputTokenDelta01 : getOutputTokenDelta10;\\r\\n\\r\\n        output = getOutputTokenAmount(targetPrice, currentPrice, liquidity);\\r\\n        amountAvailable = -amountAvailable;\\r\\n        if (amountAvailable < 0) revert IAlgebraPoolErrors.invalidAmountRequired(); // in case of type(int256).min\\r\\n\\r\\n        if (uint256(amountAvailable) >= output) resultPrice = targetPrice;\\r\\n        else {\\r\\n          resultPrice = getNewPriceAfterOutput(currentPrice, liquidity, uint256(amountAvailable), zeroToOne);\\r\\n\\r\\n          // should be always true if the price is in the allowed range\\r\\n          if (targetPrice != resultPrice) output = getOutputTokenAmount(resultPrice, currentPrice, liquidity);\\r\\n\\r\\n          // cap the output amount to not exceed the remaining output amount\\r\\n          if (output > uint256(amountAvailable)) output = uint256(amountAvailable);\\r\\n        }\\r\\n\\r\\n        input = getInputTokenAmount(resultPrice, currentPrice, liquidity);\\r\\n        feeAmount = FullMath.mulDivRoundingUp(input, fee, Constants.FEE_DENOMINATOR - fee);\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/base/SwapCalculation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../libraries/PriceMovementMath.sol';\\r\\nimport '../libraries/LowGasSafeMath.sol';\\r\\nimport '../libraries/SafeCast.sol';\\r\\nimport './AlgebraPoolBase.sol';\\r\\n\\r\\n/// @title Algebra swap calculation abstract contract\\r\\n/// @notice Contains _calculateSwap encapsulating internal logic of swaps\\r\\nabstract contract SwapCalculation is AlgebraPoolBase {\\r\\n  using TickManagement for mapping(int24 => TickManagement.Tick);\\r\\n  using SafeCast for uint256;\\r\\n  using LowGasSafeMath for uint256;\\r\\n  using LowGasSafeMath for int256;\\r\\n\\r\\n  struct SwapCalculationCache {\\r\\n    uint256 communityFee; // The community fee of the selling token, uint256 to minimize casts\\r\\n    bool crossedAnyTick; //  If we have already crossed at least one active tick\\r\\n    int256 amountRequiredInitial; // The initial value of the exact input\\\\output amount\\r\\n    int256 amountCalculated; // The additive amount of total output\\\\input calculated through the swap\\r\\n    uint256 totalFeeGrowthInput; // The initial totalFeeGrowth + the fee growth during a swap\\r\\n    uint256 totalFeeGrowthOutput; // The initial totalFeeGrowth for output token, should not change during swap\\r\\n    bool exactInput; // Whether the exact input or output is specified\\r\\n    uint16 fee; // The current fee value in hundredths of a bip, i.e. 1e-6\\r\\n    int24 prevInitializedTick; // The previous initialized tick in linked list\\r\\n    int24 nextInitializedTick; // The next initialized tick in linked list\\r\\n  }\\r\\n\\r\\n  struct PriceMovementCache {\\r\\n    uint256 stepSqrtPrice; // The Q64.96 sqrt of the price at the start of the step, uint256 to minimize casts\\r\\n    uint256 nextTickPrice; // The Q64.96 sqrt of the price calculated from the _nextTick_, uint256 to minimize casts\\r\\n    uint256 input; // The additive amount of tokens that have been provided\\r\\n    uint256 output; // The additive amount of token that have been withdrawn\\r\\n    uint256 feeAmount; // The total amount of fee earned within a current step\\r\\n  }\\r\\n\\r\\n  function _calculateSwap(\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice\\r\\n  ) internal returns (int256 amount0, int256 amount1, uint160 currentPrice, int24 currentTick, uint128 currentLiquidity, uint256 communityFeeAmount) {\\r\\n    if (amountRequired == 0) revert zeroAmountRequired();\\r\\n    if (amountRequired == type(int256).min) revert invalidAmountRequired(); // to avoid problems when changing sign\\r\\n\\r\\n    SwapCalculationCache memory cache;\\r\\n    (cache.amountRequiredInitial, cache.exactInput) = (amountRequired, amountRequired > 0);\\r\\n\\r\\n    // load from one storage slot\\r\\n    (currentLiquidity, cache.prevInitializedTick, cache.nextInitializedTick) = (liquidity, prevTickGlobal, nextTickGlobal);\\r\\n\\r\\n    // load from one storage slot too\\r\\n    (currentPrice, currentTick, cache.fee, cache.communityFee) = (globalState.price, globalState.tick, globalState.lastFee, globalState.communityFee);\\r\\n    if (currentPrice == 0) revert notInitialized();\\r\\n\\r\\n    if (zeroToOne) {\\r\\n      if (limitSqrtPrice >= currentPrice || limitSqrtPrice <= TickMath.MIN_SQRT_RATIO) revert invalidLimitSqrtPrice();\\r\\n      cache.totalFeeGrowthInput = totalFeeGrowth0Token;\\r\\n    } else {\\r\\n      if (limitSqrtPrice <= currentPrice || limitSqrtPrice >= TickMath.MAX_SQRT_RATIO) revert invalidLimitSqrtPrice();\\r\\n      cache.totalFeeGrowthInput = totalFeeGrowth1Token;\\r\\n    }\\r\\n\\r\\n    PriceMovementCache memory step;\\r\\n    unchecked {\\r\\n      // swap until there is remaining input or output tokens or we reach the price limit\\r\\n      do {\\r\\n        int24 nextTick = zeroToOne ? cache.prevInitializedTick : cache.nextInitializedTick;\\r\\n        step.stepSqrtPrice = currentPrice;\\r\\n        step.nextTickPrice = TickMath.getSqrtRatioAtTick(nextTick);\\r\\n\\r\\n        (currentPrice, step.input, step.output, step.feeAmount) = PriceMovementMath.movePriceTowardsTarget(\\r\\n          zeroToOne, // if zeroToOne then the price is moving down\\r\\n          currentPrice,\\r\\n          (zeroToOne == (step.nextTickPrice < limitSqrtPrice)) // move the price to the nearest of the next tick and the limit price\\r\\n            ? limitSqrtPrice\\r\\n            : uint160(step.nextTickPrice), // cast is safe\\r\\n          currentLiquidity,\\r\\n          amountRequired,\\r\\n          cache.fee\\r\\n        );\\r\\n\\r\\n        if (cache.exactInput) {\\r\\n          amountRequired -= (step.input + step.feeAmount).toInt256(); // decrease remaining input amount\\r\\n          cache.amountCalculated = cache.amountCalculated.sub(step.output.toInt256()); // decrease calculated output amount\\r\\n        } else {\\r\\n          amountRequired += step.output.toInt256(); // increase remaining output amount (since its negative)\\r\\n          cache.amountCalculated = cache.amountCalculated.add((step.input + step.feeAmount).toInt256()); // increase calculated input amount\\r\\n        }\\r\\n\\r\\n        if (cache.communityFee > 0) {\\r\\n          uint256 delta = (step.feeAmount.mul(cache.communityFee)) / Constants.COMMUNITY_FEE_DENOMINATOR;\\r\\n          step.feeAmount -= delta;\\r\\n          communityFeeAmount += delta;\\r\\n        }\\r\\n\\r\\n        if (currentLiquidity > 0) cache.totalFeeGrowthInput += FullMath.mulDiv(step.feeAmount, Constants.Q128, currentLiquidity);\\r\\n\\r\\n        // min or max tick can not be crossed due to limitSqrtPrice check\\r\\n        if (currentPrice == step.nextTickPrice) {\\r\\n          // crossing tick\\r\\n          if (!cache.crossedAnyTick) {\\r\\n            cache.crossedAnyTick = true;\\r\\n            cache.totalFeeGrowthOutput = zeroToOne ? totalFeeGrowth1Token : totalFeeGrowth0Token;\\r\\n          }\\r\\n\\r\\n          int128 liquidityDelta;\\r\\n          if (zeroToOne) {\\r\\n            (liquidityDelta, cache.prevInitializedTick, ) = ticks.cross(nextTick, cache.totalFeeGrowthInput, cache.totalFeeGrowthOutput);\\r\\n            liquidityDelta = -liquidityDelta;\\r\\n            (currentTick, cache.nextInitializedTick) = (nextTick - 1, nextTick);\\r\\n          } else {\\r\\n            (liquidityDelta, , cache.nextInitializedTick) = ticks.cross(nextTick, cache.totalFeeGrowthOutput, cache.totalFeeGrowthInput);\\r\\n            (currentTick, cache.prevInitializedTick) = (nextTick, nextTick);\\r\\n          }\\r\\n          currentLiquidity = LiquidityMath.addDelta(currentLiquidity, liquidityDelta);\\r\\n        } else if (currentPrice != step.stepSqrtPrice) {\\r\\n          currentTick = TickMath.getTickAtSqrtRatio(currentPrice); // the price has changed but hasn't reached the target\\r\\n          break; // since the price hasn't reached the target, amountRequired should be 0\\r\\n        }\\r\\n      } while (amountRequired != 0 && currentPrice != limitSqrtPrice); // check stop condition\\r\\n\\r\\n      int256 amountSpent = cache.amountRequiredInitial - amountRequired; // spent amount could be less than initially specified (e.g. reached limit)\\r\\n      (amount0, amount1) = zeroToOne == cache.exactInput ? (amountSpent, cache.amountCalculated) : (cache.amountCalculated, amountSpent);\\r\\n    }\\r\\n\\r\\n    (globalState.price, globalState.tick) = (currentPrice, currentTick);\\r\\n\\r\\n    if (cache.crossedAnyTick) {\\r\\n      (liquidity, prevTickGlobal, nextTickGlobal) = (currentLiquidity, cache.prevInitializedTick, cache.nextInitializedTick);\\r\\n    }\\r\\n    if (zeroToOne) {\\r\\n      totalFeeGrowth0Token = cache.totalFeeGrowthInput;\\r\\n    } else {\\r\\n      totalFeeGrowth1Token = cache.totalFeeGrowthInput;\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/base/ReservesManager.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../libraries/SafeCast.sol';\\r\\nimport './AlgebraPoolBase.sol';\\r\\n\\r\\n/// @title Algebra reserves management abstract contract\\r\\n/// @notice Encapsulates logic for tracking and changing pool reserves\\r\\n/// @dev The reserve mechanism allows the pool to keep track of unexpected increases in balances\\r\\nabstract contract ReservesManager is AlgebraPoolBase {\\r\\n  using SafeCast for uint256;\\r\\n\\r\\n  /// @dev The tracked token0 and token1 reserves of pool\\r\\n  uint128 internal reserve0;\\r\\n  uint128 internal reserve1;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  function getReserves() external view returns (uint128, uint128) {\\r\\n    return (reserve0, reserve1);\\r\\n  }\\r\\n\\r\\n  /// @dev updates reserves data and distributes excess in the form of fee to liquidity providers.\\r\\n  /// If any of the balances is greater than uint128, the excess is sent to the communityVault\\r\\n  function _updateReserves() internal returns (uint256 balance0, uint256 balance1) {\\r\\n    (balance0, balance1) = (_balanceToken0(), _balanceToken1());\\r\\n    // we do not support tokens with totalSupply > type(uint128).max, so any excess will be sent to communityVault\\r\\n    // this situation can only occur if the tokens are sent directly to the pool from outside\\r\\n    // **such excessive tokens will be burned if there is no communityVault connected**\\r\\n    if (balance0 > type(uint128).max || balance1 > type(uint128).max) {\\r\\n      unchecked {\\r\\n        address _communityVault = communityVault;\\r\\n        if (balance0 > type(uint128).max) {\\r\\n          _transfer(token0, _communityVault, balance0 - type(uint128).max);\\r\\n          balance0 = type(uint128).max;\\r\\n        }\\r\\n        if (balance1 > type(uint128).max) {\\r\\n          _transfer(token1, _communityVault, balance1 - type(uint128).max);\\r\\n          balance1 = type(uint128).max;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n\\r\\n    uint128 _liquidity = liquidity;\\r\\n    if (_liquidity == 0) return (balance0, balance1);\\r\\n\\r\\n    (uint128 _reserve0, uint128 _reserve1) = (reserve0, reserve1);\\r\\n    (bool hasExcessToken0, bool hasExcessToken1) = (balance0 > _reserve0, balance1 > _reserve1);\\r\\n    if (hasExcessToken0 || hasExcessToken1) {\\r\\n      unchecked {\\r\\n        if (hasExcessToken0) totalFeeGrowth0Token += FullMath.mulDiv(balance0 - _reserve0, Constants.Q128, _liquidity);\\r\\n        if (hasExcessToken1) totalFeeGrowth1Token += FullMath.mulDiv(balance1 - _reserve1, Constants.Q128, _liquidity);\\r\\n        (reserve0, reserve1) = (uint128(balance0), uint128(balance1));\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Applies deltas to reserves and pays communityFees\\r\\n  /// @dev Community fee is sent to the vault at a specified frequency or when variables communityFeePending{0,1} overflow\\r\\n  /// @param deltaR0 Amount of token0 to add/subtract to/from reserve0, must not exceed uint128\\r\\n  /// @param deltaR1 Amount of token1 to add/subtract to/from reserve1, must not exceed uint128\\r\\n  /// @param communityFee0 Amount of token0 to pay as communityFee, must not exceed uint128\\r\\n  /// @param communityFee1 Amount of token1 to pay as communityFee, must not exceed uint128\\r\\n  function _changeReserves(int256 deltaR0, int256 deltaR1, uint256 communityFee0, uint256 communityFee1) internal {\\r\\n    if (communityFee0 | communityFee1 != 0) {\\r\\n      unchecked {\\r\\n        // overflow is desired since we do not support tokens with totalSupply > type(uint128).max\\r\\n        uint256 _cfPending0 = uint256(communityFeePending0) + communityFee0;\\r\\n        uint256 _cfPending1 = uint256(communityFeePending1) + communityFee1;\\r\\n        uint32 currentTimestamp = _blockTimestamp();\\r\\n        // underflow in timestamps is desired\\r\\n        if (\\r\\n          currentTimestamp - communityFeeLastTimestamp >= Constants.COMMUNITY_FEE_TRANSFER_FREQUENCY ||\\r\\n          _cfPending0 > type(uint104).max ||\\r\\n          _cfPending1 > type(uint104).max\\r\\n        ) {\\r\\n          address _communityVault = communityVault;\\r\\n          if (_cfPending0 > 0) _transfer(token0, _communityVault, _cfPending0);\\r\\n          if (_cfPending1 > 0) _transfer(token1, _communityVault, _cfPending1);\\r\\n          communityFeeLastTimestamp = currentTimestamp;\\r\\n          (deltaR0, deltaR1) = (deltaR0 - _cfPending0.toInt256(), deltaR1 - _cfPending1.toInt256());\\r\\n          (_cfPending0, _cfPending1) = (0, 0);\\r\\n        }\\r\\n        // the previous block guarantees that no overflow occurs\\r\\n        (communityFeePending0, communityFeePending1) = (uint104(_cfPending0), uint104(_cfPending1));\\r\\n      }\\r\\n    }\\r\\n\\r\\n    if (deltaR0 | deltaR1 == 0) return;\\r\\n    (uint256 _reserve0, uint256 _reserve1) = (reserve0, reserve1);\\r\\n    if (deltaR0 != 0) _reserve0 = (uint256(int256(_reserve0) + deltaR0)).toUint128();\\r\\n    if (deltaR1 != 0) _reserve1 = (uint256(int256(_reserve1) + deltaR1)).toUint128();\\r\\n    (reserve0, reserve1) = (uint128(_reserve0), uint128(_reserve1));\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/libraries/TickTree.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './TickMath.sol';\\r\\n\\r\\n/// @title Packed tick initialized state library\\r\\n/// @notice Stores a packed mapping of tick index to its initialized state and search tree\\r\\n/// @dev The leafs mapping uses int16 for keys since ticks are represented as int24 and there are 256 (2^8) values per word.\\r\\nlibrary TickTree {\\r\\n  int16 internal constant SECOND_LAYER_OFFSET = 3466; // ceil(-MIN_TICK / 256)\\r\\n\\r\\n  /// @notice Toggles the initialized state for a given tick from false to true, or vice versa\\r\\n  /// @param leafs The mapping of words with ticks\\r\\n  /// @param secondLayer The mapping of words with leafs\\r\\n  /// @param treeRoot The word with info about active subtrees\\r\\n  /// @param tick The tick to toggle\\r\\n  function toggleTick(\\r\\n    mapping(int16 => uint256) storage leafs,\\r\\n    mapping(int16 => uint256) storage secondLayer,\\r\\n    uint32 treeRoot,\\r\\n    int24 tick\\r\\n  ) internal returns (uint32 newTreeRoot) {\\r\\n    newTreeRoot = treeRoot;\\r\\n    (bool toggledNode, int16 nodeIndex) = _toggleBitInNode(leafs, tick); // toggle in leaf\\r\\n    if (toggledNode) {\\r\\n      unchecked {\\r\\n        (toggledNode, nodeIndex) = _toggleBitInNode(secondLayer, nodeIndex + SECOND_LAYER_OFFSET);\\r\\n      }\\r\\n      if (toggledNode) {\\r\\n        assembly {\\r\\n          newTreeRoot := xor(newTreeRoot, shl(nodeIndex, 1))\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Toggles a bit in a tree layer by its index\\r\\n  /// @param treeLevel The level of tree\\r\\n  /// @param bitIndex The end-to-end index of a bit in a layer of tree\\r\\n  /// @return toggledNode Toggled whole node or not\\r\\n  /// @return nodeIndex Number of corresponding node\\r\\n  function _toggleBitInNode(mapping(int16 => uint256) storage treeLevel, int24 bitIndex) private returns (bool toggledNode, int16 nodeIndex) {\\r\\n    assembly {\\r\\n      nodeIndex := sar(8, bitIndex)\\r\\n    }\\r\\n    uint256 node = treeLevel[nodeIndex];\\r\\n    assembly {\\r\\n      toggledNode := iszero(node)\\r\\n      node := xor(node, shl(and(bitIndex, 0xFF), 1))\\r\\n      toggledNode := xor(toggledNode, iszero(node))\\r\\n    }\\r\\n    treeLevel[nodeIndex] = node;\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the next initialized tick in tree to the right (gte) of the given tick or `MAX_TICK`\\r\\n  /// @param leafs The words with ticks\\r\\n  /// @param secondLayer The words with info about active leafs\\r\\n  /// @param treeRoot The word with info about active subtrees\\r\\n  /// @param tick The starting tick\\r\\n  /// @return nextTick The next initialized tick or `MAX_TICK`\\r\\n  function getNextTick(\\r\\n    mapping(int16 => uint256) storage leafs,\\r\\n    mapping(int16 => uint256) storage secondLayer,\\r\\n    uint32 treeRoot,\\r\\n    int24 tick\\r\\n  ) internal view returns (int24 nextTick) {\\r\\n    unchecked {\\r\\n      tick++; // start searching from the next tick\\r\\n      int16 nodeIndex;\\r\\n      assembly {\\r\\n        // index in treeRoot\\r\\n        nodeIndex := shr(8, add(sar(8, tick), SECOND_LAYER_OFFSET))\\r\\n      }\\r\\n      bool initialized;\\r\\n      // if subtree has active ticks\\r\\n      if (treeRoot & (1 << uint16(nodeIndex)) != 0) {\\r\\n        // try to find initialized tick in the corresponding leaf of the tree\\r\\n        (nodeIndex, nextTick, initialized) = _nextActiveBitInSameNode(leafs, tick);\\r\\n        if (initialized) return nextTick;\\r\\n\\r\\n        // try to find next initialized leaf in the tree\\r\\n        (nodeIndex, nextTick, initialized) = _nextActiveBitInSameNode(secondLayer, nodeIndex + SECOND_LAYER_OFFSET + 1);\\r\\n      }\\r\\n      if (!initialized) {\\r\\n        // try to find which subtree has an active leaf\\r\\n        // nodeIndex is now the index of the second level node\\r\\n        (nextTick, initialized) = _nextActiveBitInWord(treeRoot, ++nodeIndex);\\r\\n        if (!initialized) return TickMath.MAX_TICK;\\r\\n        nextTick = _firstActiveBitInNode(secondLayer, nextTick); // we found a second level node that has a leaf with an active tick\\r\\n      }\\r\\n      nextTick = _firstActiveBitInNode(leafs, nextTick - SECOND_LAYER_OFFSET);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the index of the next active bit in the same tree node\\r\\n  /// @param treeLevel The level of search tree\\r\\n  /// @param bitIndex The starting bit index\\r\\n  /// @return nodeIndex The index of corresponding node\\r\\n  /// @return nextBitIndex The index of next active bit or last bit in node\\r\\n  /// @return initialized Is nextBitIndex initialized or not\\r\\n  function _nextActiveBitInSameNode(\\r\\n    mapping(int16 => uint256) storage treeLevel,\\r\\n    int24 bitIndex\\r\\n  ) internal view returns (int16 nodeIndex, int24 nextBitIndex, bool initialized) {\\r\\n    assembly {\\r\\n      nodeIndex := sar(8, bitIndex)\\r\\n    }\\r\\n    (nextBitIndex, initialized) = _nextActiveBitInWord(treeLevel[nodeIndex], bitIndex);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns first active bit in given node\\r\\n  /// @param treeLevel The level of search tree\\r\\n  /// @param nodeIndex The index of corresponding node in the level of tree\\r\\n  /// @return bitIndex Number of next active bit or last bit in node\\r\\n  function _firstActiveBitInNode(mapping(int16 => uint256) storage treeLevel, int24 nodeIndex) internal view returns (int24 bitIndex) {\\r\\n    assembly {\\r\\n      bitIndex := shl(8, nodeIndex)\\r\\n    }\\r\\n    (bitIndex, ) = _nextActiveBitInWord(treeLevel[int16(nodeIndex)], bitIndex);\\r\\n  }\\r\\n\\r\\n  /// @notice Returns the next initialized bit contained in the word that is to the right or at (gte) of the given bit\\r\\n  /// @param word The word in which to compute the next initialized bit\\r\\n  /// @param bitIndex The end-to-end index of a bit in a layer of tree\\r\\n  /// @return nextBitIndex The next initialized or uninitialized bit up to 256 bits away from the current bit\\r\\n  /// @return initialized Whether the next bit is initialized, as the function only searches within up to 256 bits\\r\\n  function _nextActiveBitInWord(uint256 word, int24 bitIndex) internal pure returns (int24 nextBitIndex, bool initialized) {\\r\\n    uint256 bitIndexInWord;\\r\\n    assembly {\\r\\n      bitIndexInWord := and(bitIndex, 0xFF)\\r\\n    }\\r\\n    unchecked {\\r\\n      uint256 _row = word >> bitIndexInWord; // all the 1s at or to the left of the bitIndexInWord\\r\\n      if (_row == 0) {\\r\\n        nextBitIndex = bitIndex | 255;\\r\\n      } else {\\r\\n        nextBitIndex = bitIndex + int24(uint24(getSingleSignificantBit((0 - _row) & _row))); // least significant bit\\r\\n        initialized = true;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice get position of single 1-bit\\r\\n  /// @dev it is assumed that word contains exactly one 1-bit, otherwise the result will be incorrect\\r\\n  /// @param word The word containing only one 1-bit\\r\\n  function getSingleSignificantBit(uint256 word) internal pure returns (uint8 singleBitPos) {\\r\\n    assembly {\\r\\n      singleBitPos := iszero(and(word, 0x5555555555555555555555555555555555555555555555555555555555555555))\\r\\n      singleBitPos := or(singleBitPos, shl(7, iszero(and(word, 0x00000000000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(6, iszero(and(word, 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(5, iszero(and(word, 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(4, iszero(and(word, 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF))))\\r\\n      singleBitPos := or(singleBitPos, shl(3, iszero(and(word, 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF))))\\r\\n      singleBitPos := or(singleBitPos, shl(2, iszero(and(word, 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F))))\\r\\n      singleBitPos := or(singleBitPos, shl(1, iszero(and(word, 0x3333333333333333333333333333333333333333333333333333333333333333))))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/base/TickStructure.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../libraries/TickManagement.sol';\\r\\nimport '../libraries/TickTree.sol';\\r\\nimport './AlgebraPoolBase.sol';\\r\\n\\r\\n/// @title Algebra tick structure abstract contract\\r\\n/// @notice Encapsulates the logic of interaction with the data structure with ticks\\r\\n/// @dev Ticks are stored as a doubly linked list. A three-level bitmap tree is used to search through the list\\r\\nabstract contract TickStructure is AlgebraPoolBase {\\r\\n  using TickManagement for mapping(int24 => TickManagement.Tick);\\r\\n  using TickTree for mapping(int16 => uint256);\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  uint32 public override tickTreeRoot; // The root bitmap of search tree\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  mapping(int16 => uint256) public override tickTreeSecondLayer; // The second layer of search tree\\r\\n\\r\\n  // the leaves of the tree are stored in `tickTable`\\r\\n\\r\\n  constructor() {\\r\\n    ticks.initTickState();\\r\\n  }\\r\\n\\r\\n  /// @notice Used to add or remove a tick from a doubly linked list and search tree\\r\\n  /// @param tick The tick being removed or added now\\r\\n  /// @param currentTick The current global tick in the pool\\r\\n  /// @param oldTickTreeRoot The current tick tree root\\r\\n  /// @param prevInitializedTick Previous active tick before `currentTick`\\r\\n  /// @param nextInitializedTick Next active tick after `currentTick`\\r\\n  /// @param remove Remove or add the tick\\r\\n  /// @return New previous active tick before `currentTick` if changed\\r\\n  /// @return New next active tick after `currentTick` if changed\\r\\n  /// @return New tick tree root if changed\\r\\n  function _addOrRemoveTick(\\r\\n    int24 tick,\\r\\n    int24 currentTick,\\r\\n    uint32 oldTickTreeRoot,\\r\\n    int24 prevInitializedTick,\\r\\n    int24 nextInitializedTick,\\r\\n    bool remove\\r\\n  ) internal returns (int24, int24, uint32) {\\r\\n    if (remove) {\\r\\n      (int24 prevTick, int24 nextTick) = ticks.removeTick(tick);\\r\\n      if (prevInitializedTick == tick) prevInitializedTick = prevTick;\\r\\n      else if (nextInitializedTick == tick) nextInitializedTick = nextTick;\\r\\n    } else {\\r\\n      int24 prevTick;\\r\\n      int24 nextTick;\\r\\n      if (prevInitializedTick < tick && nextInitializedTick > tick) {\\r\\n        (prevTick, nextTick) = (prevInitializedTick, nextInitializedTick); // we know next and prev ticks\\r\\n        if (tick > currentTick) nextInitializedTick = tick;\\r\\n        else prevInitializedTick = tick;\\r\\n      } else {\\r\\n        nextTick = tickTable.getNextTick(tickTreeSecondLayer, oldTickTreeRoot, tick);\\r\\n        prevTick = ticks[nextTick].prevTick;\\r\\n      }\\r\\n      ticks.insertTick(tick, prevTick, nextTick);\\r\\n    }\\r\\n\\r\\n    uint32 newTickTreeRoot = tickTable.toggleTick(tickTreeSecondLayer, oldTickTreeRoot, tick);\\r\\n    return (prevInitializedTick, nextInitializedTick, newTickTreeRoot);\\r\\n  }\\r\\n\\r\\n  /// @notice Used to add or remove a pair of ticks from a doubly linked list and search tree\\r\\n  /// @param bottomTick The bottom tick being removed or added now\\r\\n  /// @param topTick The top tick being removed or added now\\r\\n  /// @param toggleBottom Should bottom tick be changed or not\\r\\n  /// @param toggleTop Should top tick be changed or not\\r\\n  /// @param currentTick The current global tick in the pool\\r\\n  /// @param remove Remove or add the ticks\\r\\n  function _addOrRemoveTicks(int24 bottomTick, int24 topTick, bool toggleBottom, bool toggleTop, int24 currentTick, bool remove) internal override {\\r\\n    (int24 prevInitializedTick, int24 nextInitializedTick, uint32 oldTickTreeRoot) = (prevTickGlobal, nextTickGlobal, tickTreeRoot);\\r\\n    (int24 newPrevTick, int24 newNextTick, uint32 newTreeRoot) = (prevInitializedTick, nextInitializedTick, oldTickTreeRoot);\\r\\n    if (toggleBottom) {\\r\\n      (newPrevTick, newNextTick, newTreeRoot) = _addOrRemoveTick(bottomTick, currentTick, newTreeRoot, newPrevTick, newNextTick, remove);\\r\\n    }\\r\\n    if (toggleTop) {\\r\\n      (newPrevTick, newNextTick, newTreeRoot) = _addOrRemoveTick(topTick, currentTick, newTreeRoot, newPrevTick, newNextTick, remove);\\r\\n    }\\r\\n    if (prevInitializedTick != newPrevTick || nextInitializedTick != newNextTick || newTreeRoot != oldTickTreeRoot) {\\r\\n      (prevTickGlobal, nextTickGlobal, tickTreeRoot) = (newPrevTick, newNextTick, newTreeRoot);\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/base/Positions.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport '../libraries/LiquidityMath.sol';\\r\\nimport '../libraries/TickManagement.sol';\\r\\nimport './AlgebraPoolBase.sol';\\r\\n\\r\\n/// @title Algebra positions abstract contract\\r\\n/// @notice Contains the logic of recalculation and change of liquidity positions\\r\\n/// @dev Relies on method _addOrRemoveTicks, which is implemented in TickStructure\\r\\nabstract contract Positions is AlgebraPoolBase {\\r\\n  using TickManagement for mapping(int24 => TickManagement.Tick);\\r\\n\\r\\n  struct Position {\\r\\n    uint256 liquidity; // The amount of liquidity concentrated in the range\\r\\n    uint256 innerFeeGrowth0Token; // The last updated fee growth per unit of liquidity\\r\\n    uint256 innerFeeGrowth1Token;\\r\\n    uint128 fees0; // The amount of token0 owed to a LP\\r\\n    uint128 fees1; // The amount of token1 owed to a LP\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolState\\r\\n  mapping(bytes32 => Position) public override positions;\\r\\n\\r\\n  /// @notice This function fetches certain position object\\r\\n  /// @param owner The address owing the position\\r\\n  /// @param bottomTick The position's bottom tick\\r\\n  /// @param topTick The position's top tick\\r\\n  /// @return position The Position object\\r\\n  function getOrCreatePosition(address owner, int24 bottomTick, int24 topTick) internal view returns (Position storage) {\\r\\n    bytes32 key;\\r\\n    assembly {\\r\\n      key := or(shl(24, or(shl(24, owner), and(bottomTick, 0xFFFFFF))), and(topTick, 0xFFFFFF))\\r\\n    }\\r\\n    return positions[key];\\r\\n  }\\r\\n\\r\\n  /// @dev Updates position's ticks and its fees\\r\\n  /// @return amount0 The abs amount of token0 that corresponds to liquidityDelta\\r\\n  /// @return amount1 The abs amount of token1 that corresponds to liquidityDelta\\r\\n  function _updatePositionTicksAndFees(\\r\\n    Position storage position,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int128 liquidityDelta\\r\\n  ) internal returns (uint256 amount0, uint256 amount1) {\\r\\n    (uint160 currentPrice, int24 currentTick) = (globalState.price, globalState.tick);\\r\\n\\r\\n    bool toggledBottom;\\r\\n    bool toggledTop;\\r\\n    {\\r\\n      // scope to prevent \\\"stack too deep\\\"\\r\\n      (uint256 _totalFeeGrowth0, uint256 _totalFeeGrowth1) = (totalFeeGrowth0Token, totalFeeGrowth1Token);\\r\\n      if (liquidityDelta != 0) {\\r\\n        toggledBottom = ticks.update(bottomTick, currentTick, liquidityDelta, _totalFeeGrowth0, _totalFeeGrowth1, false); // isTopTick: false\\r\\n        toggledTop = ticks.update(topTick, currentTick, liquidityDelta, _totalFeeGrowth0, _totalFeeGrowth1, true); // isTopTick: true\\r\\n      }\\r\\n\\r\\n      (uint256 feeGrowth0, uint256 feeGrowth1) = ticks.getInnerFeeGrowth(bottomTick, topTick, currentTick, _totalFeeGrowth0, _totalFeeGrowth1);\\r\\n      _recalculatePosition(position, liquidityDelta, feeGrowth0, feeGrowth1);\\r\\n    }\\r\\n\\r\\n    if (liquidityDelta != 0) {\\r\\n      // if liquidityDelta is negative and the tick was toggled, it means that it should not be initialized anymore, so we delete it\\r\\n      if (toggledBottom || toggledTop) {\\r\\n        _addOrRemoveTicks(bottomTick, topTick, toggledBottom, toggledTop, currentTick, liquidityDelta < 0);\\r\\n      }\\r\\n\\r\\n      int128 globalLiquidityDelta;\\r\\n      (amount0, amount1, globalLiquidityDelta) = LiquidityMath.getAmountsForLiquidity(bottomTick, topTick, liquidityDelta, currentTick, currentPrice);\\r\\n      if (globalLiquidityDelta != 0) liquidity = LiquidityMath.addDelta(liquidity, liquidityDelta); // update global liquidity\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Increases amounts of tokens owed to owner of the position\\r\\n  /// @param position The position object to operate with\\r\\n  /// @param liquidityDelta The amount on which to increase\\\\decrease the liquidity\\r\\n  /// @param innerFeeGrowth0Token Total fee token0 fee growth per liquidity between position's lower and upper ticks\\r\\n  /// @param innerFeeGrowth1Token Total fee token1 fee growth per liquidity between position's lower and upper ticks\\r\\n  function _recalculatePosition(\\r\\n    Position storage position,\\r\\n    int128 liquidityDelta,\\r\\n    uint256 innerFeeGrowth0Token,\\r\\n    uint256 innerFeeGrowth1Token\\r\\n  ) internal {\\r\\n    uint128 liquidityBefore = uint128(position.liquidity);\\r\\n\\r\\n    if (liquidityDelta == 0) {\\r\\n      if (liquidityBefore == 0) return; // Do not recalculate the empty ranges\\r\\n    } else {\\r\\n      // change position liquidity\\r\\n      position.liquidity = LiquidityMath.addDelta(liquidityBefore, liquidityDelta);\\r\\n    }\\r\\n\\r\\n    unchecked {\\r\\n      // update the position\\r\\n      (uint256 lastInnerFeeGrowth0Token, uint256 lastInnerFeeGrowth1Token) = (position.innerFeeGrowth0Token, position.innerFeeGrowth1Token);\\r\\n      uint128 fees0;\\r\\n      if (lastInnerFeeGrowth0Token != innerFeeGrowth0Token) {\\r\\n        position.innerFeeGrowth0Token = innerFeeGrowth0Token;\\r\\n        fees0 = uint128(FullMath.mulDiv(innerFeeGrowth0Token - lastInnerFeeGrowth0Token, liquidityBefore, Constants.Q128));\\r\\n      }\\r\\n      uint128 fees1;\\r\\n      if (lastInnerFeeGrowth1Token != innerFeeGrowth1Token) {\\r\\n        position.innerFeeGrowth1Token = innerFeeGrowth1Token;\\r\\n        fees1 = uint128(FullMath.mulDiv(innerFeeGrowth1Token - lastInnerFeeGrowth1Token, liquidityBefore, Constants.Q128));\\r\\n      }\\r\\n\\r\\n      // To avoid overflow owner has to collect fee before it\\r\\n      if (fees0 | fees1 != 0) {\\r\\n        position.fees0 += fees0;\\r\\n        position.fees1 += fees1;\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/plugin/IAlgebraPlugin.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The Algebra plugin interface\\r\\n/// @dev The plugin will be called by the pool using hook methods depending on the current pool settings\\r\\ninterface IAlgebraPlugin {\\r\\n  /// @notice Returns plugin config\\r\\n  /// @return config Each bit of the config is responsible for enabling/disabling the hooks.\\r\\n  /// The last bit indicates whether the plugin contains dynamic fees logic\\r\\n  function defaultPluginConfig() external view returns (uint8);\\r\\n\\r\\n  /// @notice The hook called before the state of a pool is initialized\\r\\n  /// @param sender The initial msg.sender for the initialize call\\r\\n  /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function beforeInitialize(address sender, uint160 sqrtPriceX96) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called after the state of a pool is initialized\\r\\n  /// @param sender The initial msg.sender for the initialize call\\r\\n  /// @param sqrtPriceX96 The sqrt(price) of the pool as a Q64.96\\r\\n  /// @param tick The current tick after the state of a pool is initialized\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function afterInitialize(address sender, uint160 sqrtPriceX96, int24 tick) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called before a position is modified\\r\\n  /// @param sender The initial msg.sender for the modify position call\\r\\n  /// @param recipient Address to which the liquidity will be assigned in case of a mint or\\r\\n  /// to which tokens will be sent in case of a burn\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param desiredLiquidityDelta The desired amount of liquidity to mint/burn\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function beforeModifyPosition(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int128 desiredLiquidityDelta,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called after a position is modified\\r\\n  /// @param sender The initial msg.sender for the modify position call\\r\\n  /// @param recipient Address to which the liquidity will be assigned in case of a mint or\\r\\n  /// to which tokens will be sent in case of a burn\\r\\n  /// @param bottomTick The lower tick of the position\\r\\n  /// @param topTick The upper tick of the position\\r\\n  /// @param desiredLiquidityDelta The desired amount of liquidity to mint/burn\\r\\n  /// @param amount0 The amount of token0 sent to the recipient or was paid to mint\\r\\n  /// @param amount1 The amount of token0 sent to the recipient or was paid to mint\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function afterModifyPosition(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    int128 desiredLiquidityDelta,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called before a swap\\r\\n  /// @param sender The initial msg.sender for the swap call\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param withPaymentInAdvance The flag indicating whether the `swapWithPaymentInAdvance` method was called\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function beforeSwap(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bool withPaymentInAdvance,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called after a swap\\r\\n  /// @param sender The initial msg.sender for the swap call\\r\\n  /// @param recipient The address to receive the output of the swap\\r\\n  /// @param zeroToOne The direction of the swap, true for token0 to token1, false for token1 to token0\\r\\n  /// @param amountRequired The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)\\r\\n  /// @param limitSqrtPrice The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this\\r\\n  /// value after the swap. If one for zero, the price cannot be greater than this value after the swap\\r\\n  /// @param amount0 The delta of the balance of token0 of the pool, exact when negative, minimum when positive\\r\\n  /// @param amount1 The delta of the balance of token1 of the pool, exact when negative, minimum when positive\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function afterSwap(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    int256 amount0,\\r\\n    int256 amount1,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called before flash\\r\\n  /// @param sender The initial msg.sender for the flash call\\r\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\r\\n  /// @param amount0 The amount of token0 being requested for flash\\r\\n  /// @param amount1 The amount of token1 being requested for flash\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function beforeFlash(address sender, address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external returns (bytes4);\\r\\n\\r\\n  /// @notice The hook called after flash\\r\\n  /// @param sender The initial msg.sender for the flash call\\r\\n  /// @param recipient The address which will receive the token0 and token1 amounts\\r\\n  /// @param amount0 The amount of token0 being requested for flash\\r\\n  /// @param amount1 The amount of token1 being requested for flash\\r\\n  /// @param paid0 The amount of token0 being paid for flash\\r\\n  /// @param paid1 The amount of token1 being paid for flash\\r\\n  /// @param data Data that passed through the callback\\r\\n  /// @return bytes4 The function selector for the hook\\r\\n  function afterFlash(\\r\\n    address sender,\\r\\n    address recipient,\\r\\n    uint256 amount0,\\r\\n    uint256 amount1,\\r\\n    uint256 paid0,\\r\\n    uint256 paid1,\\r\\n    bytes calldata data\\r\\n  ) external returns (bytes4);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/AlgebraPool.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\npragma abicoder v1;\\r\\n\\r\\nimport './base/AlgebraPoolBase.sol';\\r\\nimport './base/ReentrancyGuard.sol';\\r\\nimport './base/Positions.sol';\\r\\nimport './base/SwapCalculation.sol';\\r\\nimport './base/ReservesManager.sol';\\r\\nimport './base/TickStructure.sol';\\r\\n\\r\\nimport './libraries/FullMath.sol';\\r\\nimport './libraries/Constants.sol';\\r\\nimport './libraries/SafeCast.sol';\\r\\nimport './libraries/TickMath.sol';\\r\\nimport './libraries/LiquidityMath.sol';\\r\\nimport './libraries/Plugins.sol';\\r\\n\\r\\nimport './interfaces/plugin/IAlgebraPlugin.sol';\\r\\nimport './interfaces/IAlgebraFactory.sol';\\r\\n\\r\\n/// @title Algebra concentrated liquidity pool\\r\\n/// @notice This contract is responsible for liquidity positions, swaps and flashloans\\r\\n/// @dev Version: Algebra Integral 1.0\\r\\ncontract AlgebraPool is AlgebraPoolBase, TickStructure, ReentrancyGuard, Positions, SwapCalculation, ReservesManager {\\r\\n  using SafeCast for uint256;\\r\\n  using SafeCast for uint128;\\r\\n  using Plugins for uint8;\\r\\n  using Plugins for bytes4;\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function initialize(uint160 initialPrice) external override {\\r\\n    int24 tick = TickMath.getTickAtSqrtRatio(initialPrice); // getTickAtSqrtRatio checks validity of initialPrice inside\\r\\n    if (globalState.price != 0) revert alreadyInitialized(); // after initialization, the price can never become zero\\r\\n    globalState.price = initialPrice;\\r\\n\\r\\n    if (plugin != address(0)) {\\r\\n      IAlgebraPlugin(plugin).beforeInitialize(msg.sender, initialPrice).shouldReturn(IAlgebraPlugin.beforeInitialize.selector);\\r\\n    }\\r\\n\\r\\n    (uint16 _communityFee, int24 _tickSpacing, uint16 _fee, address _communityVault) = _getDefaultConfiguration();\\r\\n\\r\\n    uint8 pluginConfig = globalState.pluginConfig;\\r\\n    globalState.tick = tick;\\r\\n    globalState.communityFee = _communityFee;\\r\\n\\r\\n    emit Initialize(initialPrice, tick);\\r\\n\\r\\n    _setFee(_fee);\\r\\n    _setTickSpacing(_tickSpacing);\\r\\n    _setCommunityFeeVault(_communityVault);\\r\\n    if (_communityFee != 0 && _communityVault == address(0)) revert invalidNewCommunityFee(); // the pool should not accumulate a community fee without a vault\\r\\n    _setCommunityFee(_communityFee);\\r\\n\\r\\n    if (pluginConfig.hasFlag(Plugins.AFTER_INIT_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).afterInitialize(msg.sender, initialPrice, tick).shouldReturn(IAlgebraPlugin.afterInitialize.selector);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function mint(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 liquidityDesired,\\r\\n    bytes calldata data\\r\\n  ) external override onlyValidTicks(bottomTick, topTick) returns (uint256 amount0, uint256 amount1, uint128 liquidityActual) {\\r\\n    if (liquidityDesired == 0) revert zeroLiquidityDesired();\\r\\n\\r\\n    _beforeModifyPos(recipient, bottomTick, topTick, liquidityDesired.toInt128(), data);\\r\\n    _lock();\\r\\n\\r\\n    {\\r\\n      // scope to prevent stack too deep\\r\\n      int24 currentTick = globalState.tick;\\r\\n      uint160 currentPrice = globalState.price;\\r\\n      if (currentPrice == 0) revert notInitialized();\\r\\n\\r\\n      unchecked {\\r\\n        int24 _tickSpacing = tickSpacing;\\r\\n        if (bottomTick % _tickSpacing | topTick % _tickSpacing != 0) revert tickIsNotSpaced();\\r\\n      }\\r\\n\\r\\n      (amount0, amount1, ) = LiquidityMath.getAmountsForLiquidity(bottomTick, topTick, liquidityDesired.toInt128(), currentTick, currentPrice);\\r\\n    }\\r\\n\\r\\n    (uint256 receivedAmount0, uint256 receivedAmount1) = _updateReserves();\\r\\n    _mintCallback(amount0, amount1, data); // IAlgebraMintCallback.algebraMintCallback to msg.sender\\r\\n\\r\\n    receivedAmount0 = amount0 == 0 ? 0 : _balanceToken0() - receivedAmount0;\\r\\n    receivedAmount1 = amount1 == 0 ? 0 : _balanceToken1() - receivedAmount1;\\r\\n\\r\\n    if (receivedAmount0 < amount0) {\\r\\n      liquidityActual = uint128(FullMath.mulDiv(uint256(liquidityDesired), receivedAmount0, amount0));\\r\\n    } else {\\r\\n      liquidityActual = liquidityDesired;\\r\\n    }\\r\\n    if (receivedAmount1 < amount1) {\\r\\n      uint128 liquidityForRA1 = uint128(FullMath.mulDiv(uint256(liquidityDesired), receivedAmount1, amount1));\\r\\n      if (liquidityForRA1 < liquidityActual) liquidityActual = liquidityForRA1;\\r\\n    }\\r\\n    if (liquidityActual == 0) revert zeroLiquidityActual();\\r\\n\\r\\n    // scope to prevent \\\"stack too deep\\\"\\r\\n    {\\r\\n      Position storage _position = getOrCreatePosition(recipient, bottomTick, topTick);\\r\\n      (amount0, amount1) = _updatePositionTicksAndFees(_position, bottomTick, topTick, liquidityActual.toInt128());\\r\\n    }\\r\\n\\r\\n    unchecked {\\r\\n      // return leftovers\\r\\n      if (amount0 > 0) {\\r\\n        if (receivedAmount0 > amount0) _transfer(token0, leftoversRecipient, receivedAmount0 - amount0);\\r\\n        else assert(receivedAmount0 == amount0); // must always be true\\r\\n      }\\r\\n      if (amount1 > 0) {\\r\\n        if (receivedAmount1 > amount1) _transfer(token1, leftoversRecipient, receivedAmount1 - amount1);\\r\\n        else assert(receivedAmount1 == amount1); // must always be true\\r\\n      }\\r\\n    }\\r\\n\\r\\n    _changeReserves(int256(amount0), int256(amount1), 0, 0);\\r\\n    emit Mint(msg.sender, recipient, bottomTick, topTick, liquidityActual, amount0, amount1);\\r\\n\\r\\n    _unlock();\\r\\n    _afterModifyPos(recipient, bottomTick, topTick, liquidityActual.toInt128(), amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function burn(\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount,\\r\\n    bytes calldata data\\r\\n  ) external override onlyValidTicks(bottomTick, topTick) returns (uint256 amount0, uint256 amount1) {\\r\\n    if (amount > uint128(type(int128).max)) revert arithmeticError();\\r\\n\\r\\n    int128 liquidityDelta = -int128(amount);\\r\\n\\r\\n    _beforeModifyPos(msg.sender, bottomTick, topTick, liquidityDelta, data);\\r\\n    _lock();\\r\\n\\r\\n    _updateReserves();\\r\\n    Position storage position = getOrCreatePosition(msg.sender, bottomTick, topTick);\\r\\n\\r\\n    (amount0, amount1) = _updatePositionTicksAndFees(position, bottomTick, topTick, liquidityDelta);\\r\\n\\r\\n    if (amount0 | amount1 != 0) {\\r\\n      // since we do not support tokens whose total supply can exceed uint128, these casts are safe\\r\\n      // and, theoretically, unchecked cast prevents a complete blocking of burn\\r\\n      (position.fees0, position.fees1) = (position.fees0 + uint128(amount0), position.fees1 + uint128(amount1));\\r\\n    }\\r\\n\\r\\n    if (amount | amount0 | amount1 != 0) emit Burn(msg.sender, bottomTick, topTick, amount, amount0, amount1);\\r\\n\\r\\n    _unlock();\\r\\n    _afterModifyPos(msg.sender, bottomTick, topTick, liquidityDelta, amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  function _beforeModifyPos(address owner, int24 bottomTick, int24 topTick, int128 liquidityDelta, bytes calldata data) internal {\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.BEFORE_POSITION_MODIFY_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).beforeModifyPosition(msg.sender, owner, bottomTick, topTick, liquidityDelta, data).shouldReturn(\\r\\n        IAlgebraPlugin.beforeModifyPosition.selector\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _afterModifyPos(address owner, int24 bTick, int24 tTick, int128 deltaL, uint256 amount0, uint256 amount1, bytes calldata data) internal {\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.AFTER_POSITION_MODIFY_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).afterModifyPosition(msg.sender, owner, bTick, tTick, deltaL, amount0, amount1, data).shouldReturn(\\r\\n        IAlgebraPlugin.afterModifyPosition.selector\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function collect(\\r\\n    address recipient,\\r\\n    int24 bottomTick,\\r\\n    int24 topTick,\\r\\n    uint128 amount0Requested,\\r\\n    uint128 amount1Requested\\r\\n  ) external override returns (uint128 amount0, uint128 amount1) {\\r\\n    _lock();\\r\\n    // we don't check tick range validity, because if ticks are incorrect, the position will be empty\\r\\n    Position storage position = getOrCreatePosition(msg.sender, bottomTick, topTick);\\r\\n    (uint128 positionFees0, uint128 positionFees1) = (position.fees0, position.fees1);\\r\\n\\r\\n    if (amount0Requested > positionFees0) amount0Requested = positionFees0;\\r\\n    if (amount1Requested > positionFees1) amount1Requested = positionFees1;\\r\\n\\r\\n    if (amount0Requested | amount1Requested != 0) {\\r\\n      // use one if since fees0 and fees1 are tightly packed\\r\\n      (amount0, amount1) = (amount0Requested, amount1Requested);\\r\\n\\r\\n      unchecked {\\r\\n        // single SSTORE\\r\\n        (position.fees0, position.fees1) = (positionFees0 - amount0, positionFees1 - amount1);\\r\\n\\r\\n        if (amount0 > 0) _transfer(token0, recipient, amount0);\\r\\n        if (amount1 > 0) _transfer(token1, recipient, amount1);\\r\\n        _changeReserves(-int256(uint256(amount0)), -int256(uint256(amount1)), 0, 0);\\r\\n      }\\r\\n      emit Collect(msg.sender, recipient, bottomTick, topTick, amount0, amount1);\\r\\n    }\\r\\n    _unlock();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function swap(\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountRequired,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external override returns (int256 amount0, int256 amount1) {\\r\\n    _beforeSwap(recipient, zeroToOne, amountRequired, limitSqrtPrice, false, data);\\r\\n    _lock();\\r\\n\\r\\n    {\\r\\n      // scope to prevent \\\"stack too deep\\\"\\r\\n      (uint256 balance0Before, uint256 balance1Before) = _updateReserves();\\r\\n      uint160 currentPrice;\\r\\n      int24 currentTick;\\r\\n      uint128 currentLiquidity;\\r\\n      uint256 communityFee;\\r\\n      (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwap(zeroToOne, amountRequired, limitSqrtPrice);\\r\\n      if (zeroToOne) {\\r\\n        unchecked {\\r\\n          if (amount1 < 0) _transfer(token1, recipient, uint256(-amount1)); // amount1 cannot be > 0\\r\\n        }\\r\\n        _swapCallback(amount0, amount1, data); // callback to get tokens from the msg.sender\\r\\n        if (balance0Before + uint256(amount0) > _balanceToken0()) revert insufficientInputAmount();\\r\\n        _changeReserves(amount0, amount1, communityFee, 0); // reflect reserve change and pay communityFee\\r\\n      } else {\\r\\n        unchecked {\\r\\n          if (amount0 < 0) _transfer(token0, recipient, uint256(-amount0)); // amount0 cannot be > 0\\r\\n        }\\r\\n        _swapCallback(amount0, amount1, data); // callback to get tokens from the msg.sender\\r\\n        if (balance1Before + uint256(amount1) > _balanceToken1()) revert insufficientInputAmount();\\r\\n        _changeReserves(amount0, amount1, 0, communityFee); // reflect reserve change and pay communityFee\\r\\n      }\\r\\n\\r\\n      emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\\r\\n    }\\r\\n\\r\\n    _unlock();\\r\\n    _afterSwap(recipient, zeroToOne, amountRequired, limitSqrtPrice, amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function swapWithPaymentInAdvance(\\r\\n    address leftoversRecipient,\\r\\n    address recipient,\\r\\n    bool zeroToOne,\\r\\n    int256 amountToSell,\\r\\n    uint160 limitSqrtPrice,\\r\\n    bytes calldata data\\r\\n  ) external override returns (int256 amount0, int256 amount1) {\\r\\n    if (amountToSell < 0) revert invalidAmountRequired(); // we support only exactInput here\\r\\n\\r\\n    _lock();\\r\\n    // firstly we are getting tokens from the original caller of the transaction\\r\\n    // since the pool can get less/more tokens then expected, _amountToSell_ can be changed\\r\\n    {\\r\\n      // scope to prevent \\\"stack too deep\\\"\\r\\n      int256 amountReceived;\\r\\n      if (zeroToOne) {\\r\\n        uint256 balanceBefore = _balanceToken0();\\r\\n        _swapCallback(amountToSell, 0, data); // callback to get tokens from the msg.sender\\r\\n        uint256 balanceAfter = _balanceToken0();\\r\\n        amountReceived = (balanceAfter - balanceBefore).toInt256();\\r\\n        _changeReserves(amountReceived, 0, 0, 0);\\r\\n      } else {\\r\\n        uint256 balanceBefore = _balanceToken1();\\r\\n        _swapCallback(0, amountToSell, data); // callback to get tokens from the msg.sender\\r\\n        uint256 balanceAfter = _balanceToken1();\\r\\n        amountReceived = (balanceAfter - balanceBefore).toInt256();\\r\\n        _changeReserves(0, amountReceived, 0, 0);\\r\\n      }\\r\\n      if (amountReceived != amountToSell) amountToSell = amountReceived;\\r\\n    }\\r\\n    if (amountToSell == 0) revert insufficientInputAmount();\\r\\n\\r\\n    _unlock();\\r\\n    _beforeSwap(recipient, zeroToOne, amountToSell, limitSqrtPrice, true, data);\\r\\n    _lock();\\r\\n\\r\\n    _updateReserves();\\r\\n\\r\\n    uint160 currentPrice;\\r\\n    int24 currentTick;\\r\\n    uint128 currentLiquidity;\\r\\n    uint256 communityFee;\\r\\n    (amount0, amount1, currentPrice, currentTick, currentLiquidity, communityFee) = _calculateSwap(zeroToOne, amountToSell, limitSqrtPrice);\\r\\n\\r\\n    unchecked {\\r\\n      // transfer to the recipient\\r\\n      if (zeroToOne) {\\r\\n        if (amount1 < 0) _transfer(token1, recipient, uint256(-amount1)); // amount1 cannot be > 0\\r\\n        uint256 leftover = uint256(amountToSell - amount0); // return the leftovers\\r\\n        if (leftover != 0) _transfer(token0, leftoversRecipient, leftover);\\r\\n        _changeReserves(-leftover.toInt256(), amount1, communityFee, 0); // reflect reserve change and pay communityFee\\r\\n      } else {\\r\\n        if (amount0 < 0) _transfer(token0, recipient, uint256(-amount0)); // amount0 cannot be > 0\\r\\n        uint256 leftover = uint256(amountToSell - amount1); // return the leftovers\\r\\n        if (leftover != 0) _transfer(token1, leftoversRecipient, leftover);\\r\\n        _changeReserves(amount0, -leftover.toInt256(), 0, communityFee); // reflect reserve change and pay communityFee\\r\\n      }\\r\\n    }\\r\\n\\r\\n    emit Swap(msg.sender, recipient, amount0, amount1, currentPrice, currentLiquidity, currentTick);\\r\\n\\r\\n    _unlock();\\r\\n    _afterSwap(recipient, zeroToOne, amountToSell, limitSqrtPrice, amount0, amount1, data);\\r\\n  }\\r\\n\\r\\n  function _beforeSwap(address recipient, bool zto, int256 amount, uint160 limitPrice, bool payInAdvance, bytes calldata data) internal {\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.BEFORE_SWAP_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).beforeSwap(msg.sender, recipient, zto, amount, limitPrice, payInAdvance, data).shouldReturn(\\r\\n        IAlgebraPlugin.beforeSwap.selector\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _afterSwap(address recipient, bool zto, int256 amount, uint160 limitPrice, int256 amount0, int256 amount1, bytes calldata data) internal {\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.AFTER_SWAP_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).afterSwap(msg.sender, recipient, zto, amount, limitPrice, amount0, amount1, data).shouldReturn(\\r\\n        IAlgebraPlugin.afterSwap.selector\\r\\n      );\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolActions\\r\\n  function flash(address recipient, uint256 amount0, uint256 amount1, bytes calldata data) external override {\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.BEFORE_FLASH_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).beforeFlash(msg.sender, recipient, amount0, amount1, data).shouldReturn(IAlgebraPlugin.beforeFlash.selector);\\r\\n    }\\r\\n    _lock();\\r\\n\\r\\n    uint256 paid0;\\r\\n    uint256 paid1;\\r\\n    {\\r\\n      (uint256 balance0Before, uint256 balance1Before) = _updateReserves();\\r\\n      uint256 fee0;\\r\\n      if (amount0 > 0) {\\r\\n        fee0 = FullMath.mulDivRoundingUp(amount0, Constants.FLASH_FEE, Constants.FEE_DENOMINATOR);\\r\\n        _transfer(token0, recipient, amount0);\\r\\n      }\\r\\n      uint256 fee1;\\r\\n      if (amount1 > 0) {\\r\\n        fee1 = FullMath.mulDivRoundingUp(amount1, Constants.FLASH_FEE, Constants.FEE_DENOMINATOR);\\r\\n        _transfer(token1, recipient, amount1);\\r\\n      }\\r\\n\\r\\n      _flashCallback(fee0, fee1, data); // IAlgebraFlashCallback.algebraFlashCallback to msg.sender\\r\\n\\r\\n      paid0 = _balanceToken0();\\r\\n      if (balance0Before + fee0 > paid0) revert flashInsufficientPaid0();\\r\\n      paid1 = _balanceToken1();\\r\\n      if (balance1Before + fee1 > paid1) revert flashInsufficientPaid1();\\r\\n\\r\\n      unchecked {\\r\\n        paid0 -= balance0Before;\\r\\n        paid1 -= balance1Before;\\r\\n      }\\r\\n\\r\\n      uint256 _communityFee = globalState.communityFee;\\r\\n      if (_communityFee > 0) {\\r\\n        uint256 communityFee0;\\r\\n        if (paid0 > 0) communityFee0 = FullMath.mulDiv(paid0, _communityFee, Constants.COMMUNITY_FEE_DENOMINATOR);\\r\\n        uint256 communityFee1;\\r\\n        if (paid1 > 0) communityFee1 = FullMath.mulDiv(paid1, _communityFee, Constants.COMMUNITY_FEE_DENOMINATOR);\\r\\n\\r\\n        _changeReserves(int256(communityFee0), int256(communityFee1), communityFee0, communityFee1);\\r\\n      }\\r\\n      emit Flash(msg.sender, recipient, amount0, amount1, paid0, paid1);\\r\\n    }\\r\\n\\r\\n    _unlock();\\r\\n    if (globalState.pluginConfig.hasFlag(Plugins.AFTER_FLASH_FLAG)) {\\r\\n      IAlgebraPlugin(plugin).afterFlash(msg.sender, recipient, amount0, amount1, paid0, paid1, data).shouldReturn(IAlgebraPlugin.afterFlash.selector);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @dev using function to save bytecode\\r\\n  function _checkIfAdministrator() private view {\\r\\n    if (!IAlgebraFactory(factory).hasRoleOrOwner(Constants.POOLS_ADMINISTRATOR_ROLE, msg.sender)) revert notAllowed();\\r\\n  }\\r\\n\\r\\n  // permissioned actions use reentrancy lock to prevent call from callback (to keep the correct order of events, etc.)\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setCommunityFee(uint16 newCommunityFee) external override onlyUnlocked {\\r\\n    _checkIfAdministrator();\\r\\n    if (\\r\\n      newCommunityFee > Constants.MAX_COMMUNITY_FEE ||\\r\\n      newCommunityFee == globalState.communityFee ||\\r\\n      (newCommunityFee != 0 && communityVault == address(0))\\r\\n    ) revert invalidNewCommunityFee();\\r\\n    _setCommunityFee(newCommunityFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setTickSpacing(int24 newTickSpacing) external override onlyUnlocked {\\r\\n    _checkIfAdministrator();\\r\\n    if (newTickSpacing <= 0 || newTickSpacing > Constants.MAX_TICK_SPACING || tickSpacing == newTickSpacing) revert invalidNewTickSpacing();\\r\\n    _setTickSpacing(newTickSpacing);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setPlugin(address newPluginAddress) external override onlyUnlocked {\\r\\n    _checkIfAdministrator();\\r\\n    _setPluginConfig(0);\\r\\n    _setPlugin(newPluginAddress);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setPluginConfig(uint8 newConfig) external override onlyUnlocked {\\r\\n    address _plugin = plugin;\\r\\n    if (_plugin == address(0)) revert pluginIsNotConnected(); // it is not allowed to set plugin config without plugin\\r\\n\\r\\n    if (msg.sender != _plugin) _checkIfAdministrator();\\r\\n\\r\\n    _setPluginConfig(newConfig);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setCommunityVault(address newCommunityVault) external override onlyUnlocked {\\r\\n    _checkIfAdministrator();\\r\\n    if (newCommunityVault == address(0) && globalState.communityFee != 0) _setCommunityFee(0); // the pool should not accumulate a community fee without a vault\\r\\n    _setCommunityFeeVault(newCommunityVault); // accumulated but not yet sent to the vault community fees once will be sent to the `newCommunityVault` address\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraPoolPermissionedActions\\r\\n  function setFee(uint16 newFee) external override {\\r\\n    bool isDynamicFeeEnabled = globalState.pluginConfig.hasFlag(Plugins.DYNAMIC_FEE);\\r\\n    if (!globalState.unlocked) revert IAlgebraPoolErrors.locked(); // cheaper to check lock here\\r\\n\\r\\n    if (msg.sender == plugin) {\\r\\n      if (!isDynamicFeeEnabled) revert dynamicFeeDisabled();\\r\\n    } else {\\r\\n      if (isDynamicFeeEnabled) revert dynamicFeeActive();\\r\\n      _checkIfAdministrator();\\r\\n    }\\r\\n    _setFee(newFee);\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"}}}","address":"0x7765b23083ADBCBb48957d3c41f3E6d266222AA5","bytecode":"0x60a060405234801561001057600080fd5b506040516160473803806160478339818101604052602081101561003357600080fd5b50516001600160a01b03811661004857600080fd5b6001600160a01b0316608052608051615fd16100766000396000818161014c01526101910152615fd16000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806304889e261461003b578063d9181cd314610084575b600080fd5b6100436100f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b6100c96004803603606081101561009a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610177565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080600080610148600054600154606082901c9273ffffffffffffffffffffffff000000000000000060409390931b9290921660a082901c179173ffffffffffffffffffffffffffffffffffffffff90911690565b91967f000000000000000000000000000000000000000000000000000000000000000096509094509092509050565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57600080fd5b6bffffffffffffffffffffffff604084901c16606085901b176000557fffffffffffffffffffffffff000000000000000000000000000000000000000060a084901b1673ffffffffffffffffffffffffffffffffffffffff8316176001558282604051602001808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405160208183030381529060405280519060200120604051610280906102b2565b8190604051809103906000f59050801580156102a0573d6000803e3d6000fd5b50600060018190558055949350505050565b615d05806102c08339019056fe60e06040523480156200001157600080fd5b5060006200001e620000b0565b6001600160a01b0390811660c05290811660a052166080529050620d89e719620000488162000273565b6008805462ffffff93841663010000000265ffffffffffff1990911693909216929092171790556002805460ff60e01b1916600160e01b1790556001600160a01b038116156200009d576200009d8162000129565b50620000aa60036200017d565b6200031e565b600080600080336001600160a01b03166304889e266040518163ffffffff1660e01b8152600401608060405180830381865afa158015620000f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011b9190620002c1565b935093509350935090919293565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f27a3944eff2135a57675f17e72501038982b73620d01f794c72e93d61a3932a29060200160405180910390a150565b620d89e7196200018d8162000273565b620d89e7196000818152602085905260409020600101805465ffffffffffff60801b1916600160981b62ffffff9485160262ffffff60801b191617600160801b949093169390930291909117909155620001e78162000273565b826000620001f9620d89e71962000273565b60020b60020b81526020019081526020016000206001016010846000620d89e719620002259062000273565b60020b81526020810191909152604001600020600101805462ffffff948516600160981b0262ffffff60981b1990911617905581549383166101009190910a90810292021990921617905550565b60008160020b627fffff1981036200029b57634e487b7160e01b600052601160045260246000fd5b60000392915050565b80516001600160a01b0381168114620002bc57600080fd5b919050565b60008060008060808587031215620002d857600080fd5b620002e385620002a4565b9350620002f360208601620002a4565b92506200030360408601620002a4565b91506200031360608601620002a4565b905092959194509250565b60805160a05160c05161592b620003da600039600081816109ba01528181610c4a015281816111e60152818161156c01528181611911015281816119d301528181611dbe0152818161258501528181612f5b015261311a0152600081816102f301528181610cd0015281816111a201528181611529015281816119490152818161199b01528181611d6f0152818161251e01528181612e080152612f2a01526000818161092c015281816132d90152614070015261592b6000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806397ce1c5111610160578063d5c35a7e116100d8578063ecdecf421161008c578063f085a61011610071578063f085a61014610b0c578063f30dba9314610b2c578063f637731d14610bc657600080fd5b8063ecdecf4214610af0578063ef01df4f14610af957600080fd5b8063d8619037116100bd578063d861903714610a0f578063ddca3f4314610a3c578063e76c01e414610a5b57600080fd5b8063d5c35a7e146109dc578063d8544cf3146109e957600080fd5b8063c45a01551161012f578063cc1f97cf11610114578063cc1f97cf1461097b578063d0c93a7c146109a1578063d21220a7146109b557600080fd5b8063c45a015514610927578063c677e3e01461094e57600080fd5b806397ce1c51146107335780639e4e022714610794578063aafe29c014610833578063bca57f811461090757600080fd5b80634f1eb3d8116101f35780636378ae44116101c25780637bd78025116101a75780637bd78025146106ba5780638380edb7146106f15780638e0055531461071257600080fd5b80636378ae441461068a57806370cf754a146106a557600080fd5b80634f1eb3d814610585578063514ea4bf146105d657806353e9786814610660578063578b9a361461067357600080fd5b8063128acb081161024a578063240a875a1161022f578063240a875a146104425780633b3bc70e14610465578063490e6cbc146104f957600080fd5b8063128acb081461035a5780631a6865021461040957600080fd5b8063050a4d211461027c5780630902f1ac146102a75780630dfe1681146102ee5780631131b11014610331575b600080fd5b600854610290906301000000900460020b81565b6040805160029290920b8252519081900360200190f35b600b546001600160801b0380821691600160801b9004165b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103157f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b039092168252519081900360200190f35b6004546103419063ffffffff1681565b6040805163ffffffff9092168252519081900360200190f35b6103f0600480360360a081101561037057600080fd5b6001600160a01b0382358116926020810135151592604082013592606083013516919081019060a0810160808201356401000000008111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460018302840111640100000000831117156103e557600080fd5b509092509050610bec565b6040805192835260208301919091528051918290030190f35b60085461042690660100000000000090046001600160801b031681565b604080516001600160801b039092168252519081900360200190f35b6104636004803603602081101561045857600080fd5b503561ffff16610dfc565b005b6103f06004803603608081101561047b57600080fd5b8135600290810b92602081013590910b916001600160801b0360408301351691908101906080810160608201356401000000008111156104ba57600080fd5b8201836020820111156104cc57600080fd5b803590602001918460018302840111640100000000831117156104ee57600080fd5b509092509050610e94565b6104636004803603608081101561050f57600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561054657600080fd5b82018360208201111561055857600080fd5b8035906020019184600183028401116401000000008311171561057a57600080fd5b509092509050611052565b6102bf600480360360a081101561059b57600080fd5b506001600160a01b03813516906020810135600290810b91604081013590910b906001600160801b0360608201358116916080013516611474565b610629600480360360208110156105ec57600080fd5b50600a60205235600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b604080519586526020860194909452848401929092526001600160801b039081166060850152166080830152519081900360a00190f35b600654610315906001600160a01b031681565b60085461034190600160c81b900463ffffffff1681565b61069360005481565b60408051918252519081900360200190f35b6104266d09745258e83de0d0f4e400fce79981565b6004546cffffffffffffffffffffffffff6401000000008204811691710100000000000000000000000000000000009004166102bf565b600254600160e01b900460ff16604080519115158252519081900360200190f35b6104636004803603602081101561072857600080fd5b503561ffff16611646565b61073b611718565b604080516001600160a01b039098168852600296870b602089015261ffff9095168786015260ff90931660608701526001600160801b039091166080860152830b60a085015290910b60c0830152519081900360e00190f35b6103f0600480360360c08110156107aa57600080fd5b6001600160a01b0382358116926020810135821692604082013515159260608301359260808101359091169181019060c0810160a08201356401000000008111156107f457600080fd5b82018360208201111561080657600080fd5b8035906020019184600183028401116401000000008311171561082857600080fd5b5090925090506117ae565b6108e0600480360360c081101561084957600080fd5b6001600160a01b0382358116926020810135909116916040820135600290810b92606081013590910b916001600160801b03608083013516919081019060c0810160a08201356401000000008111156108a157600080fd5b8201836020820111156108b357600080fd5b803590602001918460018302840111640100000000831117156108d557600080fd5b509092509050611ab4565b6040805193845260208401929092526001600160801b031682820152519081900360600190f35b6104636004803603602081101561091d57600080fd5b503560ff16611ec4565b6103157f000000000000000000000000000000000000000000000000000000000000000081565b6106936004803603602081101561096457600080fd5b5060076020523560010b6000908152604090205481565b6104636004803603602081101561099157600080fd5b50356001600160a01b0316611f30565b60085461029090600160b01b900460020b81565b6103157f000000000000000000000000000000000000000000000000000000000000000081565b6008546102909060020b81565b610463600480360360208110156109ff57600080fd5b50356001600160a01b0316611f53565b61069360048036036020811015610a2557600080fd5b5060096020523560010b6000908152604090205481565b610a44611f9e565b6040805161ffff9092168252519081900360200190f35b60028054610aa6916001600160a01b03821691600160a01b810490910b9061ffff600160b81b820481169160ff600160c81b8204811692600160d01b83041691600160e01b90041686565b604080516001600160a01b03909716875260029590950b602087015261ffff9384168686015260ff90921660608601529091166080840152151560a0830152519081900360c00190f35b61069360015481565b600554610315906001600160a01b031681565b61046360048036036020811015610b2257600080fd5b503560020b612042565b610b8a60048036036020811015610b4257600080fd5b50600360208190529035600290810b600090815260409020805460018201548284015492909401549093600f81900b93600160801b8204810b93600160981b909204900b9186565b60408051968752600f9590950b6020870152600293840b868601529190920b6060850152608084019190915260a0830152519081900360c00190f35b61046360048036036020811015610bdc57600080fd5b50356001600160a01b03166120c4565b600080610bff8888888860008989612395565b610c0761248d565b600080610c126124c6565b91509150600080600080610c278d8d8d6126c4565b949c50929a509096509450925090508c15610cc2576000871215610c7357610c737f00000000000000000000000000000000000000000000000000000000000000008f89600003612d4d565b610c7f88888c8c612d5d565b610c87612dd7565b610c9189886156bb565b1115610cb057604051633ed6d50560e21b815260040160405180910390fd5b610cbd8888836000612e81565b610d43565b6000881215610cf957610cf97f00000000000000000000000000000000000000000000000000000000000000008f8a600003612d4d565b610d0588888c8c612d5d565b610d0d6130e9565b610d1788876156bb565b1115610d3657604051633ed6d50560e21b815260040160405180910390fd5b610d438888600084612e81565b8d6001600160a01b0316336001600160a01b03167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca678a8a88878960405180868152602001858152602001846001600160a01b03168152602001836001600160801b031681526020018260020b81526020019550505050505060405180910390a3505050505050610de16002805460ff60e01b1916600160e01b179055565b610df18888888886868a8a613151565b965096945050505050565b610e0461324e565b610e0c61327a565b6103e861ffff82161180610e2f575060025461ffff828116600160d01b90920416145b80610e51575061ffff811615801590610e5157506006546001600160a01b0316155b15610e88576040517fa709b9af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9181613372565b50565b6000808686610ea382826133e3565b6f7fffffffffffffffffffffffffffffff6001600160801b0388161115610ef6576040517f8995290f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f01886156ce565b9050610f11338b8b848b8b6134b0565b610f1961248d565b610f216124c6565b50506000610f30338c8c6135a0565b9050610f3e818c8c856135cc565b909650945085851715610fb1576003810154610f649087906001600160801b031661570c565b6003820154610f84908790600160801b90046001600160801b031661570c565b6001600160801b039182169116600160801b026fffffffffffffffffffffffffffffffff19161760038201555b6001600160801b038916861785171561101c57604080516001600160801b038b16815260208101889052808201879052905160028c810b92908e900b9133917f0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c919081900360600190a45b6110346002805460ff60e01b1916600160e01b179055565b611044338c8c858a8a8e8e6136f1565b505050509550959350505050565b600254600160c81b900460101615611169576005546040517f8de0a8ee0000000000000000000000000000000000000000000000000000000080825233600483018181526001600160a01b038a81166024860152604485018a90526064850189905260a06084860190815260a486018890526111699694959190941693638de0a8ee93928c928c928c928c928c929060c401848480828437600081840152601f19601f8201169050808301925050509750505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050506040513d602081101561113f57600080fd5b50517fffffffff0000000000000000000000000000000000000000000000000000000016906137ed565b61117161248d565b60008060008061117f6124c6565b9092509050600088156111c85761119b896064620f4240613873565b90506111c87f00000000000000000000000000000000000000000000000000000000000000008b8b612d4d565b6000881561120c576111df896064620f4240613873565b905061120c7f00000000000000000000000000000000000000000000000000000000000000008c8b612d4d565b61121882828a8a6138f3565b611220612dd7565b95508561122d83866156bb565b1115611265576040517f6dbca1fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126d6130e9565b94508461127a82856156bb565b11156112b2576040517fc998149f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025495849003959483900394600160d01b900461ffff16801561130f57600087156112e8576112e588836103e8613935565b90505b60008715611300576112fd88846103e8613935565b90505b61130c82828484612e81565b50505b604080518c8152602081018c90528082018990526060810188905290516001600160a01b038e169133917fbdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca6339181900360800190a350505050506113806002805460ff60e01b1916600160e01b179055565b600254600160c81b90046020161561146b5761146b63343d37ff60e01b600560009054906101000a90046001600160a01b03166001600160a01b031663343d37ff338b8b8b89898d8d6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b50505050505050565b60008061147f61248d565b600061148c3388886135a0565b60038101549091506001600160801b0380821691600160801b900481169087168210156114b7578196505b806001600160801b0316866001600160801b031611156114d5578095505b6001600160801b038787171615611621576001600160801b0387830381168783038216600160801b026fffffffffffffffffffffffffffffffff1916176003850155879550869450851615611558576115587f00000000000000000000000000000000000000000000000000000000000000008b876001600160801b0316612d4d565b6001600160801b0384161561159b5761159b7f00000000000000000000000000000000000000000000000000000000000000008b866001600160801b0316612d4d565b6115c0856001600160801b0316600003856001600160801b0316600003600080612e81565b604080516001600160a01b038c1681526001600160801b038088166020830152861681830152905160028a810b92908c900b9133917f70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0919081900360600190a45b6116396002805460ff60e01b1916600160e01b179055565b5050509550959350505050565b600254600160c81b8104608016151590600160e01b900460ff1661167d57604051636798480960e11b815260040160405180910390fd5b6005546001600160a01b031633036116cb57806116c6576040517f3a4528ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170b565b8015611703576040517fd39b8e0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170b61327a565b611714826139ce565b5050565b600280546001600160a01b03811691600160a01b8204900b9061ffff600160b81b8204169060ff600160c81b820481169160009182918291600160e01b909104168061177757604051636798480960e11b815260040160405180910390fd5b505060085495969495939492936001600160801b03660100000000000082041693600282810b9450630100000090920490910b9150565b60008060008612156117d3576040516334cb3a0160e11b815260040160405180910390fd5b6117db61248d565b600087156118315760006117ed612dd7565b90506117fc8860008888612d5d565b6000611806612dd7565b905061181a6118158383615733565b613a38565b925061182a836000806000612e81565b5050611876565b600061183b6130e9565b905061184a6000898888612d5d565b60006118546130e9565b90506118636118158383615733565b9250611873600084600080612e81565b50505b868114611881578096505b50856000036118a357604051633ed6d50560e21b815260040160405180910390fd5b6118bb6002805460ff60e01b1916600160e01b179055565b6118cb8888888860018989612395565b6118d361248d565b6118db6124c6565b50506000806000806118ee8b8b8b6126c4565b949a509298509096509450925090508a1561198d57600085121561193a5761193a7f00000000000000000000000000000000000000000000000000000000000000008d87600003612d4d565b858a038a871461196f5761196f7f00000000000000000000000000000000000000000000000000000000000000008f83612d4d565b61198761197b82613a38565b60000387846000612e81565b50611a13565b60008612156119c4576119c47f00000000000000000000000000000000000000000000000000000000000000008d88600003612d4d565b848a038a86146119f9576119f97f00000000000000000000000000000000000000000000000000000000000000008f83612d4d565b611a1187611a0683613a38565b600003600085612e81565b505b60408051878152602081018790526001600160a01b03868116828401526001600160801b0385166060830152600286900b60808301529151918e169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67919081900360a00190a3611a946002805460ff60e01b1916600160e01b179055565b611aa48c8c8c8c8a8a8e8e613151565b5050505097509795505050505050565b60008060008787611ac582826133e3565b876001600160801b0316600003611b08576040517fe6ace6df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b278b8b8b611b208c6001600160801b0316613a4c565b8b8b6134b0565b611b2f61248d565b60028054600160a01b810490910b906001600160a01b03166000819003611b82576040517f812eb65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600854600160b01b9004600290810b9081908d900b81611ba457611ba4615746565b078160020b8e60020b81611bba57611bba615746565b071760020b15611bf6576040517f5f6e14f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50611c158c8c611c0e8d6001600160801b0316613a4c565b8585613a5f565b50909750955060009150819050611c2a6124c6565b91509150611c3a87878b8b613b0e565b8615611c585781611c49612dd7565b611c539190615733565b611c5b565b60005b91508515611c7b5780611c6c6130e9565b611c769190615733565b611c7e565b60005b905086821015611ca357611c9c8a6001600160801b03168389613935565b9450611ca7565b8994505b85811015611ce7576000611cc58b6001600160801b03168389613935565b9050856001600160801b0316816001600160801b03161015611ce5578095505b505b846001600160801b0316600003611d2a576040517fbeba2a6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611d378e8e8e6135a0565b9050611d56818e8e611d518a6001600160801b0316613a4c565b6135cc565b9098509650508615611dab5786821115611d9c57611d977f00000000000000000000000000000000000000000000000000000000000000008f898503612d4d565b611dab565b868214611dab57611dab61575c565b8515611dfa5785811115611deb57611de67f00000000000000000000000000000000000000000000000000000000000000008f888403612d4d565b611dfa565b858114611dfa57611dfa61575c565b611e078787600080612e81565b8a60020b8c60020b8e6001600160a01b03167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde33898c8c60405180856001600160a01b03168152602001846001600160801b0316815260200183815260200182815260200194505050505060405180910390a4611e926002805460ff60e01b1916600160e01b179055565b611eb38d8d8d611eaa896001600160801b0316613a4c565b8b8b8f8f6136f1565b505050509750975097945050505050565b611ecc61324e565b6005546001600160a01b031680611f0f576040517f9e727ce300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614611f2757611f2761327a565b61171482613b50565b611f3861324e565b611f4061327a565b611f4a6000613b50565b610e9181613bb9565b611f5b61324e565b611f6361327a565b6001600160a01b038116158015611f865750600254600160d01b900461ffff1615155b15611f9557611f956000613372565b610e9181613c14565b600254600160b81b810461ffff1690600160c81b900460ff8116906080161561203e57600560009054906101000a90046001600160a01b03166001600160a01b031663f70d93626040518163ffffffff1660e01b8152600401602060405180830381865afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120389190615784565b91505090565b5090565b61204a61324e565b61205261327a565b60008160020b13158061206a57506101f4600282900b135b806120845750600854600282810b600160b01b909204900b145b156120bb576040517fafe09f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9181613c6f565b60006120cf82613cd8565b6002549091506001600160a01b031615612115576040517f52669adc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169190911790915560055416156121c457600554604080517f636fd804000000000000000000000000000000000000000000000000000000008082523360048301526001600160a01b03868116602484015292516121c49491939091169163636fd80491604480830192602092919082900301816000875af1158015611129573d6000803e3d6000fd5b6000806000806121d2614031565b600280547fffffffff0000ffffff000000ffffffffffffffffffffffffffffffffffffffff8116600160a01b62ffffff8d16027fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160d01b61ffff881602178255604080516001600160a01b038e168152928c900b60208401528051969a50949850929650909450600160c81b90910460ff16927f98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95929181900390910190a161229d836139ce565b6122a684613c6f565b6122af82613c14565b61ffff8516158015906122c957506001600160a01b038216155b15612300576040517fa709b9af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61230985613372565b604081161561146b57600554604080517f82dd6522000000000000000000000000000000000000000000000000000000008082523360048301526001600160a01b038b8116602484015260028b900b6044840152925161146b949193909116916382dd652291606480830192602092919082900301816000875af1158015611129573d6000803e3d6000fd5b600254600160c81b90046001161561146b5761146b63029c1cb760e01b600560009054906101000a90046001600160a01b03166001600160a01b031663029c1cb7338b8b8b8b8b8b8b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b031681526020018715158152602001868152602001856001600160a01b031681526020018415158152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b600254600160e01b900460ff166124b757604051636798480960e11b815260040160405180910390fd5b6002805460ff60e01b19169055565b6000806124d1612dd7565b6124d96130e9565b90925090506001600160801b038211806124f957506001600160801b0381115b156125da576006546001600160a01b03166001600160801b03831115612571576125667f0000000000000000000000000000000000000000000000000000000000000000827fffffffffffffffffffffffffffffffff000000000000000000000000000000018601612d4d565b6001600160801b0392505b6001600160801b038211156125d8576125cd7f0000000000000000000000000000000000000000000000000000000000000000827fffffffffffffffffffffffffffffffff000000000000000000000000000000018501612d4d565b6001600160801b0391505b505b600854660100000000000090046001600160801b031660008190036125fe57509091565b600b546001600160801b0380821691600160801b90041681851181851181806126245750805b156126bb57811561265c57612652846001600160801b03168803600160801b876001600160801b0316613935565b6000805490910190555b801561268f57612685836001600160801b03168703600160801b876001600160801b0316613935565b6001805490910190555b6001600160801b03808816908716600160801b026fffffffffffffffffffffffffffffffff191617600b555b50505050509091565b60008060008060008087600003612707576040517f79db984000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f80000000000000000000000000000000000000000000000000000000000000008803612747576040516334cb3a0160e11b815260040160405180910390fd5b6040805161014081018252600060208201819052606082018190526080820181905260a08201819052808b1360c08301529181018a9052600854600281810b61012084015263010000008204810b610100840152805461ffff600160d01b820481168552600160b81b82041660e08501526001600160a01b0381169850600160a01b9004900b9550660100000000000090046001600160801b031693509085900361281e576040517f812eb65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b891561289757846001600160a01b0316886001600160a01b031610158061285357506401000276a36001600160a01b03891611155b1561288a576040517f1662672300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546080820152612915565b846001600160a01b0316886001600160a01b03161115806128d5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03891610155b1561290c576040517f1662672300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015460808201525b6129476040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008b61295957826101200151612960565b8261010001515b6001600160a01b03881683529050612977816140e9565b6001600160a01b03908116602084018190526129b4918e918a918e1611821515146129a65784602001516129a8565b8c5b888f8860e001516143dd565b60808601526060850152604084015260c084015190975015612a0c576129e38260800151836040015101613a38565b8b039a50612a026129f78360600151613a38565b6060850151906145af565b6060840152612a44565b612a198260600151613a38565b8b019a50612a3e612a338360800151846040015101613a38565b6060850151906145cb565b60608401525b825115612a8657825160808301516000916103e891612a62916145e1565b81612a6f57612a6f615746565b608085018051929091049182900390529490940193505b6001600160801b03851615612abd57612ab18260800151600160801b876001600160801b0316613935565b60808401805190910190525b8160200151876001600160a01b031603612bd9578260200151612af857600160208401528b612aee57600054612af2565b6001545b60a08401525b60008c15612b675750608083015160a0840151600283810b600081815260036020819052604082209081018054828601805490980390975595909403909455600190920154600160801b810490910b61010087015261012086019190915260001983019750600f0b9003612bc7565b5060a08301516080840151600283810b60008181526003602081905260409091209081018054828501805490970390965594909303909355600190910154600160981b810490910b6101208601526101008501919091529095508590600f0b5b612bd1868261460b565b955050612bfb565b81516001600160a01b03881614612bfb57612bf387613cd8565b955050612c22565b508915801590612c1d5750886001600160a01b0316866001600160a01b031614155b612947575b60008a83604001510390508260c0015115158c151514612c4757826060015181612c4e565b8083606001515b600280547fffffffffffffffffff000000000000000000000000000000000000000000000016600160a01b62ffffff8b160273ffffffffffffffffffffffffffffffffffffffff1916176001600160a01b038b161790556020850151919a509850159050612d23576101008201516101208301516008805462ffffff92831665ffffffffffff199091161763010000009290931691909102919091177fffffffffffffffffffff00000000000000000000000000000000ffffffffffff1666010000000000006001600160801b038716021790555b8a15612d36576080820151600055612d3f565b60808201516001555b505093975093979195509350565b612d588383836146b7565b505050565b6040517f2c8958f60000000000000000000000000000000000000000000000000000000081523390632c8958f690612d9f9087908790879087906004016157e8565b600060405180830381600087803b158015612db957600080fd5b505af1158015612dcd573d6000803e3d6000fd5b5050505050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c9190615808565b905090565b81811715613056576004546cffffffffffffffffffffffffff640100000000820481168401917101000000000000000000000000000000000090041682016000612ec84290565b60045490915061708063ffffffff9182168303909116101580612ef757506cffffffffffffffffffffffffff83115b80612f0e57506cffffffffffffffffffffffffff82115b15612fd5576006546001600160a01b03168315612f5057612f507f00000000000000000000000000000000000000000000000000000000000000008286612d4d565b8215612f8157612f817f00000000000000000000000000000000000000000000000000000000000000008285612d4d565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff8416179055612fba84613a38565b8803612fc584613a38565b9098509096039550600092508291505b50600480547fffff0000000000000000000000000000000000000000000000000000ffffffff16710100000000000000000000000000000000006cffffffffffffffffffffffffff938416027fffffffffffffffffffffffffffffff00000000000000000000000000ffffffff161764010000000093909216929092021790555b838317156130e357600b546001600160801b0380821691600160801b90041685156130995761308d6130888784615821565b61474d565b6001600160801b031691505b84156130b8576130ac6130888683615821565b6001600160801b031690505b6001600160801b039182169116600160801b026fffffffffffffffffffffffffffffffff191617600b555b50505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401612e3b565b60028054600160c81b90041615612dcd57612dcd639cb5a96360e01b600560009054906101000a90046001600160a01b03166001600160a01b0316639cb5a963338c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b8152600401808a6001600160a01b03168152602001896001600160a01b031681526020018815158152602001878152602001866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a50505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b600254600160e01b900460ff1661327857604051636798480960e11b815260040160405180910390fd5b565b604080517fe8ae2b690000000000000000000000000000000000000000000000000000000081527fb73ce166ead2f8e9add217713a7989e4edfba9625f71dfd2516204bb67ad3442600482015233602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163e8ae2b699160448083019260209291908290030181865afa158015613324573d6000803e3d6000fd5b505050506040513d602081101561333a57600080fd5b5051613278576040517f932984d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b61ffff8416908102919091179091556040519081527f3647dccc990d4941b0b05b32527ef493a98d6187b20639ca2f9743f3b55ca5e1906020015b60405180910390a150565b6133f0620d89e719615849565b60020b8160020b131561342f576040517f1445443d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160020b8160020b1361346e576040517fd9a841a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620d89e719600283900b1215611714576040517f746b1fc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254600160c81b900460041615613598576005546040517f5e2411b20000000000000000000000000000000000000000000000000000000080825233600483018181526001600160a01b038b8116602486015260028b810b60448701528a900b6064860152600f89900b608486015260c060a4860190815260c486018890526135989694959190941693635e2411b293928d928d928d928d928d928d929160e401848480828437600081840152601f19601f820116905080830192505050985050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050505050565b62ffffff818116908316601885811b91909117901b176000908152600a602052604090205b9392505050565b6002805460008054600154919384936001600160a01b03811693600160a01b90910490910b918491829190600f89900b156136285761361260038c878c86866000614763565b935061362560038b878c86866001614763565b92505b60008061363a60038e8e8a8888614876565b9150915061364a8e8c8484614914565b5050505086600f0b6000146136e45781806136625750805b1561367b5761367b898984848760008d600f0b12614a12565b600061368a8a8a8a8789613a5f565b91985096509050600f81900b156136e2576008546136bb90660100000000000090046001600160801b03168961460b565b600860066101000a8154816001600160801b0302191690836001600160801b031602179055505b505b5050505094509492505050565b600254600160c81b900460081615612dcd57612dcd63d685201060e01b600560009054906101000a90046001600160a01b03166001600160a01b031663d6852010338c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b8152600401808a6001600160a01b03168152602001896001600160a01b031681526020018860020b81526020018760020b815260200186600f0b8152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a50505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082811690821614611714576040517fd3f5153b0000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008216600482015260240160405180910390fd5b60008315806138945750508282028284828161389157613891615746565b04145b156138b557600082116138a657600080fd5b818104908290061515016135c5565b6138c0848484613935565b9050600082806138d2576138d2615746565b84860911156135c55760001981106138e957600080fd5b6001019392505050565b6040517fa60b0d3c000000000000000000000000000000000000000000000000000000008152339063a60b0d3c90612d9f9087908790879087906004016157e8565b6000838302816000198587098281108382030391505080841161395757600080fd5b8060000361396a575082900490506135c5565b8385870960008581038616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030291819003819004600101858411909403939093029190930391909104170290509392505050565b600280547fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b61ffff8416908102919091179091556040519081527f598b9f043c813aa6be3426ca60d1c65d17256312890be5118dab55b0775ebe2a906020016133d8565b806000811215613a4757600080fd5b919050565b806000600f82900b1215613a4757600080fd5b600080600080613a6e896140e9565b90506000613a7b896140e9565b90506000808b60020b8960020b1215613aa057613a9984848c614b0b565b9150613ade565b8a60020b8960020b1215613ad057613ab988848c614b0b565b9150613ac684898c614b4b565b9050899450613ade565b613adb84848c614b4b565b90505b60008a600f0b12613af0578181613af9565b81600003816000035b909d909c50949a509398505050505050505050565b6040517f3dd657c50000000000000000000000000000000000000000000000000000000081523390633dd657c590612d9f9087908790879087906004016157e8565b600280547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b60ff8416908102919091179091556040519081527f3a6271b36c1b44bd6a0a0d56230602dc6919b7c17af57254306fadf5fee69dc3906020016133d8565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f27a3944eff2135a57675f17e72501038982b73620d01f794c72e93d61a3932a2906020016133d8565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb0b573c1f636e1f8bd9b415ba6c04d6dd49100bc25493fc6305b65ec0e581df3906020016133d8565b600880547fffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffff16600160b01b62ffffff841602179055604051600282900b81527f01413b1d5d4c359e9a0daa7909ecda165f6e8c51fe2ff529d74b22a5a7c02645906020016133d8565b60006401000276a36001600160a01b0383161080613d13575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b15613d4a576040517f55cf1e2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b77ffffffffffffffffffffffffffffffffffffffff00000000602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110613deb57607f810383901c9150613df5565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581027ffffffffffffffffffffffffffffffffffd709b7e5480fba5a50fed5e62ffc5568101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461402257886001600160a01b0316614007826140e9565b6001600160a01b0316111561401c5781614024565b80614024565b815b9998505050505050505050565b6040517f82b13d8d0000000000000000000000000000000000000000000000000000000081523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382b13d8d90602401608060405180830381865afa1580156140b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140db919061587e565b935093509350935090919293565b6000600282900b60171d62ffffff818401821816620d89e881111561413a576040517f3c10250f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160801b600182161561415b57506ffffcb933bd6fad37aa2d162d1a5940015b600282161561417a576ffff97272373d413259a46990580e213a0260801c5b6004821615614199576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156141b8576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156141d7576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156141f6576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615614215576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614234576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614254576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614274576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614294576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156142b4576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156142d4576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156142f4576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615614314576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614334576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614355576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614375576e5d6af8dedb81196699c329225ee6040260801c5b6204000082106143bb576204000082161561439e576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156143bb576b048a170391f7dc42444e8fa20260801c5b60008560020b13156143cc57600019045b63ffffffff0160201c949350505050565b60008060008061569d8a6143f357614b7b6143f7565b614b8a5b9050600087126144cf576000614424888861ffff16620f42400362ffffff16620f424062ffffff16613935565b90506144358a8c8b8563ffffffff16565b94508481106144625789955061445b8561ffff891662ffffff620f424082900316613873565b92506144a8565b61446e8b8a838f614b99565b9550856001600160a01b03168a6001600160a01b0316036144915761449161575c565b6144a0868c8b8563ffffffff16565b945084880392505b6144c7868c8b8f6144bb57614bb26144bf565b614bc15b63ffffffff16565b9350506145a1565b61569d8b6144df57614bb26144e3565b614bc15b90506144f48a8c8b8463ffffffff16565b9350876000039750600088121561451e576040516334cb3a0160e11b815260040160405180910390fd5b83881061452d57899550614572565b6145398b8a8a8f614bd0565b9550856001600160a01b03168a6001600160a01b03161461456657614563868c8b8463ffffffff16565b93505b87841115614572578793505b614581868c8b8563ffffffff16565b945061459d8561ffff891662ffffff620f424082900316613873565b9250505b509650965096509692505050565b808203828113156000831215146145c557600080fd5b92915050565b818101828112156000831215146145c557600080fd5b6000821580614602575050818102818382816145ff576145ff615746565b04145b6145c557600080fd5b60008082600f0b121561466657508082016001600160801b0380841690821610614661576040517f1301f74800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6145c5565b826001600160801b03168284019150816001600160801b031610156145c5576040517f997402f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000526001600160a01b03841660045282602452602060006044600080895af19150813d1560203d1460016000511416171691508060405250806130e3576040517fe465903e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160801b0381168114613a4757600080fd5b600286900b6000908152602088905260408120805482614783828961460b565b6001600160801b031690506d09745258e83de0d0f4e400fce7998111156147d6576040517f25b8364a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830154600f0b856147fa5788600f0b81600f0b6147f59190615821565b61480c565b88600f0b81600f0b61480c91906158e8565b6001850180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905581845581159450600083900361486757841594508960020b8b60020b136148675760038401879055600284018890555b50505050979650505050505050565b600285810b60009081526020889052604080822087840b8084529183209293849391929088900b12156148ec578860020b8760020b126148c7578160020154860393508160030154850392506148d6565b81600201549350816003015492505b6002810154600382015494039390920391614907565b81600201548160020154039350816003015481600301540392505b5050965096945050505050565b8354600f84900b60000361493e57806001600160801b031660000361493957506130e3565b614954565b614948818561460b565b6001600160801b031685555b60018501546002860154600085831461498b57600188018690556149888387036001600160801b038616600160801b613935565b90505b60008583146149b857600289018690556149b58387036001600160801b038716600160801b613935565b90505b6001600160801b038282171615614a0757600389018054600160801b6001600160801b03808316860181166fffffffffffffffffffffffffffffffff1990931683178290048116850116021790555b505050505050505050565b60085463010000008104600290810b919081900b90600160c81b900463ffffffff168282828915614a5357614a4b8c898386868c614be0565b919450925090505b8815614a6f57614a678b898386868c614be0565b919450925090505b8260020b8660020b141580614a8a57508160020b8560020b14155b80614aa157508363ffffffff168163ffffffff1614155b15614afd576008805462ffffff80861663010000000265ffffffffffff1963ffffffff8616600160c81b02167fffffff00000000ffffffffffffffffffffffffffffffffffffff00000000000090931692909217908516171790555b505050505050505050505050565b60008082600f0b1215614b3357614b2b6118158585856000036000614cd5565b600003614b43565b614b436118158585856001614cd5565b949350505050565b60008082600f0b1215614b6b57614b2b6118158585856000036000614d82565b614b436118158585856001614d82565b6000614b438385846001614d82565b6000614b438484846001614cd5565b6000614ba9858585856001614e05565b95945050505050565b6000614b438385846000614cd5565b6000614b438484846000614d82565b6000614ba9858585856000614e05565b60008060008315614c2a57600080614bf960038c615047565b915091508a60020b8860020b03614c1257819750614c23565b8a60020b8760020b03614c23578096505b5050614cb3565b6000808a60020b8860020b128015614c4757508a60020b8760020b135b15614c7057508690508560028a810b908c900b1315614c68578a9650614ca3565b8a9750614ca3565b614c7e600760098b8e615217565b600281810b600090815260036020526040902060010154600160801b9004900b925090505b614cb060038c84846152e9565b50505b6000614cc3600760098a8d615434565b969a9599509597509395505050505050565b60006001600160a01b0385850381169085168110614cf257600080fd5b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b1683614d4b57866001600160a01b0316614d388383896001600160a01b0316613935565b81614d4557614d45615746565b04614d77565b614d77614d628383896001600160a01b0316613873565b886001600160a01b0316808204910615150190565b979650505050505050565b6000846001600160a01b0316846001600160a01b03161015614da357600080fd5b6001600160a01b038585031682614dda57614dd581856001600160801b03166c01000000000000000000000000613935565b614dfb565b614dfb81856001600160801b03166c01000000000000000000000000613873565b9695505050505050565b6000856001600160a01b0316600003614e1d57600080fd5b846001600160801b0316600003614e3357600080fd5b83600003614e42575084614ba9565b81151583151503614f50577bffffffffffffffffffffffffffffffff000000000000000000000000606086901b168215614efe576001600160a01b03871685810290868281614e9357614e93615746565b0403614ec357818101828110614ec157614eb7838a6001600160a01b031683613873565b9350505050614ba9565b505b614ef582614eea888b6001600160a01b03168681614ee357614ee3615746565b04906154cc565b808204910615150190565b92505050614ba9565b6001600160a01b03871685810290868281614f1b57614f1b615746565b0414614f2657600080fd5b808211614f3257600080fd5b614ef5614f4b838a6001600160a01b0316848603613873565b6154dc565b8115614fc657614fbf614f4b6001600160a01b03861115614f9157614f8c866c01000000000000000000000000896001600160801b0316613935565b614faf565b6001600160801b038716606087901b81614fad57614fad615746565b045b6001600160a01b038916906154cc565b9050614ba9565b60006001600160a01b03851115614ffd57614ff8856c01000000000000000000000000886001600160801b0316613873565b61501a565b61501a606086901b6001600160801b038816808204910615150190565b905080876001600160a01b03161161503157600080fd5b6001600160a01b03871603905095945050505050565b600281810b60008181526020859052604081206001810180548383557fffffffffffffffffffff000000000000000000000000000000000000000000008116909155818501839055600390910191909155600160801b8104830b92600160981b909104900b90620d89e71914806150cf57506150c6620d89e719615849565b60020b8360020b145b1561514b57600283900b6000908152602085905260409020600101805462ffffff808516600160801b0272ffffff0000000000000000000000000000000019918516600160981b02919091167fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff90921691909117179055615210565b8060020b8260020b0361518a576040517f0d6e094900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600282810b6000908152602086905260408082206001908101805462ffffff808816600160981b027fffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffff909216919091179091559385900b83529120018054918416600160801b0272ffffff00000000000000000000000000000000199092169190911790555b9250929050565b600190810190600090600883811d610d8a01901c90829061ffff83161b851663ffffffff161561527a5761524b87856154f2565b90945090925090508015615260575050614b43565b61527186610d8b840160010b6154f2565b90945090925090505b806152bd576152988563ffffffff168360010193508360010b615523565b9093509050806152b05750620d89e89150614b439050565b6152ba8684615671565b92505b614d77877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2768501615671565b600283900b620d89e71914806153105750615307620d89e719615849565b60020b8360020b145b6130e3578260020b8260020b12801561532e57508260020b8160020b135b615364576040517fe45ac17d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600283810b60009081526020959095526040808620600190810180547fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff16600160981b62ffffff878116820272ffffff000000000000000000000000000000001990811693909317600160801b8a831681029190911790945597860b8a52848a20840180547fffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffff1698909916908102979097179097559390920b865290942090930180549092169202919091179055565b816000806154718785600881901d600181810b60009081526020949094526040909320805460ff9093169390931b80831890935591811490151891565b9150915081156154c257610d8a01600181810b60081d80820b6000908152602089905260409020805460ff9094169290921b8084189092558215919092148181189350146154c2576001811b831892505b5050949350505050565b808201828110156145c557600080fd5b806001600160a01b0381168114613a4757600080fd5b600881901d600181900b60009081526020849052604081205481906155179085615523565b93969095509293505050565b60008060ff831684811c80830361553f578460ff179350615668565b7f555555555555555555555555555555555555555555555555555555555555555560008290038216908116156001600160801b0382161560071b1777ffffffffffffffff0000000000000000ffffffffffffffff82161560061b177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff82161560051b177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff82161560041b177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff82161560031b177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f82161560021b177f33333333333333333333333333333333333333333333333333333333333333339091161560011b1760ff1685019350600192505b50509250929050565b600181900b600090815260208390526040902054600882901b906156959082615523565b509392505050565b613278615908565b634e487b7160e01b600052601160045260246000fd5b808201808211156145c5576145c56156a5565b600081600f0b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008103615703576157036156a5565b60000392915050565b6001600160801b0381811683821601908082111561572c5761572c6156a5565b5092915050565b818103818111156145c5576145c56156a5565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b805161ffff81168114613a4757600080fd5b60006020828403121561579657600080fd5b6135c582615772565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b848152836020820152606060408201526000614dfb60608301848661579f565b60006020828403121561581a57600080fd5b5051919050565b8082018281126000831280158216821582161715615841576158416156a5565b505092915050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103615703576157036156a5565b6000806000806080858703121561589457600080fd5b61589d85615772565b935060208501518060020b81146158b357600080fd5b92506158c160408601615772565b915060608501516001600160a01b03811681146158dd57600080fd5b939692955090935050565b818103600083128015838313168383128216171561572c5761572c6156a5565b634e487b7160e01b600052605160045260246000fdfea164736f6c6343000814000aa164736f6c6343000814000a","deployedBytecode":"0x608060405234801561001057600080fd5b50600436106100365760003560e01c806304889e261461003b578063d9181cd314610084575b600080fd5b6100436100f2565b6040805173ffffffffffffffffffffffffffffffffffffffff9586168152938516602085015291841683830152909216606082015290519081900360800190f35b6100c96004803603606081101561009a57600080fd5b5073ffffffffffffffffffffffffffffffffffffffff8135811691602081013582169160409091013516610177565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b600080600080610148600054600154606082901c9273ffffffffffffffffffffffff000000000000000060409390931b9290921660a082901c179173ffffffffffffffffffffffffffffffffffffffff90911690565b91967f000000000000000000000000000000000000000000000000000000000000000096509094509092509050565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101bb57600080fd5b6bffffffffffffffffffffffff604084901c16606085901b176000557fffffffffffffffffffffffff000000000000000000000000000000000000000060a084901b1673ffffffffffffffffffffffffffffffffffffffff8316176001558282604051602001808373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060405160208183030381529060405280519060200120604051610280906102b2565b8190604051809103906000f59050801580156102a0573d6000803e3d6000fd5b50600060018190558055949350505050565b615d05806102c08339019056fe60e06040523480156200001157600080fd5b5060006200001e620000b0565b6001600160a01b0390811660c05290811660a052166080529050620d89e719620000488162000273565b6008805462ffffff93841663010000000265ffffffffffff1990911693909216929092171790556002805460ff60e01b1916600160e01b1790556001600160a01b038116156200009d576200009d8162000129565b50620000aa60036200017d565b6200031e565b600080600080336001600160a01b03166304889e266040518163ffffffff1660e01b8152600401608060405180830381865afa158015620000f5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200011b9190620002c1565b935093509350935090919293565b600580546001600160a01b0319166001600160a01b0383169081179091556040519081527f27a3944eff2135a57675f17e72501038982b73620d01f794c72e93d61a3932a29060200160405180910390a150565b620d89e7196200018d8162000273565b620d89e7196000818152602085905260409020600101805465ffffffffffff60801b1916600160981b62ffffff9485160262ffffff60801b191617600160801b949093169390930291909117909155620001e78162000273565b826000620001f9620d89e71962000273565b60020b60020b81526020019081526020016000206001016010846000620d89e719620002259062000273565b60020b81526020810191909152604001600020600101805462ffffff948516600160981b0262ffffff60981b1990911617905581549383166101009190910a90810292021990921617905550565b60008160020b627fffff1981036200029b57634e487b7160e01b600052601160045260246000fd5b60000392915050565b80516001600160a01b0381168114620002bc57600080fd5b919050565b60008060008060808587031215620002d857600080fd5b620002e385620002a4565b9350620002f360208601620002a4565b92506200030360408601620002a4565b91506200031360608601620002a4565b905092959194509250565b60805160a05160c05161592b620003da600039600081816109ba01528181610c4a015281816111e60152818161156c01528181611911015281816119d301528181611dbe0152818161258501528181612f5b015261311a0152600081816102f301528181610cd0015281816111a201528181611529015281816119490152818161199b01528181611d6f0152818161251e01528181612e080152612f2a01526000818161092c015281816132d90152614070015261592b6000f3fe608060405234801561001057600080fd5b50600436106102775760003560e01c806397ce1c5111610160578063d5c35a7e116100d8578063ecdecf421161008c578063f085a61011610071578063f085a61014610b0c578063f30dba9314610b2c578063f637731d14610bc657600080fd5b8063ecdecf4214610af0578063ef01df4f14610af957600080fd5b8063d8619037116100bd578063d861903714610a0f578063ddca3f4314610a3c578063e76c01e414610a5b57600080fd5b8063d5c35a7e146109dc578063d8544cf3146109e957600080fd5b8063c45a01551161012f578063cc1f97cf11610114578063cc1f97cf1461097b578063d0c93a7c146109a1578063d21220a7146109b557600080fd5b8063c45a015514610927578063c677e3e01461094e57600080fd5b806397ce1c51146107335780639e4e022714610794578063aafe29c014610833578063bca57f811461090757600080fd5b80634f1eb3d8116101f35780636378ae44116101c25780637bd78025116101a75780637bd78025146106ba5780638380edb7146106f15780638e0055531461071257600080fd5b80636378ae441461068a57806370cf754a146106a557600080fd5b80634f1eb3d814610585578063514ea4bf146105d657806353e9786814610660578063578b9a361461067357600080fd5b8063128acb081161024a578063240a875a1161022f578063240a875a146104425780633b3bc70e14610465578063490e6cbc146104f957600080fd5b8063128acb081461035a5780631a6865021461040957600080fd5b8063050a4d211461027c5780630902f1ac146102a75780630dfe1681146102ee5780631131b11014610331575b600080fd5b600854610290906301000000900460020b81565b6040805160029290920b8252519081900360200190f35b600b546001600160801b0380821691600160801b9004165b60405180836001600160801b03168152602001826001600160801b031681526020019250505060405180910390f35b6103157f000000000000000000000000000000000000000000000000000000000000000081565b604080516001600160a01b039092168252519081900360200190f35b6004546103419063ffffffff1681565b6040805163ffffffff9092168252519081900360200190f35b6103f0600480360360a081101561037057600080fd5b6001600160a01b0382358116926020810135151592604082013592606083013516919081019060a0810160808201356401000000008111156103b157600080fd5b8201836020820111156103c357600080fd5b803590602001918460018302840111640100000000831117156103e557600080fd5b509092509050610bec565b6040805192835260208301919091528051918290030190f35b60085461042690660100000000000090046001600160801b031681565b604080516001600160801b039092168252519081900360200190f35b6104636004803603602081101561045857600080fd5b503561ffff16610dfc565b005b6103f06004803603608081101561047b57600080fd5b8135600290810b92602081013590910b916001600160801b0360408301351691908101906080810160608201356401000000008111156104ba57600080fd5b8201836020820111156104cc57600080fd5b803590602001918460018302840111640100000000831117156104ee57600080fd5b509092509050610e94565b6104636004803603608081101561050f57600080fd5b6001600160a01b03823516916020810135916040820135919081019060808101606082013564010000000081111561054657600080fd5b82018360208201111561055857600080fd5b8035906020019184600183028401116401000000008311171561057a57600080fd5b509092509050611052565b6102bf600480360360a081101561059b57600080fd5b506001600160a01b03813516906020810135600290810b91604081013590910b906001600160801b0360608201358116916080013516611474565b610629600480360360208110156105ec57600080fd5b50600a60205235600090815260409020805460018201546002830154600390930154919290916001600160801b0380821691600160801b90041685565b604080519586526020860194909452848401929092526001600160801b039081166060850152166080830152519081900360a00190f35b600654610315906001600160a01b031681565b60085461034190600160c81b900463ffffffff1681565b61069360005481565b60408051918252519081900360200190f35b6104266d09745258e83de0d0f4e400fce79981565b6004546cffffffffffffffffffffffffff6401000000008204811691710100000000000000000000000000000000009004166102bf565b600254600160e01b900460ff16604080519115158252519081900360200190f35b6104636004803603602081101561072857600080fd5b503561ffff16611646565b61073b611718565b604080516001600160a01b039098168852600296870b602089015261ffff9095168786015260ff90931660608701526001600160801b039091166080860152830b60a085015290910b60c0830152519081900360e00190f35b6103f0600480360360c08110156107aa57600080fd5b6001600160a01b0382358116926020810135821692604082013515159260608301359260808101359091169181019060c0810160a08201356401000000008111156107f457600080fd5b82018360208201111561080657600080fd5b8035906020019184600183028401116401000000008311171561082857600080fd5b5090925090506117ae565b6108e0600480360360c081101561084957600080fd5b6001600160a01b0382358116926020810135909116916040820135600290810b92606081013590910b916001600160801b03608083013516919081019060c0810160a08201356401000000008111156108a157600080fd5b8201836020820111156108b357600080fd5b803590602001918460018302840111640100000000831117156108d557600080fd5b509092509050611ab4565b6040805193845260208401929092526001600160801b031682820152519081900360600190f35b6104636004803603602081101561091d57600080fd5b503560ff16611ec4565b6103157f000000000000000000000000000000000000000000000000000000000000000081565b6106936004803603602081101561096457600080fd5b5060076020523560010b6000908152604090205481565b6104636004803603602081101561099157600080fd5b50356001600160a01b0316611f30565b60085461029090600160b01b900460020b81565b6103157f000000000000000000000000000000000000000000000000000000000000000081565b6008546102909060020b81565b610463600480360360208110156109ff57600080fd5b50356001600160a01b0316611f53565b61069360048036036020811015610a2557600080fd5b5060096020523560010b6000908152604090205481565b610a44611f9e565b6040805161ffff9092168252519081900360200190f35b60028054610aa6916001600160a01b03821691600160a01b810490910b9061ffff600160b81b820481169160ff600160c81b8204811692600160d01b83041691600160e01b90041686565b604080516001600160a01b03909716875260029590950b602087015261ffff9384168686015260ff90921660608601529091166080840152151560a0830152519081900360c00190f35b61069360015481565b600554610315906001600160a01b031681565b61046360048036036020811015610b2257600080fd5b503560020b612042565b610b8a60048036036020811015610b4257600080fd5b50600360208190529035600290810b600090815260409020805460018201548284015492909401549093600f81900b93600160801b8204810b93600160981b909204900b9186565b60408051968752600f9590950b6020870152600293840b868601529190920b6060850152608084019190915260a0830152519081900360c00190f35b61046360048036036020811015610bdc57600080fd5b50356001600160a01b03166120c4565b600080610bff8888888860008989612395565b610c0761248d565b600080610c126124c6565b91509150600080600080610c278d8d8d6126c4565b949c50929a509096509450925090508c15610cc2576000871215610c7357610c737f00000000000000000000000000000000000000000000000000000000000000008f89600003612d4d565b610c7f88888c8c612d5d565b610c87612dd7565b610c9189886156bb565b1115610cb057604051633ed6d50560e21b815260040160405180910390fd5b610cbd8888836000612e81565b610d43565b6000881215610cf957610cf97f00000000000000000000000000000000000000000000000000000000000000008f8a600003612d4d565b610d0588888c8c612d5d565b610d0d6130e9565b610d1788876156bb565b1115610d3657604051633ed6d50560e21b815260040160405180910390fd5b610d438888600084612e81565b8d6001600160a01b0316336001600160a01b03167fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca678a8a88878960405180868152602001858152602001846001600160a01b03168152602001836001600160801b031681526020018260020b81526020019550505050505060405180910390a3505050505050610de16002805460ff60e01b1916600160e01b179055565b610df18888888886868a8a613151565b965096945050505050565b610e0461324e565b610e0c61327a565b6103e861ffff82161180610e2f575060025461ffff828116600160d01b90920416145b80610e51575061ffff811615801590610e5157506006546001600160a01b0316155b15610e88576040517fa709b9af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9181613372565b50565b6000808686610ea382826133e3565b6f7fffffffffffffffffffffffffffffff6001600160801b0388161115610ef6576040517f8995290f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610f01886156ce565b9050610f11338b8b848b8b6134b0565b610f1961248d565b610f216124c6565b50506000610f30338c8c6135a0565b9050610f3e818c8c856135cc565b909650945085851715610fb1576003810154610f649087906001600160801b031661570c565b6003820154610f84908790600160801b90046001600160801b031661570c565b6001600160801b039182169116600160801b026fffffffffffffffffffffffffffffffff19161760038201555b6001600160801b038916861785171561101c57604080516001600160801b038b16815260208101889052808201879052905160028c810b92908e900b9133917f0c396cd989a39f4459b5fa1aed6a9a8dcdbc45908acfd67e028cd568da98982c919081900360600190a45b6110346002805460ff60e01b1916600160e01b179055565b611044338c8c858a8a8e8e6136f1565b505050509550959350505050565b600254600160c81b900460101615611169576005546040517f8de0a8ee0000000000000000000000000000000000000000000000000000000080825233600483018181526001600160a01b038a81166024860152604485018a90526064850189905260a06084860190815260a486018890526111699694959190941693638de0a8ee93928c928c928c928c928c929060c401848480828437600081840152601f19601f8201169050808301925050509750505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050506040513d602081101561113f57600080fd5b50517fffffffff0000000000000000000000000000000000000000000000000000000016906137ed565b61117161248d565b60008060008061117f6124c6565b9092509050600088156111c85761119b896064620f4240613873565b90506111c87f00000000000000000000000000000000000000000000000000000000000000008b8b612d4d565b6000881561120c576111df896064620f4240613873565b905061120c7f00000000000000000000000000000000000000000000000000000000000000008c8b612d4d565b61121882828a8a6138f3565b611220612dd7565b95508561122d83866156bb565b1115611265576040517f6dbca1fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61126d6130e9565b94508461127a82856156bb565b11156112b2576040517fc998149f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60025495849003959483900394600160d01b900461ffff16801561130f57600087156112e8576112e588836103e8613935565b90505b60008715611300576112fd88846103e8613935565b90505b61130c82828484612e81565b50505b604080518c8152602081018c90528082018990526060810188905290516001600160a01b038e169133917fbdbdb71d7860376ba52b25a5028beea23581364a40522f6bcfb86bb1f2dca6339181900360800190a350505050506113806002805460ff60e01b1916600160e01b179055565b600254600160c81b90046020161561146b5761146b63343d37ff60e01b600560009054906101000a90046001600160a01b03166001600160a01b031663343d37ff338b8b8b89898d8d6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b03168152602001878152602001868152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b50505050505050565b60008061147f61248d565b600061148c3388886135a0565b60038101549091506001600160801b0380821691600160801b900481169087168210156114b7578196505b806001600160801b0316866001600160801b031611156114d5578095505b6001600160801b038787171615611621576001600160801b0387830381168783038216600160801b026fffffffffffffffffffffffffffffffff1916176003850155879550869450851615611558576115587f00000000000000000000000000000000000000000000000000000000000000008b876001600160801b0316612d4d565b6001600160801b0384161561159b5761159b7f00000000000000000000000000000000000000000000000000000000000000008b866001600160801b0316612d4d565b6115c0856001600160801b0316600003856001600160801b0316600003600080612e81565b604080516001600160a01b038c1681526001600160801b038088166020830152861681830152905160028a810b92908c900b9133917f70935338e69775456a85ddef226c395fb668b63fa0115f5f20610b388e6ca9c0919081900360600190a45b6116396002805460ff60e01b1916600160e01b179055565b5050509550959350505050565b600254600160c81b8104608016151590600160e01b900460ff1661167d57604051636798480960e11b815260040160405180910390fd5b6005546001600160a01b031633036116cb57806116c6576040517f3a4528ef00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170b565b8015611703576040517fd39b8e0e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61170b61327a565b611714826139ce565b5050565b600280546001600160a01b03811691600160a01b8204900b9061ffff600160b81b8204169060ff600160c81b820481169160009182918291600160e01b909104168061177757604051636798480960e11b815260040160405180910390fd5b505060085495969495939492936001600160801b03660100000000000082041693600282810b9450630100000090920490910b9150565b60008060008612156117d3576040516334cb3a0160e11b815260040160405180910390fd5b6117db61248d565b600087156118315760006117ed612dd7565b90506117fc8860008888612d5d565b6000611806612dd7565b905061181a6118158383615733565b613a38565b925061182a836000806000612e81565b5050611876565b600061183b6130e9565b905061184a6000898888612d5d565b60006118546130e9565b90506118636118158383615733565b9250611873600084600080612e81565b50505b868114611881578096505b50856000036118a357604051633ed6d50560e21b815260040160405180910390fd5b6118bb6002805460ff60e01b1916600160e01b179055565b6118cb8888888860018989612395565b6118d361248d565b6118db6124c6565b50506000806000806118ee8b8b8b6126c4565b949a509298509096509450925090508a1561198d57600085121561193a5761193a7f00000000000000000000000000000000000000000000000000000000000000008d87600003612d4d565b858a038a871461196f5761196f7f00000000000000000000000000000000000000000000000000000000000000008f83612d4d565b61198761197b82613a38565b60000387846000612e81565b50611a13565b60008612156119c4576119c47f00000000000000000000000000000000000000000000000000000000000000008d88600003612d4d565b848a038a86146119f9576119f97f00000000000000000000000000000000000000000000000000000000000000008f83612d4d565b611a1187611a0683613a38565b600003600085612e81565b505b60408051878152602081018790526001600160a01b03868116828401526001600160801b0385166060830152600286900b60808301529151918e169133917fc42079f94a6350d7e6235f29174924f928cc2ac818eb64fed8004e115fbcca67919081900360a00190a3611a946002805460ff60e01b1916600160e01b179055565b611aa48c8c8c8c8a8a8e8e613151565b5050505097509795505050505050565b60008060008787611ac582826133e3565b876001600160801b0316600003611b08576040517fe6ace6df00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b611b278b8b8b611b208c6001600160801b0316613a4c565b8b8b6134b0565b611b2f61248d565b60028054600160a01b810490910b906001600160a01b03166000819003611b82576040517f812eb65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600854600160b01b9004600290810b9081908d900b81611ba457611ba4615746565b078160020b8e60020b81611bba57611bba615746565b071760020b15611bf6576040517f5f6e14f300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50611c158c8c611c0e8d6001600160801b0316613a4c565b8585613a5f565b50909750955060009150819050611c2a6124c6565b91509150611c3a87878b8b613b0e565b8615611c585781611c49612dd7565b611c539190615733565b611c5b565b60005b91508515611c7b5780611c6c6130e9565b611c769190615733565b611c7e565b60005b905086821015611ca357611c9c8a6001600160801b03168389613935565b9450611ca7565b8994505b85811015611ce7576000611cc58b6001600160801b03168389613935565b9050856001600160801b0316816001600160801b03161015611ce5578095505b505b846001600160801b0316600003611d2a576040517fbeba2a6c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000611d378e8e8e6135a0565b9050611d56818e8e611d518a6001600160801b0316613a4c565b6135cc565b9098509650508615611dab5786821115611d9c57611d977f00000000000000000000000000000000000000000000000000000000000000008f898503612d4d565b611dab565b868214611dab57611dab61575c565b8515611dfa5785811115611deb57611de67f00000000000000000000000000000000000000000000000000000000000000008f888403612d4d565b611dfa565b858114611dfa57611dfa61575c565b611e078787600080612e81565b8a60020b8c60020b8e6001600160a01b03167f7a53080ba414158be7ec69b987b5fb7d07dee101fe85488f0853ae16239d0bde33898c8c60405180856001600160a01b03168152602001846001600160801b0316815260200183815260200182815260200194505050505060405180910390a4611e926002805460ff60e01b1916600160e01b179055565b611eb38d8d8d611eaa896001600160801b0316613a4c565b8b8b8f8f6136f1565b505050509750975097945050505050565b611ecc61324e565b6005546001600160a01b031680611f0f576040517f9e727ce300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b336001600160a01b03821614611f2757611f2761327a565b61171482613b50565b611f3861324e565b611f4061327a565b611f4a6000613b50565b610e9181613bb9565b611f5b61324e565b611f6361327a565b6001600160a01b038116158015611f865750600254600160d01b900461ffff1615155b15611f9557611f956000613372565b610e9181613c14565b600254600160b81b810461ffff1690600160c81b900460ff8116906080161561203e57600560009054906101000a90046001600160a01b03166001600160a01b031663f70d93626040518163ffffffff1660e01b8152600401602060405180830381865afa158015612014573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120389190615784565b91505090565b5090565b61204a61324e565b61205261327a565b60008160020b13158061206a57506101f4600282900b135b806120845750600854600282810b600160b01b909204900b145b156120bb576040517fafe09f4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610e9181613c6f565b60006120cf82613cd8565b6002549091506001600160a01b031615612115576040517f52669adc00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6002805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038481169190911790915560055416156121c457600554604080517f636fd804000000000000000000000000000000000000000000000000000000008082523360048301526001600160a01b03868116602484015292516121c49491939091169163636fd80491604480830192602092919082900301816000875af1158015611129573d6000803e3d6000fd5b6000806000806121d2614031565b600280547fffffffff0000ffffff000000ffffffffffffffffffffffffffffffffffffffff8116600160a01b62ffffff8d16027fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff1617600160d01b61ffff881602178255604080516001600160a01b038e168152928c900b60208401528051969a50949850929650909450600160c81b90910460ff16927f98636036cb66a9c19a37435efc1e90142190214e8abeb821bdba3f2990dd4c95929181900390910190a161229d836139ce565b6122a684613c6f565b6122af82613c14565b61ffff8516158015906122c957506001600160a01b038216155b15612300576040517fa709b9af00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61230985613372565b604081161561146b57600554604080517f82dd6522000000000000000000000000000000000000000000000000000000008082523360048301526001600160a01b038b8116602484015260028b900b6044840152925161146b949193909116916382dd652291606480830192602092919082900301816000875af1158015611129573d6000803e3d6000fd5b600254600160c81b90046001161561146b5761146b63029c1cb760e01b600560009054906101000a90046001600160a01b03166001600160a01b031663029c1cb7338b8b8b8b8b8b8b6040518963ffffffff1660e01b815260040180896001600160a01b03168152602001886001600160a01b031681526020018715158152602001868152602001856001600160a01b031681526020018415158152602001806020018281038252848482818152602001925080828437600081840152601f19601f82011690508083019250505099505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b600254600160e01b900460ff166124b757604051636798480960e11b815260040160405180910390fd5b6002805460ff60e01b19169055565b6000806124d1612dd7565b6124d96130e9565b90925090506001600160801b038211806124f957506001600160801b0381115b156125da576006546001600160a01b03166001600160801b03831115612571576125667f0000000000000000000000000000000000000000000000000000000000000000827fffffffffffffffffffffffffffffffff000000000000000000000000000000018601612d4d565b6001600160801b0392505b6001600160801b038211156125d8576125cd7f0000000000000000000000000000000000000000000000000000000000000000827fffffffffffffffffffffffffffffffff000000000000000000000000000000018501612d4d565b6001600160801b0391505b505b600854660100000000000090046001600160801b031660008190036125fe57509091565b600b546001600160801b0380821691600160801b90041681851181851181806126245750805b156126bb57811561265c57612652846001600160801b03168803600160801b876001600160801b0316613935565b6000805490910190555b801561268f57612685836001600160801b03168703600160801b876001600160801b0316613935565b6001805490910190555b6001600160801b03808816908716600160801b026fffffffffffffffffffffffffffffffff191617600b555b50505050509091565b60008060008060008087600003612707576040517f79db984000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f80000000000000000000000000000000000000000000000000000000000000008803612747576040516334cb3a0160e11b815260040160405180910390fd5b6040805161014081018252600060208201819052606082018190526080820181905260a08201819052808b1360c08301529181018a9052600854600281810b61012084015263010000008204810b610100840152805461ffff600160d01b820481168552600160b81b82041660e08501526001600160a01b0381169850600160a01b9004900b9550660100000000000090046001600160801b031693509085900361281e576040517f812eb65500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b891561289757846001600160a01b0316886001600160a01b031610158061285357506401000276a36001600160a01b03891611155b1561288a576040517f1662672300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000546080820152612915565b846001600160a01b0316886001600160a01b03161115806128d5575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03891610155b1561290c576040517f1662672300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015460808201525b6129476040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b60008b61295957826101200151612960565b8261010001515b6001600160a01b03881683529050612977816140e9565b6001600160a01b03908116602084018190526129b4918e918a918e1611821515146129a65784602001516129a8565b8c5b888f8860e001516143dd565b60808601526060850152604084015260c084015190975015612a0c576129e38260800151836040015101613a38565b8b039a50612a026129f78360600151613a38565b6060850151906145af565b6060840152612a44565b612a198260600151613a38565b8b019a50612a3e612a338360800151846040015101613a38565b6060850151906145cb565b60608401525b825115612a8657825160808301516000916103e891612a62916145e1565b81612a6f57612a6f615746565b608085018051929091049182900390529490940193505b6001600160801b03851615612abd57612ab18260800151600160801b876001600160801b0316613935565b60808401805190910190525b8160200151876001600160a01b031603612bd9578260200151612af857600160208401528b612aee57600054612af2565b6001545b60a08401525b60008c15612b675750608083015160a0840151600283810b600081815260036020819052604082209081018054828601805490980390975595909403909455600190920154600160801b810490910b61010087015261012086019190915260001983019750600f0b9003612bc7565b5060a08301516080840151600283810b60008181526003602081905260409091209081018054828501805490970390965594909303909355600190910154600160981b810490910b6101208601526101008501919091529095508590600f0b5b612bd1868261460b565b955050612bfb565b81516001600160a01b03881614612bfb57612bf387613cd8565b955050612c22565b508915801590612c1d5750886001600160a01b0316866001600160a01b031614155b612947575b60008a83604001510390508260c0015115158c151514612c4757826060015181612c4e565b8083606001515b600280547fffffffffffffffffff000000000000000000000000000000000000000000000016600160a01b62ffffff8b160273ffffffffffffffffffffffffffffffffffffffff1916176001600160a01b038b161790556020850151919a509850159050612d23576101008201516101208301516008805462ffffff92831665ffffffffffff199091161763010000009290931691909102919091177fffffffffffffffffffff00000000000000000000000000000000ffffffffffff1666010000000000006001600160801b038716021790555b8a15612d36576080820151600055612d3f565b60808201516001555b505093975093979195509350565b612d588383836146b7565b505050565b6040517f2c8958f60000000000000000000000000000000000000000000000000000000081523390632c8958f690612d9f9087908790879087906004016157e8565b600060405180830381600087803b158015612db957600080fd5b505af1158015612dcd573d6000803e3d6000fd5b5050505050505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a08231906024015b602060405180830381865afa158015612e58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e7c9190615808565b905090565b81811715613056576004546cffffffffffffffffffffffffff640100000000820481168401917101000000000000000000000000000000000090041682016000612ec84290565b60045490915061708063ffffffff9182168303909116101580612ef757506cffffffffffffffffffffffffff83115b80612f0e57506cffffffffffffffffffffffffff82115b15612fd5576006546001600160a01b03168315612f5057612f507f00000000000000000000000000000000000000000000000000000000000000008286612d4d565b8215612f8157612f817f00000000000000000000000000000000000000000000000000000000000000008285612d4d565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000001663ffffffff8416179055612fba84613a38565b8803612fc584613a38565b9098509096039550600092508291505b50600480547fffff0000000000000000000000000000000000000000000000000000ffffffff16710100000000000000000000000000000000006cffffffffffffffffffffffffff938416027fffffffffffffffffffffffffffffff00000000000000000000000000ffffffff161764010000000093909216929092021790555b838317156130e357600b546001600160801b0380821691600160801b90041685156130995761308d6130888784615821565b61474d565b6001600160801b031691505b84156130b8576130ac6130888683615821565b6001600160801b031690505b6001600160801b039182169116600160801b026fffffffffffffffffffffffffffffffff191617600b555b50505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a0823190602401612e3b565b60028054600160c81b90041615612dcd57612dcd639cb5a96360e01b600560009054906101000a90046001600160a01b03166001600160a01b0316639cb5a963338c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b8152600401808a6001600160a01b03168152602001896001600160a01b031681526020018815158152602001878152602001866001600160a01b03168152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a50505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b600254600160e01b900460ff1661327857604051636798480960e11b815260040160405180910390fd5b565b604080517fe8ae2b690000000000000000000000000000000000000000000000000000000081527fb73ce166ead2f8e9add217713a7989e4edfba9625f71dfd2516204bb67ad3442600482015233602482015290516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169163e8ae2b699160448083019260209291908290030181865afa158015613324573d6000803e3d6000fd5b505050506040513d602081101561333a57600080fd5b5051613278576040517f932984d200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600280547fffffffff0000ffffffffffffffffffffffffffffffffffffffffffffffffffff16600160d01b61ffff8416908102919091179091556040519081527f3647dccc990d4941b0b05b32527ef493a98d6187b20639ca2f9743f3b55ca5e1906020015b60405180910390a150565b6133f0620d89e719615849565b60020b8160020b131561342f576040517f1445443d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160020b8160020b1361346e576040517fd9a841a700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b620d89e719600283900b1215611714576040517f746b1fc400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600254600160c81b900460041615613598576005546040517f5e2411b20000000000000000000000000000000000000000000000000000000080825233600483018181526001600160a01b038b8116602486015260028b810b60448701528a900b6064860152600f89900b608486015260c060a4860190815260c486018890526135989694959190941693635e2411b293928d928d928d928d928d928d929160e401848480828437600081840152601f19601f820116905080830192505050985050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b505050505050565b62ffffff818116908316601885811b91909117901b176000908152600a602052604090205b9392505050565b6002805460008054600154919384936001600160a01b03811693600160a01b90910490910b918491829190600f89900b156136285761361260038c878c86866000614763565b935061362560038b878c86866001614763565b92505b60008061363a60038e8e8a8888614876565b9150915061364a8e8c8484614914565b5050505086600f0b6000146136e45781806136625750805b1561367b5761367b898984848760008d600f0b12614a12565b600061368a8a8a8a8789613a5f565b91985096509050600f81900b156136e2576008546136bb90660100000000000090046001600160801b03168961460b565b600860066101000a8154816001600160801b0302191690836001600160801b031602179055505b505b5050505094509492505050565b600254600160c81b900460081615612dcd57612dcd63d685201060e01b600560009054906101000a90046001600160a01b03166001600160a01b031663d6852010338c8c8c8c8c8c8c8c6040518a63ffffffff1660e01b8152600401808a6001600160a01b03168152602001896001600160a01b031681526020018860020b81526020018760020b815260200186600f0b8152602001858152602001848152602001806020018281038252848482818152602001925080828437600081840152601f19601f8201169050808301925050509a50505050505050505050506020604051808303816000875af1158015611129573d6000803e3d6000fd5b7fffffffff0000000000000000000000000000000000000000000000000000000082811690821614611714576040517fd3f5153b0000000000000000000000000000000000000000000000000000000081527fffffffff000000000000000000000000000000000000000000000000000000008216600482015260240160405180910390fd5b60008315806138945750508282028284828161389157613891615746565b04145b156138b557600082116138a657600080fd5b818104908290061515016135c5565b6138c0848484613935565b9050600082806138d2576138d2615746565b84860911156135c55760001981106138e957600080fd5b6001019392505050565b6040517fa60b0d3c000000000000000000000000000000000000000000000000000000008152339063a60b0d3c90612d9f9087908790879087906004016157e8565b6000838302816000198587098281108382030391505080841161395757600080fd5b8060000361396a575082900490506135c5565b8385870960008581038616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030291819003819004600101858411909403939093029190930391909104170290509392505050565b600280547fffffffffffffff0000ffffffffffffffffffffffffffffffffffffffffffffff16600160b81b61ffff8416908102919091179091556040519081527f598b9f043c813aa6be3426ca60d1c65d17256312890be5118dab55b0775ebe2a906020016133d8565b806000811215613a4757600080fd5b919050565b806000600f82900b1215613a4757600080fd5b600080600080613a6e896140e9565b90506000613a7b896140e9565b90506000808b60020b8960020b1215613aa057613a9984848c614b0b565b9150613ade565b8a60020b8960020b1215613ad057613ab988848c614b0b565b9150613ac684898c614b4b565b9050899450613ade565b613adb84848c614b4b565b90505b60008a600f0b12613af0578181613af9565b81600003816000035b909d909c50949a509398505050505050505050565b6040517f3dd657c50000000000000000000000000000000000000000000000000000000081523390633dd657c590612d9f9087908790879087906004016157e8565b600280547fffffffffffff00ffffffffffffffffffffffffffffffffffffffffffffffffff16600160c81b60ff8416908102919091179091556040519081527f3a6271b36c1b44bd6a0a0d56230602dc6919b7c17af57254306fadf5fee69dc3906020016133d8565b6005805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f27a3944eff2135a57675f17e72501038982b73620d01f794c72e93d61a3932a2906020016133d8565b6006805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527fb0b573c1f636e1f8bd9b415ba6c04d6dd49100bc25493fc6305b65ec0e581df3906020016133d8565b600880547fffffffffffffff000000ffffffffffffffffffffffffffffffffffffffffffff16600160b01b62ffffff841602179055604051600282900b81527f01413b1d5d4c359e9a0daa7909ecda165f6e8c51fe2ff529d74b22a5a7c02645906020016133d8565b60006401000276a36001600160a01b0383161080613d13575073fffd8963efd1fc6a506488495d951d5263988d266001600160a01b03831610155b15613d4a576040517f55cf1e2300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b77ffffffffffffffffffffffffffffffffffffffff00000000602083901b166001600160801b03811160071b81811c67ffffffffffffffff811160061b90811c63ffffffff811160051b90811c61ffff811160041b90811c60ff8111600390811b91821c600f811160021b90811c918211600190811b92831c97908811961790941790921717909117171760808110613deb57607f810383901c9150613df5565b80607f0383901b91505b908002607f81811c60ff83811c9190911c800280831c81831c1c800280841c81841c1c800280851c81851c1c800280861c81861c1c800280871c81871c1c800280881c81881c1c800280891c81891c1c8002808a1c818a1c1c8002808b1c818b1c1c8002808c1c818c1c1c8002808d1c818d1c1c8002808e1c9c81901c9c909c1c80029c8d901c9e9d7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff808f0160401b60c09190911c678000000000000000161760c19b909b1c674000000000000000169a909a1760c29990991c672000000000000000169890981760c39790971c671000000000000000169690961760c49590951c670800000000000000169490941760c59390931c670400000000000000169290921760c69190911c670200000000000000161760c79190911c670100000000000000161760c89190911c6680000000000000161760c99190911c6640000000000000161760ca9190911c6620000000000000161760cb9190911c6610000000000000161760cc9190911c6608000000000000161760cd9190911c66040000000000001617693627a301d71055774c8581027ffffffffffffffffffffffffffffffffffd709b7e5480fba5a50fed5e62ffc5568101608090811d906fdb2df09e81959a81455e260799a0632f8301901d600281810b9083900b1461402257886001600160a01b0316614007826140e9565b6001600160a01b0316111561401c5781614024565b80614024565b815b9998505050505050505050565b6040517f82b13d8d0000000000000000000000000000000000000000000000000000000081523060048201526000908190819081906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906382b13d8d90602401608060405180830381865afa1580156140b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906140db919061587e565b935093509350935090919293565b6000600282900b60171d62ffffff818401821816620d89e881111561413a576040517f3c10250f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600160801b600182161561415b57506ffffcb933bd6fad37aa2d162d1a5940015b600282161561417a576ffff97272373d413259a46990580e213a0260801c5b6004821615614199576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b60088216156141b8576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b60108216156141d7576fffcb9843d60f6159c9db58835c9266440260801c5b60208216156141f6576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615614215576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615614234576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615614254576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615614274576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615614294576ff3392b0822b70005940c7a398e4b70f30260801c5b6108008216156142b4576fe7159475a2c29b7443b29c7fa6e889d90260801c5b6110008216156142d4576fd097f3bdfd2022b8845ad8f792aa58250260801c5b6120008216156142f4576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615614314576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615614334576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615614355576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615614375576e5d6af8dedb81196699c329225ee6040260801c5b6204000082106143bb576204000082161561439e576d2216e584f5fa1ea926041bedfe980260801c5b620800008216156143bb576b048a170391f7dc42444e8fa20260801c5b60008560020b13156143cc57600019045b63ffffffff0160201c949350505050565b60008060008061569d8a6143f357614b7b6143f7565b614b8a5b9050600087126144cf576000614424888861ffff16620f42400362ffffff16620f424062ffffff16613935565b90506144358a8c8b8563ffffffff16565b94508481106144625789955061445b8561ffff891662ffffff620f424082900316613873565b92506144a8565b61446e8b8a838f614b99565b9550856001600160a01b03168a6001600160a01b0316036144915761449161575c565b6144a0868c8b8563ffffffff16565b945084880392505b6144c7868c8b8f6144bb57614bb26144bf565b614bc15b63ffffffff16565b9350506145a1565b61569d8b6144df57614bb26144e3565b614bc15b90506144f48a8c8b8463ffffffff16565b9350876000039750600088121561451e576040516334cb3a0160e11b815260040160405180910390fd5b83881061452d57899550614572565b6145398b8a8a8f614bd0565b9550856001600160a01b03168a6001600160a01b03161461456657614563868c8b8463ffffffff16565b93505b87841115614572578793505b614581868c8b8563ffffffff16565b945061459d8561ffff891662ffffff620f424082900316613873565b9250505b509650965096509692505050565b808203828113156000831215146145c557600080fd5b92915050565b818101828112156000831215146145c557600080fd5b6000821580614602575050818102818382816145ff576145ff615746565b04145b6145c557600080fd5b60008082600f0b121561466657508082016001600160801b0380841690821610614661576040517f1301f74800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6145c5565b826001600160801b03168284019150816001600160801b031610156145c5576040517f997402f200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006040517fa9059cbb000000000000000000000000000000000000000000000000000000006000526001600160a01b03841660045282602452602060006044600080895af19150813d1560203d1460016000511416171691508060405250806130e3576040517fe465903e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806001600160801b0381168114613a4757600080fd5b600286900b6000908152602088905260408120805482614783828961460b565b6001600160801b031690506d09745258e83de0d0f4e400fce7998111156147d6576040517f25b8364a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001830154600f0b856147fa5788600f0b81600f0b6147f59190615821565b61480c565b88600f0b81600f0b61480c91906158e8565b6001850180546fffffffffffffffffffffffffffffffff19166001600160801b039290921691909117905581845581159450600083900361486757841594508960020b8b60020b136148675760038401879055600284018890555b50505050979650505050505050565b600285810b60009081526020889052604080822087840b8084529183209293849391929088900b12156148ec578860020b8760020b126148c7578160020154860393508160030154850392506148d6565b81600201549350816003015492505b6002810154600382015494039390920391614907565b81600201548160020154039350816003015481600301540392505b5050965096945050505050565b8354600f84900b60000361493e57806001600160801b031660000361493957506130e3565b614954565b614948818561460b565b6001600160801b031685555b60018501546002860154600085831461498b57600188018690556149888387036001600160801b038616600160801b613935565b90505b60008583146149b857600289018690556149b58387036001600160801b038716600160801b613935565b90505b6001600160801b038282171615614a0757600389018054600160801b6001600160801b03808316860181166fffffffffffffffffffffffffffffffff1990931683178290048116850116021790555b505050505050505050565b60085463010000008104600290810b919081900b90600160c81b900463ffffffff168282828915614a5357614a4b8c898386868c614be0565b919450925090505b8815614a6f57614a678b898386868c614be0565b919450925090505b8260020b8660020b141580614a8a57508160020b8560020b14155b80614aa157508363ffffffff168163ffffffff1614155b15614afd576008805462ffffff80861663010000000265ffffffffffff1963ffffffff8616600160c81b02167fffffff00000000ffffffffffffffffffffffffffffffffffffff00000000000090931692909217908516171790555b505050505050505050505050565b60008082600f0b1215614b3357614b2b6118158585856000036000614cd5565b600003614b43565b614b436118158585856001614cd5565b949350505050565b60008082600f0b1215614b6b57614b2b6118158585856000036000614d82565b614b436118158585856001614d82565b6000614b438385846001614d82565b6000614b438484846001614cd5565b6000614ba9858585856001614e05565b95945050505050565b6000614b438385846000614cd5565b6000614b438484846000614d82565b6000614ba9858585856000614e05565b60008060008315614c2a57600080614bf960038c615047565b915091508a60020b8860020b03614c1257819750614c23565b8a60020b8760020b03614c23578096505b5050614cb3565b6000808a60020b8860020b128015614c4757508a60020b8760020b135b15614c7057508690508560028a810b908c900b1315614c68578a9650614ca3565b8a9750614ca3565b614c7e600760098b8e615217565b600281810b600090815260036020526040902060010154600160801b9004900b925090505b614cb060038c84846152e9565b50505b6000614cc3600760098a8d615434565b969a9599509597509395505050505050565b60006001600160a01b0385850381169085168110614cf257600080fd5b7bffffffffffffffffffffffffffffffff000000000000000000000000606085901b1683614d4b57866001600160a01b0316614d388383896001600160a01b0316613935565b81614d4557614d45615746565b04614d77565b614d77614d628383896001600160a01b0316613873565b886001600160a01b0316808204910615150190565b979650505050505050565b6000846001600160a01b0316846001600160a01b03161015614da357600080fd5b6001600160a01b038585031682614dda57614dd581856001600160801b03166c01000000000000000000000000613935565b614dfb565b614dfb81856001600160801b03166c01000000000000000000000000613873565b9695505050505050565b6000856001600160a01b0316600003614e1d57600080fd5b846001600160801b0316600003614e3357600080fd5b83600003614e42575084614ba9565b81151583151503614f50577bffffffffffffffffffffffffffffffff000000000000000000000000606086901b168215614efe576001600160a01b03871685810290868281614e9357614e93615746565b0403614ec357818101828110614ec157614eb7838a6001600160a01b031683613873565b9350505050614ba9565b505b614ef582614eea888b6001600160a01b03168681614ee357614ee3615746565b04906154cc565b808204910615150190565b92505050614ba9565b6001600160a01b03871685810290868281614f1b57614f1b615746565b0414614f2657600080fd5b808211614f3257600080fd5b614ef5614f4b838a6001600160a01b0316848603613873565b6154dc565b8115614fc657614fbf614f4b6001600160a01b03861115614f9157614f8c866c01000000000000000000000000896001600160801b0316613935565b614faf565b6001600160801b038716606087901b81614fad57614fad615746565b045b6001600160a01b038916906154cc565b9050614ba9565b60006001600160a01b03851115614ffd57614ff8856c01000000000000000000000000886001600160801b0316613873565b61501a565b61501a606086901b6001600160801b038816808204910615150190565b905080876001600160a01b03161161503157600080fd5b6001600160a01b03871603905095945050505050565b600281810b60008181526020859052604081206001810180548383557fffffffffffffffffffff000000000000000000000000000000000000000000008116909155818501839055600390910191909155600160801b8104830b92600160981b909104900b90620d89e71914806150cf57506150c6620d89e719615849565b60020b8360020b145b1561514b57600283900b6000908152602085905260409020600101805462ffffff808516600160801b0272ffffff0000000000000000000000000000000019918516600160981b02919091167fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff90921691909117179055615210565b8060020b8260020b0361518a576040517f0d6e094900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600282810b6000908152602086905260408082206001908101805462ffffff808816600160981b027fffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffff909216919091179091559385900b83529120018054918416600160801b0272ffffff00000000000000000000000000000000199092169190911790555b9250929050565b600190810190600090600883811d610d8a01901c90829061ffff83161b851663ffffffff161561527a5761524b87856154f2565b90945090925090508015615260575050614b43565b61527186610d8b840160010b6154f2565b90945090925090505b806152bd576152988563ffffffff168360010193508360010b615523565b9093509050806152b05750620d89e89150614b439050565b6152ba8684615671565b92505b614d77877ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2768501615671565b600283900b620d89e71914806153105750615307620d89e719615849565b60020b8360020b145b6130e3578260020b8260020b12801561532e57508260020b8160020b135b615364576040517fe45ac17d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600283810b60009081526020959095526040808620600190810180547fffffffffffffffffffff000000000000ffffffffffffffffffffffffffffffff16600160981b62ffffff878116820272ffffff000000000000000000000000000000001990811693909317600160801b8a831681029190911790945597860b8a52848a20840180547fffffffffffffffffffff000000ffffffffffffffffffffffffffffffffffffff1698909916908102979097179097559390920b865290942090930180549092169202919091179055565b816000806154718785600881901d600181810b60009081526020949094526040909320805460ff9093169390931b80831890935591811490151891565b9150915081156154c257610d8a01600181810b60081d80820b6000908152602089905260409020805460ff9094169290921b8084189092558215919092148181189350146154c2576001811b831892505b5050949350505050565b808201828110156145c557600080fd5b806001600160a01b0381168114613a4757600080fd5b600881901d600181900b60009081526020849052604081205481906155179085615523565b93969095509293505050565b60008060ff831684811c80830361553f578460ff179350615668565b7f555555555555555555555555555555555555555555555555555555555555555560008290038216908116156001600160801b0382161560071b1777ffffffffffffffff0000000000000000ffffffffffffffff82161560061b177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff82161560051b177dffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff0000ffff82161560041b177eff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff00ff82161560031b177f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f0f82161560021b177f33333333333333333333333333333333333333333333333333333333333333339091161560011b1760ff1685019350600192505b50509250929050565b600181900b600090815260208390526040902054600882901b906156959082615523565b509392505050565b613278615908565b634e487b7160e01b600052601160045260246000fd5b808201808211156145c5576145c56156a5565b600081600f0b7fffffffffffffffffffffffffffffffff800000000000000000000000000000008103615703576157036156a5565b60000392915050565b6001600160801b0381811683821601908082111561572c5761572c6156a5565b5092915050565b818103818111156145c5576145c56156a5565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052600160045260246000fd5b805161ffff81168114613a4757600080fd5b60006020828403121561579657600080fd5b6135c582615772565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b848152836020820152606060408201526000614dfb60608301848661579f565b60006020828403121561581a57600080fd5b5051919050565b8082018281126000831280158216821582161715615841576158416156a5565b505092915050565b60008160020b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000008103615703576157036156a5565b6000806000806080858703121561589457600080fd5b61589d85615772565b935060208501518060020b81146158b357600080fd5b92506158c160408601615772565b915060608501516001600160a01b03811681146158dd57600080fd5b939692955090935050565b818103600083128015838313168383128216171561572c5761572c6156a5565b634e487b7160e01b600052605160045260246000fdfea164736f6c6343000814000aa164736f6c6343000814000a","abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[{"internalType":"address","name":"plugin","type":"address"},{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"}],"name":"deploy","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"getDeployParameters","outputs":[{"internalType":"address","name":"_plugin","type":"address"},{"internalType":"address","name":"_factory","type":"address"},{"internalType":"address","name":"_token0","type":"address"},{"internalType":"address","name":"_token1","type":"address"}],"stateMutability":"view","type":"function"}]}