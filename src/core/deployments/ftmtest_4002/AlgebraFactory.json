{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/AlgebraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './libraries/Constants.sol';\\r\\n\\r\\nimport './interfaces/IAlgebraFactory.sol';\\r\\nimport './interfaces/IAlgebraPoolDeployer.sol';\\r\\nimport './interfaces/vault/IAlgebraVaultFactory.sol';\\r\\nimport './interfaces/plugin/IAlgebraPluginFactory.sol';\\r\\n\\r\\nimport './AlgebraCommunityVault.sol';\\r\\n\\r\\nimport '@openzeppelin/contracts/access/Ownable2Step.sol';\\r\\nimport '@openzeppelin/contracts/access/AccessControlEnumerable.sol';\\r\\n\\r\\n/// @title Algebra factory\\r\\n/// @notice Is used to deploy pools and its plugins\\r\\n/// @dev Version: Algebra Integral 1.0\\r\\ncontract AlgebraFactory is IAlgebraFactory, Ownable2Step, AccessControlEnumerable {\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  bytes32 public constant override POOLS_ADMINISTRATOR_ROLE = keccak256('POOLS_ADMINISTRATOR'); // it`s here for the public visibility of the value\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  address public immutable override poolDeployer;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  uint16 public override defaultCommunityFee;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  uint16 public override defaultFee;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  int24 public override defaultTickspacing;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  uint256 public override renounceOwnershipStartTimestamp;\\r\\n\\r\\n  /// @dev time delay before ownership renouncement can be finished\\r\\n  uint256 private constant RENOUNCE_OWNERSHIP_DELAY = 1 days;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  IAlgebraPluginFactory public defaultPluginFactory;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  IAlgebraVaultFactory public vaultFactory;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  mapping(address => mapping(address => address)) public override poolByPair;\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  /// @dev keccak256 of AlgebraPool init bytecode. Used to compute pool address deterministically\\r\\n  bytes32 public constant POOL_INIT_CODE_HASH = 0xf96d2474815c32e070cd63233f06af5413efc5dcb430aee4ff18cc29007c562d;\\r\\n\\r\\n  constructor(address _poolDeployer) {\\r\\n    require(_poolDeployer != address(0));\\r\\n    poolDeployer = _poolDeployer;\\r\\n    defaultTickspacing = Constants.INIT_DEFAULT_TICK_SPACING;\\r\\n    defaultFee = Constants.INIT_DEFAULT_FEE;\\r\\n\\r\\n    emit DefaultTickspacing(Constants.INIT_DEFAULT_TICK_SPACING);\\r\\n    emit DefaultFee(Constants.INIT_DEFAULT_FEE);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function owner() public view override(IAlgebraFactory, Ownable) returns (address) {\\r\\n    return super.owner();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function hasRoleOrOwner(bytes32 role, address account) public view override returns (bool) {\\r\\n    return (owner() == account || super.hasRole(role, account));\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function defaultConfigurationForPool(\\r\\n    address pool\\r\\n  ) external view override returns (uint16 communityFee, int24 tickSpacing, uint16 fee, address communityVault) {\\r\\n    if (address(vaultFactory) != address(0)) {\\r\\n      communityVault = vaultFactory.getVaultForPool(pool);\\r\\n    }\\r\\n    return (defaultCommunityFee, defaultTickspacing, defaultFee, communityVault);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function computePoolAddress(address token0, address token1) public view override returns (address pool) {\\r\\n    pool = address(uint160(uint256(keccak256(abi.encodePacked(hex'ff', poolDeployer, keccak256(abi.encode(token0, token1)), POOL_INIT_CODE_HASH)))));\\r\\n  }\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair) {\\r\\n\\t(address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n\\treturn poolByPair[token0][token1];\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function createPool(address tokenA, address tokenB) external override returns (address pool) {\\r\\n    require(tokenA != tokenB);\\r\\n    (address token0, address token1) = tokenA < tokenB ? (tokenA, tokenB) : (tokenB, tokenA);\\r\\n    require(token0 != address(0));\\r\\n    require(poolByPair[token0][token1] == address(0));\\r\\n\\r\\n    address defaultPlugin;\\r\\n    if (address(defaultPluginFactory) != address(0)) {\\r\\n      defaultPlugin = defaultPluginFactory.createPlugin(computePoolAddress(token0, token1), token0, token1);\\r\\n    }\\r\\n\\r\\n    pool = IAlgebraPoolDeployer(poolDeployer).deploy(defaultPlugin, token0, token1);\\r\\n\\r\\n    poolByPair[token0][token1] = pool; // to avoid future addresses comparison we are populating the mapping twice\\r\\n    poolByPair[token1][token0] = pool;\\r\\n    emit Pool(token0, token1, pool);\\r\\n\\r\\n    if (address(vaultFactory) != address(0)) {\\r\\n      vaultFactory.createVaultForPool(pool);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external override onlyOwner {\\r\\n    require(newDefaultCommunityFee <= Constants.MAX_COMMUNITY_FEE);\\r\\n    require(defaultCommunityFee != newDefaultCommunityFee);\\r\\n    if (newDefaultCommunityFee != 0) require(address(vaultFactory) != address(0));\\r\\n    defaultCommunityFee = newDefaultCommunityFee;\\r\\n    emit DefaultCommunityFee(newDefaultCommunityFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function setDefaultFee(uint16 newDefaultFee) external override onlyOwner {\\r\\n    require(newDefaultFee <= Constants.MAX_DEFAULT_FEE);\\r\\n    require(defaultFee != newDefaultFee);\\r\\n    defaultFee = newDefaultFee;\\r\\n    emit DefaultFee(newDefaultFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external override onlyOwner {\\r\\n    require(newDefaultTickspacing >= Constants.MIN_TICK_SPACING);\\r\\n    require(newDefaultTickspacing <= Constants.MAX_TICK_SPACING);\\r\\n    require(newDefaultTickspacing != defaultTickspacing);\\r\\n    defaultTickspacing = newDefaultTickspacing;\\r\\n    emit DefaultTickspacing(newDefaultTickspacing);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external override onlyOwner {\\r\\n    require(newDefaultPluginFactory != address(defaultPluginFactory));\\r\\n    defaultPluginFactory = IAlgebraPluginFactory(newDefaultPluginFactory);\\r\\n    emit DefaultPluginFactory(newDefaultPluginFactory);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function setVaultFactory(address newVaultFactory) external override onlyOwner {\\r\\n    require(newVaultFactory != address(vaultFactory));\\r\\n    if (newVaultFactory == address(0)) require(defaultCommunityFee == 0);\\r\\n    vaultFactory = IAlgebraVaultFactory(newVaultFactory);\\r\\n    emit VaultFactory(newVaultFactory);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function startRenounceOwnership() external override onlyOwner {\\r\\n    require(renounceOwnershipStartTimestamp == 0);\\r\\n    renounceOwnershipStartTimestamp = block.timestamp;\\r\\n    emit RenounceOwnershipStart(renounceOwnershipStartTimestamp, renounceOwnershipStartTimestamp + RENOUNCE_OWNERSHIP_DELAY);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraFactory\\r\\n  function stopRenounceOwnership() external override onlyOwner {\\r\\n    require(renounceOwnershipStartTimestamp != 0);\\r\\n    renounceOwnershipStartTimestamp = 0;\\r\\n    emit RenounceOwnershipStop(block.timestamp);\\r\\n  }\\r\\n\\r\\n  /// @dev Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore.\\r\\n  /// Can only be called by the current owner if RENOUNCE_OWNERSHIP_DELAY seconds\\r\\n  /// have passed since the call to the startRenounceOwnership() function.\\r\\n  function renounceOwnership() public override onlyOwner {\\r\\n    require(renounceOwnershipStartTimestamp != 0);\\r\\n    require(block.timestamp - renounceOwnershipStartTimestamp >= RENOUNCE_OWNERSHIP_DELAY);\\r\\n    renounceOwnershipStartTimestamp = 0;\\r\\n\\r\\n    super.renounceOwnership();\\r\\n    emit RenounceOwnershipFinish(block.timestamp);\\r\\n  }\\r\\n\\r\\n  /// @dev Transfers ownership of the contract to a new account (`newOwner`).\\r\\n  /// Modified to fit with the role mechanism.\\r\\n  function _transferOwnership(address newOwner) internal override {\\r\\n    _revokeRole(DEFAULT_ADMIN_ROLE, owner());\\r\\n    super._transferOwnership(newOwner);\\r\\n    if (owner() != address(0)) {\\r\\n      _grantRole(DEFAULT_ADMIN_ROLE, owner());\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/vault/IAlgebraVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra Vault Factory\\r\\n/// @notice This contract can be used for automatic vaults creation\\r\\n/// @dev Version: Algebra Integral\\r\\ninterface IAlgebraVaultFactory {\\r\\n  /// @notice returns address of the community fee vault for the pool\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function getVaultForPool(address pool) external view returns (address communityFeeVault);\\r\\n\\r\\n  /// @notice creates the community fee vault for the pool if needed\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function createVaultForPool(address pool) external returns (address communityFeeVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/pool/IAlgebraPoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @title Errors emitted by a pool\\r\\n/// @notice Contains custom errors emitted by the pool\\r\\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\\r\\ninterface IAlgebraPoolErrors {\\r\\n  // ####  pool errors  ####\\r\\n\\r\\n  /// @notice Emitted by the reentrancy guard\\r\\n  error locked();\\r\\n\\r\\n  /// @notice Emitted if arithmetic error occurred\\r\\n  error arithmeticError();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to initialize the pool twice\\r\\n  error alreadyInitialized();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\\r\\n  error notInitialized();\\r\\n\\r\\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\\r\\n  error zeroAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\\r\\n  error invalidAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens than it should have\\r\\n  error insufficientInputAmount();\\r\\n\\r\\n  /// @notice Emitted if there was an attempt to mint zero liquidity\\r\\n  error zeroLiquidityDesired();\\r\\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\\r\\n  error zeroLiquidityActual();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\\r\\n  error flashInsufficientPaid0();\\r\\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\\r\\n  error flashInsufficientPaid1();\\r\\n\\r\\n  /// @notice Emitted if limitSqrtPrice param is incorrect\\r\\n  error invalidLimitSqrtPrice();\\r\\n\\r\\n  /// @notice Tick must be divisible by tickspacing\\r\\n  error tickIsNotSpaced();\\r\\n\\r\\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\\r\\n  error notAllowed();\\r\\n\\r\\n  /// @notice Emitted if new tick spacing exceeds max allowed value\\r\\n  error invalidNewTickSpacing();\\r\\n  /// @notice Emitted if new community fee exceeds max allowed value\\r\\n  error invalidNewCommunityFee();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\\r\\n  error dynamicFeeActive();\\r\\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\\r\\n  error dynamicFeeDisabled();\\r\\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\\r\\n  error pluginIsNotConnected();\\r\\n  /// @notice Emitted if a plugin returns invalid selector after hook call\\r\\n  /// @param expectedSelector The expected selector\\r\\n  error invalidHookResponse(bytes4 expectedSelector);\\r\\n\\r\\n  // ####  LiquidityMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if liquidity underflows\\r\\n  error liquiditySub();\\r\\n  /// @notice Emitted if liquidity overflows\\r\\n  error liquidityAdd();\\r\\n\\r\\n  // ####  TickManagement errors  ####\\r\\n\\r\\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\\r\\n  error topTickLowerOrEqBottomTick();\\r\\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\\r\\n  error bottomTickLowerThanMIN();\\r\\n  /// @notice Emitted if the topTick param is greater than max allowed value\\r\\n  error topTickAboveMAX();\\r\\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\\r\\n  error liquidityOverflow();\\r\\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\\r\\n  error tickIsNotInitialized();\\r\\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\\r\\n  error tickInvalidLinks();\\r\\n\\r\\n  // ####  SafeTransfer errors  ####\\r\\n\\r\\n  /// @notice Emitted if token transfer failed internally\\r\\n  error transferFailed();\\r\\n\\r\\n  // ####  TickMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\\r\\n  error tickOutOfRange();\\r\\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\\r\\n  error priceOutOfRange();\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title SafeTransfer\\r\\n/// @notice Safe ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @dev Credit to Solmate under MIT license: https://github.com/transmissions11/solmate/blob/ed67feda67b24fdeff8ad1032360f0ee6047ba0a/src/utils/SafeTransferLib.sol\\r\\n/// @dev Please note that this library does not check if the token has a code! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransfer {\\r\\n  /// @notice Transfers tokens to a recipient\\r\\n  /// @dev Calls transfer on token contract, errors with transferFailed() if transfer fails\\r\\n  /// @param token The contract address of the token which will be transferred\\r\\n  /// @param to The recipient of the transfer\\r\\n  /// @param amount The amount of the token to transfer\\r\\n  function safeTransfer(address token, address to, uint256 amount) internal {\\r\\n    bool success;\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40) // we will need to restore 0x40 slot\\r\\n      mstore(0x00, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // \\\"transfer(address,uint256)\\\" selector\\r\\n      mstore(0x04, and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // append cleaned \\\"to\\\" address\\r\\n      mstore(0x24, amount)\\r\\n      // now we use 0x00 - 0x44 bytes (68), freeMemoryPointer is dirty\\r\\n      success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\\r\\n      success := and(\\r\\n        // set success to true if call isn't reverted and returned exactly 1 (can't just be non-zero data) or nothing\\r\\n        or(and(eq(mload(0), 1), eq(returndatasize(), 32)), iszero(returndatasize())),\\r\\n        success\\r\\n      )\\r\\n      mstore(0x40, freeMemoryPointer) // restore the freeMemoryPointer\\r\\n    }\\r\\n\\r\\n    if (!success) revert IAlgebraPoolErrors.transferFailed();\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/interfaces/vault/IAlgebraCommunityVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra community fee vault\\r\\n/// @notice Community fee from pools is sent here, if it is enabled\\r\\n/// @dev Version: Algebra Integral\\r\\ninterface IAlgebraCommunityVault {\\r\\n  /// @notice Event emitted when a fees has been claimed\\r\\n  /// @param token The address of token fee\\r\\n  /// @param to The address where claimed rewards were sent to\\r\\n  /// @param amount The amount of fees tokens claimed by communityFeeReceiver\\r\\n  event TokensWithdrawal(address indexed token, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Event emitted when a fees has been claimed\\r\\n  /// @param token The address of token fee\\r\\n  /// @param to The address where claimed rewards were sent to\\r\\n  /// @param amount The amount of fees tokens claimed by Algebra\\r\\n  event AlgebraTokensWithdrawal(address indexed token, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeReceiver address changed\\r\\n  /// @param newAlgebraFeeReceiver New Algebra fee receiver address\\r\\n  event AlgebraFeeReceiver(address newAlgebraFeeReceiver);\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeManager address change proposed\\r\\n  /// @param pendingAlgebraFeeManager New pending Algebra fee manager address\\r\\n  event PendingAlgebraFeeManager(address pendingAlgebraFeeManager);\\r\\n\\r\\n  /// @notice Emitted when a new Algebra fee value proposed\\r\\n  /// @param proposedNewAlgebraFee The new proposed Algebra fee value\\r\\n  event AlgebraFeeProposal(uint16 proposedNewAlgebraFee);\\r\\n\\r\\n  /// @notice Emitted when a Algebra fee proposal canceled\\r\\n  event CancelAlgebraFeeProposal();\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeManager address changed\\r\\n  /// @param newAlgebraFeeManager New Algebra fee manager address\\r\\n  event AlgebraFeeManager(address newAlgebraFeeManager);\\r\\n\\r\\n  /// @notice Emitted when the Algebra fee is changed\\r\\n  /// @param newAlgebraFee The new Algebra fee value\\r\\n  event AlgebraFee(uint16 newAlgebraFee);\\r\\n\\r\\n  /// @notice Emitted when a CommunityFeeReceiver address changed\\r\\n  /// @param newCommunityFeeReceiver New fee receiver address\\r\\n  event CommunityFeeReceiver(address newCommunityFeeReceiver);\\r\\n\\r\\n  /// @notice Withdraw protocol fees from vault\\r\\n  /// @dev Can only be called by algebraFeeManager or communityFeeReceiver\\r\\n  /// @param token The token address\\r\\n  /// @param amount The amount of token\\r\\n  function withdraw(address token, uint256 amount) external;\\r\\n\\r\\n  struct WithdrawTokensParams {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw protocol fees from vault. Used to claim fees for multiple tokens\\r\\n  /// @dev Can be called by algebraFeeManager or communityFeeReceiver\\r\\n  /// @param params Array of WithdrawTokensParams objects containing token addresses and amounts to withdraw\\r\\n  function withdrawTokens(WithdrawTokensParams[] calldata params) external;\\r\\n\\r\\n  // ### algebra factory owner permissioned actions ###\\r\\n\\r\\n  /// @notice Accepts the proposed new Algebra fee\\r\\n  /// @dev Can only be called by the factory owner.\\r\\n  /// The new value will also be used for previously accumulated tokens that have not yet been withdrawn\\r\\n  /// @param newAlgebraFee New Algebra fee value\\r\\n  function acceptAlgebraFeeChangeProposal(uint16 newAlgebraFee) external;\\r\\n\\r\\n  /// @notice Change community fee receiver address\\r\\n  /// @dev Can only be called by the factory owner\\r\\n  /// @param newCommunityFeeReceiver New community fee receiver address\\r\\n  function changeCommunityFeeReceiver(address newCommunityFeeReceiver) external;\\r\\n\\r\\n  // ### algebra fee manager permissioned actions ###\\r\\n\\r\\n  /// @notice Transfers Algebra fee manager role\\r\\n  /// @param _newAlgebraFeeManager new Algebra fee manager address\\r\\n  function transferAlgebraFeeManagerRole(address _newAlgebraFeeManager) external;\\r\\n\\r\\n  /// @notice accept Algebra FeeManager role\\r\\n  function acceptAlgebraFeeManagerRole() external;\\r\\n\\r\\n  /// @notice Proposes new Algebra fee value for protocol\\r\\n  /// @dev the new value will also be used for previously accumulated tokens that have not yet been withdrawn\\r\\n  /// @param newAlgebraFee new Algebra fee value\\r\\n  function proposeAlgebraFeeChange(uint16 newAlgebraFee) external;\\r\\n\\r\\n  /// @notice Cancels Algebra fee change proposal\\r\\n  function cancelAlgebraFeeChangeProposal() external;\\r\\n\\r\\n  /// @notice Change Algebra community fee part receiver\\r\\n  /// @param newAlgebraFeeReceiver The address of new Algebra fee receiver\\r\\n  function changeAlgebraFeeReceiver(address newAlgebraFeeReceiver) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/plugin/IAlgebraPluginFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title An interface for a contract that is capable of deploying Algebra plugins\\r\\n/// @dev Such a factory is needed if the plugin should be automatically created and connected to each new pool\\r\\ninterface IAlgebraPluginFactory {\\r\\n  /// @notice Deploys new plugin contract for pool\\r\\n  /// @param pool The address of the pool for which the new plugin will be created\\r\\n  /// @param token0 First token of the pool\\r\\n  /// @param token1 Second token of the pool\\r\\n  /// @return New plugin address\\r\\n  function createPlugin(address pool, address token0, address token1) external returns (address);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/IAlgebraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport './plugin/IAlgebraPluginFactory.sol';\\r\\nimport './vault/IAlgebraVaultFactory.sol';\\r\\n\\r\\n/// @title The interface for the Algebra Factory\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraFactory {\\r\\n  /// @notice Emitted when a process of ownership renounce is started\\r\\n  /// @param timestamp The timestamp of event\\r\\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\\r\\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce cancelled\\r\\n  /// @param timestamp The timestamp of event\\r\\n  event RenounceOwnershipStop(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce finished\\r\\n  /// @param timestamp The timestamp of ownership renouncement\\r\\n  event RenounceOwnershipFinish(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a pool is created\\r\\n  /// @param token0 The first token of the pool by address sort order\\r\\n  /// @param token1 The second token of the pool by address sort order\\r\\n  /// @param pool The address of the created pool\\r\\n  event Pool(address indexed token0, address indexed token1, address pool);\\r\\n\\r\\n  /// @notice Emitted when the default community fee is changed\\r\\n  /// @param newDefaultCommunityFee The new default community fee value\\r\\n  event DefaultCommunityFee(uint16 newDefaultCommunityFee);\\r\\n\\r\\n  /// @notice Emitted when the default tickspacing is changed\\r\\n  /// @param newDefaultTickspacing The new default tickspacing value\\r\\n  event DefaultTickspacing(int24 newDefaultTickspacing);\\r\\n\\r\\n  /// @notice Emitted when the default fee is changed\\r\\n  /// @param newDefaultFee The new default fee value\\r\\n  event DefaultFee(uint16 newDefaultFee);\\r\\n\\r\\n  /// @notice Emitted when the defaultPluginFactory address is changed\\r\\n  /// @param defaultPluginFactoryAddress The new defaultPluginFactory address\\r\\n  event DefaultPluginFactory(address defaultPluginFactoryAddress);\\r\\n\\r\\n  /// @notice Emitted when the vaultFactory address is changed\\r\\n  /// @param newVaultFactory The new vaultFactory address\\r\\n  event VaultFactory(address newVaultFactory);\\r\\n\\r\\n  /// @notice role that can change communityFee and tickspacing in pools\\r\\n  /// @return The hash corresponding to this role\\r\\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /// @notice Returns `true` if `account` has been granted `role` or `account` is owner.\\r\\n  /// @param role The hash corresponding to the role\\r\\n  /// @param account The address for which the role is checked\\r\\n  /// @return bool Whether the address has this role or the owner role or not\\r\\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /// @notice Returns the current owner of the factory\\r\\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\\r\\n  /// @return The address of the factory owner\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the current poolDeployerAddress\\r\\n  /// @return The address of the poolDeployer\\r\\n  function poolDeployer() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the default community fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultCommunityFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default tickspacing\\r\\n  /// @return Tickspacing which will be set at the creation of the pool\\r\\n  function defaultTickspacing() external view returns (int24);\\r\\n\\r\\n  /// @notice Return the current pluginFactory address\\r\\n  /// @dev This contract is used to automatically set a plugin address in new liquidity pools\\r\\n  /// @return Algebra plugin factory\\r\\n  function defaultPluginFactory() external view returns (IAlgebraPluginFactory);\\r\\n\\r\\n  /// @notice Return the current vaultFactory address\\r\\n  /// @dev This contract is used to automatically set a vault address in new liquidity pools\\r\\n  /// @return Algebra vault factory\\r\\n  function vaultFactory() external view returns (IAlgebraVaultFactory);\\r\\n\\r\\n  /// @notice Returns the default communityFee, tickspacing, fee and communityFeeVault for pool\\r\\n  /// @param pool the address of liquidity pool\\r\\n  /// @return communityFee which will be set at the creation of the pool\\r\\n  /// @return tickSpacing which will be set at the creation of the pool\\r\\n  /// @return fee which will be set at the creation of the pool\\r\\n  /// @return communityFeeVault the address of communityFeeVault\\r\\n  function defaultConfigurationForPool(\\r\\n    address pool\\r\\n  ) external view returns (uint16 communityFee, int24 tickSpacing, uint16 fee, address communityFeeVault);\\r\\n\\r\\n  /// @notice Deterministically computes the pool address given the token0 and token1\\r\\n  /// @dev The method does not check if such a pool has been created\\r\\n  /// @param token0 first token\\r\\n  /// @param token1 second token\\r\\n  /// @return pool The contract address of the Algebra pool\\r\\n  function computePoolAddress(address token0, address token1) external view returns (address pool);\\r\\n\\r\\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\\r\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n  /// @param tokenA The contract address of either token0 or token1\\r\\n  /// @param tokenB The contract address of the other token\\r\\n  /// @return pool The pool address\\r\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\r\\n\\r\\n  /// @notice returns keccak256 of AlgebraPool init bytecode.\\r\\n  /// @dev the hash value changes with any change in the pool bytecode\\r\\n  /// @return Keccak256 hash of AlgebraPool contract init bytecode\\r\\n  function POOL_INIT_CODE_HASH() external view returns (bytes32);\\r\\n\\r\\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\\r\\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\\r\\n\\r\\n  /// @notice Creates a pool for the given two tokens\\r\\n  /// @param tokenA One of the two tokens in the desired pool\\r\\n  /// @param tokenB The other of the two tokens in the desired pool\\r\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\\r\\n  /// The call will revert if the pool already exists or the token arguments are invalid.\\r\\n  /// @return pool The address of the newly created pool\\r\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\r\\n\\r\\n  /// @dev updates default community fee for new pools\\r\\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\\r\\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external;\\r\\n\\r\\n  /// @dev updates default fee for new pools\\r\\n  /// @param newDefaultFee The new  fee, _must_ be <= MAX_DEFAULT_FEE\\r\\n  function setDefaultFee(uint16 newDefaultFee) external;\\r\\n\\r\\n  /// @dev updates default tickspacing for new pools\\r\\n  /// @param newDefaultTickspacing The new tickspacing, _must_ be <= MAX_TICK_SPACING and >= MIN_TICK_SPACING\\r\\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external;\\r\\n\\r\\n  /// @dev updates pluginFactory address\\r\\n  /// @param newDefaultPluginFactory address of new plugin factory\\r\\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external;\\r\\n\\r\\n  /// @dev updates vaultFactory address\\r\\n  /// @param newVaultFactory address of new vault factory\\r\\n  function setVaultFactory(address newVaultFactory) external;\\r\\n\\r\\n  /// @notice Starts process of renounceOwnership. After that, a certain period\\r\\n  /// of time must pass before the ownership renounce can be completed.\\r\\n  function startRenounceOwnership() external;\\r\\n\\r\\n  /// @notice Stops process of renounceOwnership and removes timer.\\r\\n  function stopRenounceOwnership() external;\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      // Subtract 256 bit remainder from 512 bit number\\r\\n      assembly {\\r\\n        let remainder := mulmod(a, b, denominator)\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      uint256 twos = (0 - denominator) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the preconditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      if (a == 0 || ((result = a * b) / a == b)) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n        }\\r\\n      } else {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n          require(result < type(uint256).max);\\r\\n          result++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function unsafeDivRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/AlgebraCommunityVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './libraries/SafeTransfer.sol';\\r\\nimport './libraries/FullMath.sol';\\r\\n\\r\\nimport './interfaces/IAlgebraFactory.sol';\\r\\nimport './interfaces/vault/IAlgebraCommunityVault.sol';\\r\\n\\r\\n/// @title Algebra community fee vault\\r\\n/// @notice Community fee from pools is sent here, if it is enabled\\r\\n/// @dev Role system is used to withdraw tokens\\r\\n/// @dev Version: Algebra Integral 1.0\\r\\ncontract AlgebraCommunityVault is IAlgebraCommunityVault {\\r\\n  /// @dev The role can be granted in AlgebraFactory\\r\\n  bytes32 public constant COMMUNITY_FEE_WITHDRAWER_ROLE = keccak256('COMMUNITY_FEE_WITHDRAWER');\\r\\n  /// @dev The role can be granted in AlgebraFactory\\r\\n  bytes32 public constant COMMUNITY_FEE_VAULT_ADMINISTRATOR = keccak256('COMMUNITY_FEE_VAULT_ADMINISTRATOR');\\r\\n  address private immutable factory;\\r\\n\\r\\n  /// @notice Address to which community fees are sent from vault\\r\\n  address public communityFeeReceiver;\\r\\n  /// @notice The percentage of the protocol fee that Algebra will receive\\r\\n  /// @dev Value in thousandths,i.e. 1e-3\\r\\n  uint16 public algebraFee;\\r\\n  /// @notice Represents whether there is a new Algebra fee proposal or not\\r\\n  bool public hasNewAlgebraFeeProposal;\\r\\n  /// @notice Suggested Algebra fee value\\r\\n  uint16 public proposedNewAlgebraFee;\\r\\n  /// @notice Address of recipient Algebra part of community fee\\r\\n  address public algebraFeeReceiver;\\r\\n  /// @notice Address of Algebra fee manager\\r\\n  address public algebraFeeManager;\\r\\n  address private _pendingAlgebraFeeManager;\\r\\n\\r\\n  uint16 private constant ALGEBRA_FEE_DENOMINATOR = 1000;\\r\\n\\r\\n  modifier onlyAdministrator() {\\r\\n    require(IAlgebraFactory(factory).hasRoleOrOwner(COMMUNITY_FEE_VAULT_ADMINISTRATOR, msg.sender), 'only administrator');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyWithdrawer() {\\r\\n    require(msg.sender == algebraFeeManager || IAlgebraFactory(factory).hasRoleOrOwner(COMMUNITY_FEE_WITHDRAWER_ROLE, msg.sender), 'only withdrawer');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAlgebraFeeManager() {\\r\\n    require(msg.sender == algebraFeeManager, 'only algebra fee manager');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _factory, address _algebraFeeManager) {\\r\\n    (factory, algebraFeeManager) = (_factory, _algebraFeeManager);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function withdraw(address token, uint256 amount) external override onlyWithdrawer {\\r\\n    (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) = _readAndVerifyWithdrawSettings();\\r\\n    _withdraw(token, _communityFeeReceiver, amount, _algebraFee, _algebraFeeReceiver);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function withdrawTokens(WithdrawTokensParams[] calldata params) external override onlyWithdrawer {\\r\\n    uint256 paramsLength = params.length;\\r\\n    (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) = _readAndVerifyWithdrawSettings();\\r\\n\\r\\n    unchecked {\\r\\n      for (uint256 i; i < paramsLength; ++i) _withdraw(params[i].token, _communityFeeReceiver, params[i].amount, _algebraFee, _algebraFeeReceiver);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _readAndVerifyWithdrawSettings() private view returns (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) {\\r\\n    (_algebraFee, _algebraFeeReceiver, _communityFeeReceiver) = (algebraFee, algebraFeeReceiver, communityFeeReceiver);\\r\\n    if (_algebraFee != 0) require(_algebraFeeReceiver != address(0), 'invalid algebra fee receiver');\\r\\n    require(_communityFeeReceiver != address(0), 'invalid receiver');\\r\\n  }\\r\\n\\r\\n  function _withdraw(address token, address to, uint256 amount, uint16 _algebraFee, address _algebraFeeReceiver) private {\\r\\n    uint256 withdrawAmount = amount;\\r\\n    if (_algebraFee != 0) {\\r\\n      uint256 algebraFeeAmount = FullMath.mulDivRoundingUp(withdrawAmount, _algebraFee, ALGEBRA_FEE_DENOMINATOR);\\r\\n      withdrawAmount -= algebraFeeAmount;\\r\\n      SafeTransfer.safeTransfer(token, _algebraFeeReceiver, algebraFeeAmount);\\r\\n      emit AlgebraTokensWithdrawal(token, _algebraFeeReceiver, algebraFeeAmount);\\r\\n    }\\r\\n\\r\\n    SafeTransfer.safeTransfer(token, to, withdrawAmount);\\r\\n    emit TokensWithdrawal(token, to, withdrawAmount);\\r\\n  }\\r\\n\\r\\n  // ### algebra factory owner permissioned actions ###\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function acceptAlgebraFeeChangeProposal(uint16 newAlgebraFee) external override onlyAdministrator {\\r\\n    require(hasNewAlgebraFeeProposal, 'not proposed');\\r\\n    require(newAlgebraFee == proposedNewAlgebraFee, 'invalid new fee');\\r\\n\\r\\n    // note that the new value will be used for previously accumulated tokens that have not yet been withdrawn\\r\\n    algebraFee = newAlgebraFee;\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (0, false);\\r\\n    emit AlgebraFee(newAlgebraFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function changeCommunityFeeReceiver(address newCommunityFeeReceiver) external override onlyAdministrator {\\r\\n    require(newCommunityFeeReceiver != address(0));\\r\\n    require(newCommunityFeeReceiver != communityFeeReceiver);\\r\\n    communityFeeReceiver = newCommunityFeeReceiver;\\r\\n    emit CommunityFeeReceiver(newCommunityFeeReceiver);\\r\\n  }\\r\\n\\r\\n  // ### algebra fee manager permissioned actions ###\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function transferAlgebraFeeManagerRole(address _newAlgebraFeeManager) external override onlyAlgebraFeeManager {\\r\\n    _pendingAlgebraFeeManager = _newAlgebraFeeManager;\\r\\n    emit PendingAlgebraFeeManager(_newAlgebraFeeManager);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function acceptAlgebraFeeManagerRole() external override {\\r\\n    require(msg.sender == _pendingAlgebraFeeManager);\\r\\n    (_pendingAlgebraFeeManager, algebraFeeManager) = (address(0), msg.sender);\\r\\n    emit AlgebraFeeManager(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function proposeAlgebraFeeChange(uint16 newAlgebraFee) external override onlyAlgebraFeeManager {\\r\\n    require(newAlgebraFee <= ALGEBRA_FEE_DENOMINATOR);\\r\\n    require(newAlgebraFee != proposedNewAlgebraFee && newAlgebraFee != algebraFee);\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (newAlgebraFee, true);\\r\\n    emit AlgebraFeeProposal(newAlgebraFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function cancelAlgebraFeeChangeProposal() external override onlyAlgebraFeeManager {\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (0, false);\\r\\n    emit CancelAlgebraFeeProposal();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function changeAlgebraFeeReceiver(address newAlgebraFeeReceiver) external override onlyAlgebraFeeManager {\\r\\n    require(newAlgebraFeeReceiver != address(0));\\r\\n    require(newAlgebraFeeReceiver != algebraFeeReceiver);\\r\\n    algebraFeeReceiver = newAlgebraFeeReceiver;\\r\\n    emit AlgebraFeeReceiver(newAlgebraFeeReceiver);\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/IAlgebraPoolDeployer.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title An interface for a contract that is capable of deploying Algebra Pools\\r\\n/// @notice A contract that constructs a pool must implement this to pass arguments to the pool\\r\\n/// @dev This is used to avoid having constructor arguments in the pool contract, which results in the init code hash\\r\\n/// of the pool being constant allowing the CREATE2 address of the pool to be cheaply computed on-chain.\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraPoolDeployer {\\r\\n  /// @notice Get the parameters to be used in constructing the pool, set transiently during pool creation.\\r\\n  /// @dev Called by the pool constructor to fetch the parameters of the pool\\r\\n  /// @return plugin The pool associated plugin (if any)\\r\\n  /// @return factory The Algebra Factory address\\r\\n  /// @return token0 The first token of the pool by address sort order\\r\\n  /// @return token1 The second token of the pool by address sort order\\r\\n  function getDeployParameters() external view returns (address plugin, address factory, address token0, address token1);\\r\\n\\r\\n  /// @dev Deploys a pool with the given parameters by transiently setting the parameters in cache.\\r\\n  /// @param plugin The pool associated plugin (if any)\\r\\n  /// @param token0 The first token of the pool by address sort order\\r\\n  /// @param token1 The second token of the pool by address sort order\\r\\n  /// @return pool The deployed pool's address\\r\\n  function deploy(address plugin, address token0, address token1) external returns (address pool);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/libraries/Constants.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0 <0.9.0;\\r\\n\\r\\n/// @title Contains common constants for Algebra contracts\\r\\n/// @dev Constants moved to the library, not the base contract, to further emphasize their constant nature\\r\\nlibrary Constants {\\r\\n  uint8 internal constant RESOLUTION = 96;\\r\\n  uint256 internal constant Q96 = 1 << 96;\\r\\n  uint256 internal constant Q128 = 1 << 128;\\r\\n\\r\\n  uint24 internal constant FEE_DENOMINATOR = 1e6;\\r\\n  uint16 internal constant FLASH_FEE = 0.01e4; // fee for flash loan in hundredths of a bip (0.01%)\\r\\n  uint16 internal constant INIT_DEFAULT_FEE = 0.05e4; // init default fee value in hundredths of a bip (0.05%)\\r\\n  uint16 internal constant MAX_DEFAULT_FEE = 5e4; // max default fee value in hundredths of a bip (5%)\\r\\n\\r\\n  int24 internal constant INIT_DEFAULT_TICK_SPACING = 60;\\r\\n  int24 internal constant MAX_TICK_SPACING = 500;\\r\\n  int24 internal constant MIN_TICK_SPACING = 1;\\r\\n\\r\\n  // the frequency with which the accumulated community fees are sent to the vault\\r\\n  uint32 internal constant COMMUNITY_FEE_TRANSFER_FREQUENCY = 8 hours;\\r\\n\\r\\n  // max(uint128) / (MAX_TICK - MIN_TICK)\\r\\n  uint128 internal constant MAX_LIQUIDITY_PER_TICK = 191757638537527648490752896198553;\\r\\n\\r\\n  uint16 internal constant MAX_COMMUNITY_FEE = 1e3; // 100%\\r\\n  uint256 internal constant COMMUNITY_FEE_DENOMINATOR = 1e3;\\r\\n  // role that can change settings in pools\\r\\n  bytes32 internal constant POOLS_ADMINISTRATOR_ROLE = keccak256('POOLS_ADMINISTRATOR');\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0 <0.9.0\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/Ownable2Step.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Ownable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2Step is Ownable {\\n    address private _pendingOwner;\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        return _pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        _pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        delete _pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        require(pendingOwner() == sender, \\\"Ownable2Step: caller is not the new owner\\\");\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/IAccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\n\\n/**\\n * @dev External interface of AccessControlEnumerable declared to support ERC165 detection.\\n */\\ninterface IAccessControlEnumerable is IAccessControl {\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) external view returns (address);\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) external view returns (uint256);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```solidity\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```solidity\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it. We recommend using {AccessControlDefaultAdminRules}\\n * to enforce additional security measures for this role.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"},\"@openzeppelin/contracts/access/AccessControlEnumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (access/AccessControlEnumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControlEnumerable.sol\\\";\\nimport \\\"./AccessControl.sol\\\";\\nimport \\\"../utils/structs/EnumerableSet.sol\\\";\\n\\n/**\\n * @dev Extension of {AccessControl} that allows enumerating the members of each role.\\n */\\nabstract contract AccessControlEnumerable is IAccessControlEnumerable, AccessControl {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    mapping(bytes32 => EnumerableSet.AddressSet) private _roleMembers;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControlEnumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view virtual override returns (address) {\\n        return _roleMembers[role].at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view virtual override returns (uint256) {\\n        return _roleMembers[role].length();\\n    }\\n\\n    /**\\n     * @dev Overload {_grantRole} to track enumerable memberships\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual override {\\n        super._grantRole(role, account);\\n        _roleMembers[role].add(account);\\n    }\\n\\n    /**\\n     * @dev Overload {_revokeRole} to track enumerable memberships\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual override {\\n        super._revokeRole(role, account);\\n        _roleMembers[role].remove(account);\\n    }\\n}\\n\",\"versionPragma\":\"^0.8.0\"}}}","address":"0x07327f0EDD5594Df24fA3a05C468CC1D5E80E95F","bytecode":"0x60a06040523480156200001157600080fd5b5060405162002781380380620027818339810160408190526200003491620004b7565b6200003f33620000e7565b6001600160a01b0381166200005357600080fd5b6001600160a01b0381166080526004805466ffffffffff00001916643c01f40000179055604051603c81527f7d7979096f943139ebee59f01c077a0f0766d06c40c86d596f23ed2561547cce9060200160405180910390a16040516101f481527fddc0c6f0b581e0d51bfe90ff138e4a548f94515c4dbcb12f5e98fdf0f75039839060200160405180910390a15062000537565b620001066000620001006000546001600160a01b031690565b62000145565b620001118162000170565b6000546001600160a01b03161562000142576200014260006200013c6000546001600160a01b031690565b6200018b565b50565b620001518282620001b1565b60008281526003602052604090206200016b908262000236565b505050565b600180546001600160a01b0319169055620001428162000256565b620001978282620002a6565b60008281526003602052604090206200016b90826200034a565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff1615620002325760008281526002602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45b5050565b60006200024d836001600160a01b03841662000361565b90505b92915050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008281526002602090815260408083206001600160a01b038516845290915290205460ff16620002325760008281526002602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620003063390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b60006200024d836001600160a01b03841662000465565b600081815260018301602052604081205480156200045a57600062000388600183620004e9565b85549091506000906200039e90600190620004e9565b90508181146200040a576000866000018281548110620003c257620003c26200050b565b9060005260206000200154905080876000018481548110620003e857620003e86200050b565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806200041e576200041e62000521565b60019003818190600052602060002001600090559055856001016000868152602001908152602001600020600090556001935050505062000250565b600091505062000250565b6000818152600183016020526040812054620004ae5750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000250565b50600062000250565b600060208284031215620004ca57600080fd5b81516001600160a01b0381168114620004e257600080fd5b9392505050565b818103818111156200025057634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b608051612220620005616000396000818161034101528181610d8a01526110fd01526122206000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c80638da5cb5b11610145578063d8ed2241116100bd578063e34336151161008c578063e8ae2b6911610071578063e8ae2b6914610622578063f09489ac14610635578063f2fde38b1461064857600080fd5b8063e3433615146105fc578063e6a439051461060f57600080fd5b8063d8ed224114610563578063d9a641e114610576578063dc6fd8ab146105b7578063e30c3978146105de57600080fd5b8063b500a48b11610114578063d0ad2792116100f9578063d0ad279214610510578063d547741f14610530578063d8a06f731461054357600080fd5b8063b500a48b146104d6578063ca15c873146104fd57600080fd5b80638da5cb5b146104575780639010d07c1461047557806391d1485414610488578063a217fddf146104ce57600080fd5b806336568abe116101d8578063715018a6116101a757806379ba50971161018c57806379ba5097146103e557806382b13d8d146103ed5780638d5a87111461044457600080fd5b8063715018a6146103ca57806377326584146103d257600080fd5b806336568abe146103885780633ea7fbdb1461039b578063469388c4146103ae5780635a6c72d0146103b657600080fd5b80632939dd971161022f5780632f2ff15d116102145780632f2ff15d146103085780632f8a39dd1461031b5780633119049a1461033c57600080fd5b80632939dd97146102cd57806329bc3446146102e057600080fd5b806301ffc9a714610261578063084bfff914610289578063238a1d74146102a0578063248a9ca3146102aa575b600080fd5b61027461026f366004611e71565b61065b565b60405190151581526020015b60405180910390f35b61029260055481565b604051908152602001610280565b6102a86106b7565b005b6102926102b8366004611eb3565b60009081526002602052604090206001015490565b6102a86102db366004611eee565b610709565b6004546102f590640100000000900460020b81565b60405160029190910b8152602001610280565b6102a8610316366004611f0b565b6107b3565b6004546103299061ffff1681565b60405161ffff9091168152602001610280565b6103637f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610280565b6102a8610396366004611f0b565b6107dd565b6102a86103a9366004611eee565b610895565b6102a8610964565b6004546103299062010000900461ffff1681565b6102a86109c3565b6102a86103e0366004611f3b565b610a34565b6102a8610ad3565b6104006103fb366004611eee565b610b88565b6040805161ffff958616815260029490940b6020850152919093169082015273ffffffffffffffffffffffffffffffffffffffff9091166060820152608001610280565b6102a8610452366004611f3b565b610c6e565b60005473ffffffffffffffffffffffffffffffffffffffff16610363565b610363610483366004611f5f565b610d2b565b610274610496366004611f0b565b600091825260026020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b610292600081565b6102927fb73ce166ead2f8e9add217713a7989e4edfba9625f71dfd2516204bb67ad344281565b61029261050b366004611eb3565b610d4a565b6006546103639073ffffffffffffffffffffffffffffffffffffffff1681565b6102a861053e366004611f0b565b610d61565b6007546103639073ffffffffffffffffffffffffffffffffffffffff1681565b610363610571366004611f81565b610d86565b610363610584366004611f81565b600860209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6102927ff96d2474815c32e070cd63233f06af5413efc5dcb430aee4ff18cc29007c562d81565b60015473ffffffffffffffffffffffffffffffffffffffff16610363565b61036361060a366004611f81565b610edf565b61036361061d366004611f81565b6112db565b610274610630366004611f0b565b61135a565b6102a8610643366004611faf565b6113e7565b6102a8610656366004611eee565b61149c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b157506106b18261154b565b92915050565b6106bf6115e2565b6005546000036106ce57600080fd5b60006005556040514281527fa2492902a0a1d28dc73e6ab22e473239ef077bb7bc8174dc7dab9fc0818e7135906020015b60405180910390a1565b6107116115e2565b60065473ffffffffffffffffffffffffffffffffffffffff9081169082160361073957600080fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5e38e259ec1f8a38b98fc65a27e266bb9cc87c76eb8c96c957450d1cff4591ef906020015b60405180910390a150565b6000828152600260205260409020600101546107ce81611665565b6107d8838361166f565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6108918282611691565b5050565b61089d6115e2565b60075473ffffffffffffffffffffffffffffffffffffffff908116908216036108c557600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166108f15760045461ffff16156108f157600080fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa006ea05a14783821b0248e75d2342cd1681b07509e10a0f08487b080c29dea8906020016107a8565b61096c6115e2565b6005541561097957600080fd5b4260058190557fcd60f5d54996130c21c3f063279b39230bcbafc12f763a1ac1dfaec2e9b61d29906109ae6201518082612001565b604080519283526020830191909152016106ff565b6109cb6115e2565b6005546000036109da57600080fd5b62015180600554426109ec9190612014565b10156109f757600080fd5b6000600555610a046116b3565b6040514281527fa24203c457ce43a097fa0c491fc9cf5e0a893af87a5e0a9785f29491deb11e23906020016106ff565b610a3c6115e2565b61c35061ffff82161115610a4f57600080fd5b60045461ffff808316620100009092041603610a6a57600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff166201000061ffff8416908102919091179091556040519081527fddc0c6f0b581e0d51bfe90ff138e4a548f94515c4dbcb12f5e98fdf0f7503983906020016107a8565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161087e565b610b85816116c1565b50565b60075460009081908190819073ffffffffffffffffffffffffffffffffffffffff1615610c46576007546040517f7570e38900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015290911690637570e38990602401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612027565b90505b60045461ffff80821697640100000000830460020b9750620100009092041694509092509050565b610c766115e2565b6103e861ffff82161115610c8957600080fd5b60045461ffff808316911603610c9e57600080fd5b61ffff811615610cca5760075473ffffffffffffffffffffffffffffffffffffffff16610cca57600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff83169081179091556040519081527f6b5c342391f543846fce47a925e7eba910f7bec232b08633308ca93fdd0fdf0d906020016107a8565b6000828152600360205260408120610d43908361173a565b9392505050565b60008181526003602052604081206106b190611746565b600082815260026020526040902060010154610d7c81611665565b6107d88383611691565b60007f00000000000000000000000000000000000000000000000000000000000000008383604051602001610dde92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290528051602091820120610ea2939290917ff96d2474815c32e070cd63233f06af5413efc5dcb430aee4ff18cc29007c562d91017fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f1957600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610f56578385610f59565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610f7e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260086020908152604080832085851684529091529020541615610fbd57600080fd5b60065460009073ffffffffffffffffffffffffffffffffffffffff16156110a85760065473ffffffffffffffffffffffffffffffffffffffff16639533ff106110068585610d86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9182166004820152818716602482015290851660448201526064016020604051808303816000875af1158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a59190612027565b90505b6040517fd9181cd300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152848116602483015283811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063d9181cd3906064016020604051808303816000875af1158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a9190612027565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260086020818152604080842089871680865290835281852080549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352938190208054909616831790955593519081529397509290917f91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db910160405180910390a360075473ffffffffffffffffffffffffffffffffffffffff16156112d2576007546040517fcbc4801500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529091169063cbc48015906024016020604051808303816000875af11580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d09190612027565b505b50505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061131a57838561131d565b84845b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600860209081526040808320938516835292905220541695945050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1661139260005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161480610d435750600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16610d43565b6113ef6115e2565b6001600282900b121561140157600080fd5b6101f4600282900b131561141457600080fd5b6004546401000000009004600290810b9082900b0361143257600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffff1664010000000062ffffff841602179055604051600282900b81527f7d7979096f943139ebee59f01c077a0f0766d06c40c86d596f23ed2561547cce906020016107a8565b6114a46115e2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915561150660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106b1565b60005473ffffffffffffffffffffffffffffffffffffffff163314611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b565b610b858133611750565b611679828261180a565b60008281526003602052604090206107d890826118fe565b61169b8282611920565b60008281526003602052604090206107d890826119db565b6116bb6115e2565b61166360005b6116ea60006116e560005473ffffffffffffffffffffffffffffffffffffffff1690565b611691565b6116f3816119fd565b60005473ffffffffffffffffffffffffffffffffffffffff1615610b8557610b85600061173560005473ffffffffffffffffffffffffffffffffffffffff1690565b61166f565b6000610d438383611a2e565b60006106b1825490565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108915761179081611a58565b61179b836020611a77565b6040516020016117ac929190612068565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261087e916004016120e9565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661089157600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556118a03390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d438373ffffffffffffffffffffffffffffffffffffffff8416611cba565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561089157600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d438373ffffffffffffffffffffffffffffffffffffffff8416611d09565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610b8581611dfc565b6000826000018281548110611a4557611a4561213a565b9060005260206000200154905092915050565b60606106b173ffffffffffffffffffffffffffffffffffffffff831660145b60606000611a86836002612169565b611a91906002612001565b67ffffffffffffffff811115611aa957611aa9612180565b6040519080825280601f01601f191660200182016040528015611ad3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b0a57611b0a61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b6d57611b6d61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611ba9846002612169565b611bb4906001612001565b90505b6001811115611c51577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611bf557611bf561213a565b1a60f81b828281518110611c0b57611c0b61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611c4a816121af565b9050611bb7565b508315610d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087e565b6000818152600183016020526040812054611d01575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b1565b5060006106b1565b60008181526001830160205260408120548015611df2576000611d2d600183612014565b8554909150600090611d4190600190612014565b9050818114611da6576000866000018281548110611d6157611d6161213a565b9060005260206000200154905080876000018481548110611d8457611d8461213a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611db757611db76121e4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b1565b60009150506106b1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611e8357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4357600080fd5b600060208284031215611ec557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b8557600080fd5b600060208284031215611f0057600080fd5b8135610d4381611ecc565b60008060408385031215611f1e57600080fd5b823591506020830135611f3081611ecc565b809150509250929050565b600060208284031215611f4d57600080fd5b813561ffff81168114610d4357600080fd5b60008060408385031215611f7257600080fd5b50508035926020909101359150565b60008060408385031215611f9457600080fd5b8235611f9f81611ecc565b91506020830135611f3081611ecc565b600060208284031215611fc157600080fd5b81358060020b8114610d4357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106b1576106b1611fd2565b818103818111156106b1576106b1611fd2565b60006020828403121561203957600080fd5b8151610d4381611ecc565b60005b8381101561205f578181015183820152602001612047565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120a0816017850160208801612044565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516120dd816028840160208801612044565b01602801949350505050565b6020815260008251806020840152612108816040850160208701612044565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176106b1576106b1611fd2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000816121be576121be611fd2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000814000a","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061025c5760003560e01c80638da5cb5b11610145578063d8ed2241116100bd578063e34336151161008c578063e8ae2b6911610071578063e8ae2b6914610622578063f09489ac14610635578063f2fde38b1461064857600080fd5b8063e3433615146105fc578063e6a439051461060f57600080fd5b8063d8ed224114610563578063d9a641e114610576578063dc6fd8ab146105b7578063e30c3978146105de57600080fd5b8063b500a48b11610114578063d0ad2792116100f9578063d0ad279214610510578063d547741f14610530578063d8a06f731461054357600080fd5b8063b500a48b146104d6578063ca15c873146104fd57600080fd5b80638da5cb5b146104575780639010d07c1461047557806391d1485414610488578063a217fddf146104ce57600080fd5b806336568abe116101d8578063715018a6116101a757806379ba50971161018c57806379ba5097146103e557806382b13d8d146103ed5780638d5a87111461044457600080fd5b8063715018a6146103ca57806377326584146103d257600080fd5b806336568abe146103885780633ea7fbdb1461039b578063469388c4146103ae5780635a6c72d0146103b657600080fd5b80632939dd971161022f5780632f2ff15d116102145780632f2ff15d146103085780632f8a39dd1461031b5780633119049a1461033c57600080fd5b80632939dd97146102cd57806329bc3446146102e057600080fd5b806301ffc9a714610261578063084bfff914610289578063238a1d74146102a0578063248a9ca3146102aa575b600080fd5b61027461026f366004611e71565b61065b565b60405190151581526020015b60405180910390f35b61029260055481565b604051908152602001610280565b6102a86106b7565b005b6102926102b8366004611eb3565b60009081526002602052604090206001015490565b6102a86102db366004611eee565b610709565b6004546102f590640100000000900460020b81565b60405160029190910b8152602001610280565b6102a8610316366004611f0b565b6107b3565b6004546103299061ffff1681565b60405161ffff9091168152602001610280565b6103637f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610280565b6102a8610396366004611f0b565b6107dd565b6102a86103a9366004611eee565b610895565b6102a8610964565b6004546103299062010000900461ffff1681565b6102a86109c3565b6102a86103e0366004611f3b565b610a34565b6102a8610ad3565b6104006103fb366004611eee565b610b88565b6040805161ffff958616815260029490940b6020850152919093169082015273ffffffffffffffffffffffffffffffffffffffff9091166060820152608001610280565b6102a8610452366004611f3b565b610c6e565b60005473ffffffffffffffffffffffffffffffffffffffff16610363565b610363610483366004611f5f565b610d2b565b610274610496366004611f0b565b600091825260026020908152604080842073ffffffffffffffffffffffffffffffffffffffff93909316845291905290205460ff1690565b610292600081565b6102927fb73ce166ead2f8e9add217713a7989e4edfba9625f71dfd2516204bb67ad344281565b61029261050b366004611eb3565b610d4a565b6006546103639073ffffffffffffffffffffffffffffffffffffffff1681565b6102a861053e366004611f0b565b610d61565b6007546103639073ffffffffffffffffffffffffffffffffffffffff1681565b610363610571366004611f81565b610d86565b610363610584366004611f81565b600860209081526000928352604080842090915290825290205473ffffffffffffffffffffffffffffffffffffffff1681565b6102927ff96d2474815c32e070cd63233f06af5413efc5dcb430aee4ff18cc29007c562d81565b60015473ffffffffffffffffffffffffffffffffffffffff16610363565b61036361060a366004611f81565b610edf565b61036361061d366004611f81565b6112db565b610274610630366004611f0b565b61135a565b6102a8610643366004611faf565b6113e7565b6102a8610656366004611eee565b61149c565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f5a05180f0000000000000000000000000000000000000000000000000000000014806106b157506106b18261154b565b92915050565b6106bf6115e2565b6005546000036106ce57600080fd5b60006005556040514281527fa2492902a0a1d28dc73e6ab22e473239ef077bb7bc8174dc7dab9fc0818e7135906020015b60405180910390a1565b6107116115e2565b60065473ffffffffffffffffffffffffffffffffffffffff9081169082160361073957600080fd5b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527f5e38e259ec1f8a38b98fc65a27e266bb9cc87c76eb8c96c957450d1cff4591ef906020015b60405180910390a150565b6000828152600260205260409020600101546107ce81611665565b6107d8838361166f565b505050565b73ffffffffffffffffffffffffffffffffffffffff81163314610887576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201527f20726f6c657320666f722073656c66000000000000000000000000000000000060648201526084015b60405180910390fd5b6108918282611691565b5050565b61089d6115e2565b60075473ffffffffffffffffffffffffffffffffffffffff908116908216036108c557600080fd5b73ffffffffffffffffffffffffffffffffffffffff81166108f15760045461ffff16156108f157600080fd5b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040519081527fa006ea05a14783821b0248e75d2342cd1681b07509e10a0f08487b080c29dea8906020016107a8565b61096c6115e2565b6005541561097957600080fd5b4260058190557fcd60f5d54996130c21c3f063279b39230bcbafc12f763a1ac1dfaec2e9b61d29906109ae6201518082612001565b604080519283526020830191909152016106ff565b6109cb6115e2565b6005546000036109da57600080fd5b62015180600554426109ec9190612014565b10156109f757600080fd5b6000600555610a046116b3565b6040514281527fa24203c457ce43a097fa0c491fc9cf5e0a893af87a5e0a9785f29491deb11e23906020016106ff565b610a3c6115e2565b61c35061ffff82161115610a4f57600080fd5b60045461ffff808316620100009092041603610a6a57600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000ffff166201000061ffff8416908102919091179091556040519081527fddc0c6f0b581e0d51bfe90ff138e4a548f94515c4dbcb12f5e98fdf0f7503983906020016107a8565b600154339073ffffffffffffffffffffffffffffffffffffffff168114610b7c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f4f776e61626c6532537465703a2063616c6c6572206973206e6f74207468652060448201527f6e6577206f776e65720000000000000000000000000000000000000000000000606482015260840161087e565b610b85816116c1565b50565b60075460009081908190819073ffffffffffffffffffffffffffffffffffffffff1615610c46576007546040517f7570e38900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015290911690637570e38990602401602060405180830381865afa158015610c1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c439190612027565b90505b60045461ffff80821697640100000000830460020b9750620100009092041694509092509050565b610c766115e2565b6103e861ffff82161115610c8957600080fd5b60045461ffff808316911603610c9e57600080fd5b61ffff811615610cca5760075473ffffffffffffffffffffffffffffffffffffffff16610cca57600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff83169081179091556040519081527f6b5c342391f543846fce47a925e7eba910f7bec232b08633308ca93fdd0fdf0d906020016107a8565b6000828152600360205260408120610d43908361173a565b9392505050565b60008181526003602052604081206106b190611746565b600082815260026020526040902060010154610d7c81611665565b6107d88383611691565b60007f00000000000000000000000000000000000000000000000000000000000000008383604051602001610dde92919073ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290528051602091820120610ea2939290917ff96d2474815c32e070cd63233f06af5413efc5dcb430aee4ff18cc29007c562d91017fff00000000000000000000000000000000000000000000000000000000000000815260609390931b7fffffffffffffffffffffffffffffffffffffffff0000000000000000000000001660018401526015830191909152603582015260550190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815291905280516020909101209392505050565b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610f1957600080fd5b6000808373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1610610f56578385610f59565b84845b909250905073ffffffffffffffffffffffffffffffffffffffff8216610f7e57600080fd5b73ffffffffffffffffffffffffffffffffffffffff828116600090815260086020908152604080832085851684529091529020541615610fbd57600080fd5b60065460009073ffffffffffffffffffffffffffffffffffffffff16156110a85760065473ffffffffffffffffffffffffffffffffffffffff16639533ff106110068585610d86565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9182166004820152818716602482015290851660448201526064016020604051808303816000875af1158015611081573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110a59190612027565b90505b6040517fd9181cd300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8281166004830152848116602483015283811660448301527f0000000000000000000000000000000000000000000000000000000000000000169063d9181cd3906064016020604051808303816000875af1158015611146573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061116a9190612027565b73ffffffffffffffffffffffffffffffffffffffff848116600081815260086020818152604080842089871680865290835281852080549789167fffffffffffffffffffffffff000000000000000000000000000000000000000098891681179091559383528185208686528352938190208054909616831790955593519081529397509290917f91ccaa7a278130b65168c3a0c8d3bcae84cf5e43704342bd3ec0b59e59c036db910160405180910390a360075473ffffffffffffffffffffffffffffffffffffffff16156112d2576007546040517fcbc4801500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff86811660048301529091169063cbc48015906024016020604051808303816000875af11580156112ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d09190612027565b505b50505092915050565b60008060008373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161061131a57838561131d565b84845b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600860209081526040808320938516835292905220541695945050505050565b60008173ffffffffffffffffffffffffffffffffffffffff1661139260005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161480610d435750600083815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16610d43565b6113ef6115e2565b6001600282900b121561140157600080fd5b6101f4600282900b131561141457600080fd5b6004546401000000009004600290810b9082900b0361143257600080fd5b600480547fffffffffffffffffffffffffffffffffffffffffffffffffff000000ffffffff1664010000000062ffffff841602179055604051600282900b81527f7d7979096f943139ebee59f01c077a0f0766d06c40c86d596f23ed2561547cce906020016107a8565b6114a46115e2565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff831690811790915561150660005473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e2270060405160405180910390a350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f7965db0b0000000000000000000000000000000000000000000000000000000014806106b157507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316146106b1565b60005473ffffffffffffffffffffffffffffffffffffffff163314611663576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161087e565b565b610b858133611750565b611679828261180a565b60008281526003602052604090206107d890826118fe565b61169b8282611920565b60008281526003602052604090206107d890826119db565b6116bb6115e2565b61166360005b6116ea60006116e560005473ffffffffffffffffffffffffffffffffffffffff1690565b611691565b6116f3816119fd565b60005473ffffffffffffffffffffffffffffffffffffffff1615610b8557610b85600061173560005473ffffffffffffffffffffffffffffffffffffffff1690565b61166f565b6000610d438383611a2e565b60006106b1825490565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166108915761179081611a58565b61179b836020611a77565b6040516020016117ac929190612068565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a000000000000000000000000000000000000000000000000000000000825261087e916004016120e9565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff1661089157600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff85168452909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790556118a03390565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000610d438373ffffffffffffffffffffffffffffffffffffffff8416611cba565b600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff161561089157600082815260026020908152604080832073ffffffffffffffffffffffffffffffffffffffff8516808552925280832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b6000610d438373ffffffffffffffffffffffffffffffffffffffff8416611d09565b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055610b8581611dfc565b6000826000018281548110611a4557611a4561213a565b9060005260206000200154905092915050565b60606106b173ffffffffffffffffffffffffffffffffffffffff831660145b60606000611a86836002612169565b611a91906002612001565b67ffffffffffffffff811115611aa957611aa9612180565b6040519080825280601f01601f191660200182016040528015611ad3576020820181803683370190505b5090507f300000000000000000000000000000000000000000000000000000000000000081600081518110611b0a57611b0a61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f780000000000000000000000000000000000000000000000000000000000000081600181518110611b6d57611b6d61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506000611ba9846002612169565b611bb4906001612001565b90505b6001811115611c51577f303132333435363738396162636465660000000000000000000000000000000085600f1660108110611bf557611bf561213a565b1a60f81b828281518110611c0b57611c0b61213a565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060049490941c93611c4a816121af565b9050611bb7565b508315610d43576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161087e565b6000818152600183016020526040812054611d01575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106b1565b5060006106b1565b60008181526001830160205260408120548015611df2576000611d2d600183612014565b8554909150600090611d4190600190612014565b9050818114611da6576000866000018281548110611d6157611d6161213a565b9060005260206000200154905080876000018481548110611d8457611d8461213a565b6000918252602080832090910192909255918252600188019052604090208390555b8554869080611db757611db76121e4565b6001900381819060005260206000200160009055905585600101600086815260200190815260200160002060009055600193505050506106b1565b60009150506106b1565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215611e8357600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610d4357600080fd5b600060208284031215611ec557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114610b8557600080fd5b600060208284031215611f0057600080fd5b8135610d4381611ecc565b60008060408385031215611f1e57600080fd5b823591506020830135611f3081611ecc565b809150509250929050565b600060208284031215611f4d57600080fd5b813561ffff81168114610d4357600080fd5b60008060408385031215611f7257600080fd5b50508035926020909101359150565b60008060408385031215611f9457600080fd5b8235611f9f81611ecc565b91506020830135611f3081611ecc565b600060208284031215611fc157600080fd5b81358060020b8114610d4357600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156106b1576106b1611fd2565b818103818111156106b1576106b1611fd2565b60006020828403121561203957600080fd5b8151610d4381611ecc565b60005b8381101561205f578181015183820152602001612047565b50506000910152565b7f416363657373436f6e74726f6c3a206163636f756e74200000000000000000008152600083516120a0816017850160208801612044565b7f206973206d697373696e6720726f6c652000000000000000000000000000000060179184019182015283516120dd816028840160208801612044565b01602801949350505050565b6020815260008251806020840152612108816040850160208701612044565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b80820281158282048414176106b1576106b1611fd2565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000816121be576121be611fd2565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fdfea164736f6c6343000814000a","abi":[{"inputs":[{"internalType":"address","name":"_poolDeployer","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"newDefaultCommunityFee","type":"uint16"}],"name":"DefaultCommunityFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"newDefaultFee","type":"uint16"}],"name":"DefaultFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"defaultPluginFactoryAddress","type":"address"}],"name":"DefaultPluginFactory","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"int24","name":"newDefaultTickspacing","type":"int24"}],"name":"DefaultTickspacing","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferStarted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token0","type":"address"},{"indexed":true,"internalType":"address","name":"token1","type":"address"},{"indexed":false,"internalType":"address","name":"pool","type":"address"}],"name":"Pool","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"RenounceOwnershipFinish","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"finishTimestamp","type":"uint256"}],"name":"RenounceOwnershipStart","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"timestamp","type":"uint256"}],"name":"RenounceOwnershipStop","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"previousAdminRole","type":"bytes32"},{"indexed":true,"internalType":"bytes32","name":"newAdminRole","type":"bytes32"}],"name":"RoleAdminChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":true,"internalType":"address","name":"account","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newVaultFactory","type":"address"}],"name":"VaultFactory","type":"event"},{"inputs":[],"name":"DEFAULT_ADMIN_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POOLS_ADMINISTRATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"POOL_INIT_CODE_HASH","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"acceptOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token0","type":"address"},{"internalType":"address","name":"token1","type":"address"}],"name":"computePoolAddress","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"createPool","outputs":[{"internalType":"address","name":"pool","type":"address"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"defaultCommunityFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"pool","type":"address"}],"name":"defaultConfigurationForPool","outputs":[{"internalType":"uint16","name":"communityFee","type":"uint16"},{"internalType":"int24","name":"tickSpacing","type":"int24"},{"internalType":"uint16","name":"fee","type":"uint16"},{"internalType":"address","name":"communityVault","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultPluginFactory","outputs":[{"internalType":"contract IAlgebraPluginFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"defaultTickspacing","outputs":[{"internalType":"int24","name":"","type":"int24"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"getPair","outputs":[{"internalType":"address","name":"pair","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleAdmin","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"uint256","name":"index","type":"uint256"}],"name":"getRoleMember","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"getRoleMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRoleOrOwner","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"pendingOwner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"","type":"address"}],"name":"poolByPair","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"poolDeployer","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"renounceOwnershipStartTimestamp","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"newDefaultCommunityFee","type":"uint16"}],"name":"setDefaultCommunityFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint16","name":"newDefaultFee","type":"uint16"}],"name":"setDefaultFee","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newDefaultPluginFactory","type":"address"}],"name":"setDefaultPluginFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"int24","name":"newDefaultTickspacing","type":"int24"}],"name":"setDefaultTickspacing","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newVaultFactory","type":"address"}],"name":"setVaultFactory","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"startRenounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"stopRenounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"vaultFactory","outputs":[{"internalType":"contract IAlgebraVaultFactory","name":"","type":"address"}],"stateMutability":"view","type":"function"}]}