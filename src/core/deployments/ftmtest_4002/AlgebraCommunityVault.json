{"metadata":"{\"defaultCompiler\":{\"version\":\"0.8.20\"},\"sources\":{\"contracts/AlgebraCommunityVault.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\r\\npragma solidity =0.8.20;\\r\\n\\r\\nimport './libraries/SafeTransfer.sol';\\r\\nimport './libraries/FullMath.sol';\\r\\n\\r\\nimport './interfaces/IAlgebraFactory.sol';\\r\\nimport './interfaces/vault/IAlgebraCommunityVault.sol';\\r\\n\\r\\n/// @title Algebra community fee vault\\r\\n/// @notice Community fee from pools is sent here, if it is enabled\\r\\n/// @dev Role system is used to withdraw tokens\\r\\n/// @dev Version: Algebra Integral 1.0\\r\\ncontract AlgebraCommunityVault is IAlgebraCommunityVault {\\r\\n  /// @dev The role can be granted in AlgebraFactory\\r\\n  bytes32 public constant COMMUNITY_FEE_WITHDRAWER_ROLE = keccak256('COMMUNITY_FEE_WITHDRAWER');\\r\\n  /// @dev The role can be granted in AlgebraFactory\\r\\n  bytes32 public constant COMMUNITY_FEE_VAULT_ADMINISTRATOR = keccak256('COMMUNITY_FEE_VAULT_ADMINISTRATOR');\\r\\n  address private immutable factory;\\r\\n\\r\\n  /// @notice Address to which community fees are sent from vault\\r\\n  address public communityFeeReceiver;\\r\\n  /// @notice The percentage of the protocol fee that Algebra will receive\\r\\n  /// @dev Value in thousandths,i.e. 1e-3\\r\\n  uint16 public algebraFee;\\r\\n  /// @notice Represents whether there is a new Algebra fee proposal or not\\r\\n  bool public hasNewAlgebraFeeProposal;\\r\\n  /// @notice Suggested Algebra fee value\\r\\n  uint16 public proposedNewAlgebraFee;\\r\\n  /// @notice Address of recipient Algebra part of community fee\\r\\n  address public algebraFeeReceiver;\\r\\n  /// @notice Address of Algebra fee manager\\r\\n  address public algebraFeeManager;\\r\\n  address private _pendingAlgebraFeeManager;\\r\\n\\r\\n  uint16 private constant ALGEBRA_FEE_DENOMINATOR = 1000;\\r\\n\\r\\n  modifier onlyAdministrator() {\\r\\n    require(IAlgebraFactory(factory).hasRoleOrOwner(COMMUNITY_FEE_VAULT_ADMINISTRATOR, msg.sender), 'only administrator');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyWithdrawer() {\\r\\n    require(msg.sender == algebraFeeManager || IAlgebraFactory(factory).hasRoleOrOwner(COMMUNITY_FEE_WITHDRAWER_ROLE, msg.sender), 'only withdrawer');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyAlgebraFeeManager() {\\r\\n    require(msg.sender == algebraFeeManager, 'only algebra fee manager');\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(address _factory, address _algebraFeeManager) {\\r\\n    (factory, algebraFeeManager) = (_factory, _algebraFeeManager);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function withdraw(address token, uint256 amount) external override onlyWithdrawer {\\r\\n    (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) = _readAndVerifyWithdrawSettings();\\r\\n    _withdraw(token, _communityFeeReceiver, amount, _algebraFee, _algebraFeeReceiver);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function withdrawTokens(WithdrawTokensParams[] calldata params) external override onlyWithdrawer {\\r\\n    uint256 paramsLength = params.length;\\r\\n    (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) = _readAndVerifyWithdrawSettings();\\r\\n\\r\\n    unchecked {\\r\\n      for (uint256 i; i < paramsLength; ++i) _withdraw(params[i].token, _communityFeeReceiver, params[i].amount, _algebraFee, _algebraFeeReceiver);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  function _readAndVerifyWithdrawSettings() private view returns (uint16 _algebraFee, address _algebraFeeReceiver, address _communityFeeReceiver) {\\r\\n    (_algebraFee, _algebraFeeReceiver, _communityFeeReceiver) = (algebraFee, algebraFeeReceiver, communityFeeReceiver);\\r\\n    if (_algebraFee != 0) require(_algebraFeeReceiver != address(0), 'invalid algebra fee receiver');\\r\\n    require(_communityFeeReceiver != address(0), 'invalid receiver');\\r\\n  }\\r\\n\\r\\n  function _withdraw(address token, address to, uint256 amount, uint16 _algebraFee, address _algebraFeeReceiver) private {\\r\\n    uint256 withdrawAmount = amount;\\r\\n    if (_algebraFee != 0) {\\r\\n      uint256 algebraFeeAmount = FullMath.mulDivRoundingUp(withdrawAmount, _algebraFee, ALGEBRA_FEE_DENOMINATOR);\\r\\n      withdrawAmount -= algebraFeeAmount;\\r\\n      SafeTransfer.safeTransfer(token, _algebraFeeReceiver, algebraFeeAmount);\\r\\n      emit AlgebraTokensWithdrawal(token, _algebraFeeReceiver, algebraFeeAmount);\\r\\n    }\\r\\n\\r\\n    SafeTransfer.safeTransfer(token, to, withdrawAmount);\\r\\n    emit TokensWithdrawal(token, to, withdrawAmount);\\r\\n  }\\r\\n\\r\\n  // ### algebra factory owner permissioned actions ###\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function acceptAlgebraFeeChangeProposal(uint16 newAlgebraFee) external override onlyAdministrator {\\r\\n    require(hasNewAlgebraFeeProposal, 'not proposed');\\r\\n    require(newAlgebraFee == proposedNewAlgebraFee, 'invalid new fee');\\r\\n\\r\\n    // note that the new value will be used for previously accumulated tokens that have not yet been withdrawn\\r\\n    algebraFee = newAlgebraFee;\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (0, false);\\r\\n    emit AlgebraFee(newAlgebraFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function changeCommunityFeeReceiver(address newCommunityFeeReceiver) external override onlyAdministrator {\\r\\n    require(newCommunityFeeReceiver != address(0));\\r\\n    require(newCommunityFeeReceiver != communityFeeReceiver);\\r\\n    communityFeeReceiver = newCommunityFeeReceiver;\\r\\n    emit CommunityFeeReceiver(newCommunityFeeReceiver);\\r\\n  }\\r\\n\\r\\n  // ### algebra fee manager permissioned actions ###\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function transferAlgebraFeeManagerRole(address _newAlgebraFeeManager) external override onlyAlgebraFeeManager {\\r\\n    _pendingAlgebraFeeManager = _newAlgebraFeeManager;\\r\\n    emit PendingAlgebraFeeManager(_newAlgebraFeeManager);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function acceptAlgebraFeeManagerRole() external override {\\r\\n    require(msg.sender == _pendingAlgebraFeeManager);\\r\\n    (_pendingAlgebraFeeManager, algebraFeeManager) = (address(0), msg.sender);\\r\\n    emit AlgebraFeeManager(msg.sender);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function proposeAlgebraFeeChange(uint16 newAlgebraFee) external override onlyAlgebraFeeManager {\\r\\n    require(newAlgebraFee <= ALGEBRA_FEE_DENOMINATOR);\\r\\n    require(newAlgebraFee != proposedNewAlgebraFee && newAlgebraFee != algebraFee);\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (newAlgebraFee, true);\\r\\n    emit AlgebraFeeProposal(newAlgebraFee);\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function cancelAlgebraFeeChangeProposal() external override onlyAlgebraFeeManager {\\r\\n    (proposedNewAlgebraFee, hasNewAlgebraFeeProposal) = (0, false);\\r\\n    emit CancelAlgebraFeeProposal();\\r\\n  }\\r\\n\\r\\n  /// @inheritdoc IAlgebraCommunityVault\\r\\n  function changeAlgebraFeeReceiver(address newAlgebraFeeReceiver) external override onlyAlgebraFeeManager {\\r\\n    require(newAlgebraFeeReceiver != address(0));\\r\\n    require(newAlgebraFeeReceiver != algebraFeeReceiver);\\r\\n    algebraFeeReceiver = newAlgebraFeeReceiver;\\r\\n    emit AlgebraFeeReceiver(newAlgebraFeeReceiver);\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"=0.8.20\"},\"contracts/interfaces/pool/IAlgebraPoolErrors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.8.4;\\r\\n\\r\\n/// @title Errors emitted by a pool\\r\\n/// @notice Contains custom errors emitted by the pool\\r\\n/// @dev Custom errors are separated from the common pool interface for compatibility with older versions of Solidity\\r\\ninterface IAlgebraPoolErrors {\\r\\n  // ####  pool errors  ####\\r\\n\\r\\n  /// @notice Emitted by the reentrancy guard\\r\\n  error locked();\\r\\n\\r\\n  /// @notice Emitted if arithmetic error occurred\\r\\n  error arithmeticError();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to initialize the pool twice\\r\\n  error alreadyInitialized();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to mint or swap in uninitialized pool\\r\\n  error notInitialized();\\r\\n\\r\\n  /// @notice Emitted if 0 is passed as amountRequired to swap function\\r\\n  error zeroAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if invalid amount is passed as amountRequired to swap function\\r\\n  error invalidAmountRequired();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens than it should have\\r\\n  error insufficientInputAmount();\\r\\n\\r\\n  /// @notice Emitted if there was an attempt to mint zero liquidity\\r\\n  error zeroLiquidityDesired();\\r\\n  /// @notice Emitted if actual amount of liquidity is zero (due to insufficient amount of tokens received)\\r\\n  error zeroLiquidityActual();\\r\\n\\r\\n  /// @notice Emitted if the pool received fewer tokens0 after flash than it should have\\r\\n  error flashInsufficientPaid0();\\r\\n  /// @notice Emitted if the pool received fewer tokens1 after flash than it should have\\r\\n  error flashInsufficientPaid1();\\r\\n\\r\\n  /// @notice Emitted if limitSqrtPrice param is incorrect\\r\\n  error invalidLimitSqrtPrice();\\r\\n\\r\\n  /// @notice Tick must be divisible by tickspacing\\r\\n  error tickIsNotSpaced();\\r\\n\\r\\n  /// @notice Emitted if a method is called that is accessible only to the factory owner or dedicated role\\r\\n  error notAllowed();\\r\\n\\r\\n  /// @notice Emitted if new tick spacing exceeds max allowed value\\r\\n  error invalidNewTickSpacing();\\r\\n  /// @notice Emitted if new community fee exceeds max allowed value\\r\\n  error invalidNewCommunityFee();\\r\\n\\r\\n  /// @notice Emitted if an attempt is made to manually change the fee value, but dynamic fee is enabled\\r\\n  error dynamicFeeActive();\\r\\n  /// @notice Emitted if an attempt is made by plugin to change the fee value, but dynamic fee is disabled\\r\\n  error dynamicFeeDisabled();\\r\\n  /// @notice Emitted if an attempt is made to change the plugin configuration, but the plugin is not connected\\r\\n  error pluginIsNotConnected();\\r\\n  /// @notice Emitted if a plugin returns invalid selector after hook call\\r\\n  /// @param expectedSelector The expected selector\\r\\n  error invalidHookResponse(bytes4 expectedSelector);\\r\\n\\r\\n  // ####  LiquidityMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if liquidity underflows\\r\\n  error liquiditySub();\\r\\n  /// @notice Emitted if liquidity overflows\\r\\n  error liquidityAdd();\\r\\n\\r\\n  // ####  TickManagement errors  ####\\r\\n\\r\\n  /// @notice Emitted if the topTick param not greater then the bottomTick param\\r\\n  error topTickLowerOrEqBottomTick();\\r\\n  /// @notice Emitted if the bottomTick param is lower than min allowed value\\r\\n  error bottomTickLowerThanMIN();\\r\\n  /// @notice Emitted if the topTick param is greater than max allowed value\\r\\n  error topTickAboveMAX();\\r\\n  /// @notice Emitted if the liquidity value associated with the tick exceeds MAX_LIQUIDITY_PER_TICK\\r\\n  error liquidityOverflow();\\r\\n  /// @notice Emitted if an attempt is made to interact with an uninitialized tick\\r\\n  error tickIsNotInitialized();\\r\\n  /// @notice Emitted if there is an attempt to insert a new tick into the list of ticks with incorrect indexes of the previous and next ticks\\r\\n  error tickInvalidLinks();\\r\\n\\r\\n  // ####  SafeTransfer errors  ####\\r\\n\\r\\n  /// @notice Emitted if token transfer failed internally\\r\\n  error transferFailed();\\r\\n\\r\\n  // ####  TickMath errors  ####\\r\\n\\r\\n  /// @notice Emitted if tick is greater than the maximum or less than the minimum allowed value\\r\\n  error tickOutOfRange();\\r\\n  /// @notice Emitted if price is greater than the maximum or less than the minimum allowed value\\r\\n  error priceOutOfRange();\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4\"},\"contracts/libraries/SafeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity >=0.8.4 <0.9.0;\\r\\n\\r\\nimport '../interfaces/pool/IAlgebraPoolErrors.sol';\\r\\n\\r\\n/// @title SafeTransfer\\r\\n/// @notice Safe ERC20 transfer library that gracefully handles missing return values.\\r\\n/// @dev Credit to Solmate under MIT license: https://github.com/transmissions11/solmate/blob/ed67feda67b24fdeff8ad1032360f0ee6047ba0a/src/utils/SafeTransferLib.sol\\r\\n/// @dev Please note that this library does not check if the token has a code! That responsibility is delegated to the caller.\\r\\nlibrary SafeTransfer {\\r\\n  /// @notice Transfers tokens to a recipient\\r\\n  /// @dev Calls transfer on token contract, errors with transferFailed() if transfer fails\\r\\n  /// @param token The contract address of the token which will be transferred\\r\\n  /// @param to The recipient of the transfer\\r\\n  /// @param amount The amount of the token to transfer\\r\\n  function safeTransfer(address token, address to, uint256 amount) internal {\\r\\n    bool success;\\r\\n    assembly {\\r\\n      let freeMemoryPointer := mload(0x40) // we will need to restore 0x40 slot\\r\\n      mstore(0x00, 0xa9059cbb00000000000000000000000000000000000000000000000000000000) // \\\"transfer(address,uint256)\\\" selector\\r\\n      mstore(0x04, and(to, 0xffffffffffffffffffffffffffffffffffffffff)) // append cleaned \\\"to\\\" address\\r\\n      mstore(0x24, amount)\\r\\n      // now we use 0x00 - 0x44 bytes (68), freeMemoryPointer is dirty\\r\\n      success := call(gas(), token, 0, 0, 0x44, 0, 0x20)\\r\\n      success := and(\\r\\n        // set success to true if call isn't reverted and returned exactly 1 (can't just be non-zero data) or nothing\\r\\n        or(and(eq(mload(0), 1), eq(returndatasize(), 32)), iszero(returndatasize())),\\r\\n        success\\r\\n      )\\r\\n      mstore(0x40, freeMemoryPointer) // restore the freeMemoryPointer\\r\\n    }\\r\\n\\r\\n    if (!success) revert IAlgebraPoolErrors.transferFailed();\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\">=0.8.4 <0.9.0\"},\"contracts/libraries/FullMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\n/// @title Contains 512-bit math functions\\r\\n/// @notice Facilitates multiplication and division that can have overflow of an intermediate value without any loss of precision\\r\\n/// @dev Handles \\\"phantom overflow\\\" i.e., allows multiplication and division where an intermediate value overflows 256 bits\\r\\nlibrary FullMath {\\r\\n  /// @notice Calculates floor(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  /// @dev Credit to Remco Bloemen under MIT license https://xn--2-umb.com/21/muldiv\\r\\n  function mulDiv(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      // 512-bit multiply [prod1 prod0] = a * b\\r\\n      // Compute the product mod 2**256 and mod 2**256 - 1\\r\\n      // then use the Chinese Remainder Theorem to reconstruct\\r\\n      // the 512 bit result. The result is stored in two 256\\r\\n      // variables such that product = prod1 * 2**256 + prod0\\r\\n      uint256 prod0 = a * b; // Least significant 256 bits of the product\\r\\n      uint256 prod1; // Most significant 256 bits of the product\\r\\n      assembly {\\r\\n        let mm := mulmod(a, b, not(0))\\r\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\r\\n      }\\r\\n\\r\\n      // Make sure the result is less than 2**256.\\r\\n      // Also prevents denominator == 0\\r\\n      require(denominator > prod1);\\r\\n\\r\\n      // Handle non-overflow cases, 256 by 256 division\\r\\n      if (prod1 == 0) {\\r\\n        assembly {\\r\\n          result := div(prod0, denominator)\\r\\n        }\\r\\n        return result;\\r\\n      }\\r\\n\\r\\n      ///////////////////////////////////////////////\\r\\n      // 512 by 256 division.\\r\\n      ///////////////////////////////////////////////\\r\\n\\r\\n      // Make division exact by subtracting the remainder from [prod1 prod0]\\r\\n      // Compute remainder using mulmod\\r\\n      // Subtract 256 bit remainder from 512 bit number\\r\\n      assembly {\\r\\n        let remainder := mulmod(a, b, denominator)\\r\\n        prod1 := sub(prod1, gt(remainder, prod0))\\r\\n        prod0 := sub(prod0, remainder)\\r\\n      }\\r\\n\\r\\n      // Factor powers of two out of denominator\\r\\n      // Compute largest power of two divisor of denominator.\\r\\n      // Always >= 1.\\r\\n      uint256 twos = (0 - denominator) & denominator;\\r\\n      // Divide denominator by power of two\\r\\n      assembly {\\r\\n        denominator := div(denominator, twos)\\r\\n      }\\r\\n\\r\\n      // Divide [prod1 prod0] by the factors of two\\r\\n      assembly {\\r\\n        prod0 := div(prod0, twos)\\r\\n      }\\r\\n      // Shift in bits from prod1 into prod0. For this we need\\r\\n      // to flip `twos` such that it is 2**256 / twos.\\r\\n      // If twos is zero, then it becomes one\\r\\n      assembly {\\r\\n        twos := add(div(sub(0, twos), twos), 1)\\r\\n      }\\r\\n      prod0 |= prod1 * twos;\\r\\n\\r\\n      // Invert denominator mod 2**256\\r\\n      // Now that denominator is an odd number, it has an inverse\\r\\n      // modulo 2**256 such that denominator * inv = 1 mod 2**256.\\r\\n      // Compute the inverse by starting with a seed that is correct\\r\\n      // correct for four bits. That is, denominator * inv = 1 mod 2**4\\r\\n      uint256 inv = (3 * denominator) ^ 2;\\r\\n      // Now use Newton-Raphson iteration to improve the precision.\\r\\n      // Thanks to Hensel's lifting lemma, this also works in modular\\r\\n      // arithmetic, doubling the correct bits in each step.\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**8\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**16\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**32\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**64\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**128\\r\\n      inv *= 2 - denominator * inv; // inverse mod 2**256\\r\\n\\r\\n      // Because the division is now exact we can divide by multiplying\\r\\n      // with the modular inverse of denominator. This will give us the\\r\\n      // correct result modulo 2**256. Since the preconditions guarantee\\r\\n      // that the outcome is less than 2**256, this is the final result.\\r\\n      // We don't need to compute the high bits of the result and prod1\\r\\n      // is no longer required.\\r\\n      result = prod0 * inv;\\r\\n      return result;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates ceil(a×b÷denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\r\\n  /// @param a The multiplicand\\r\\n  /// @param b The multiplier\\r\\n  /// @param denominator The divisor\\r\\n  /// @return result The 256-bit result\\r\\n  function mulDivRoundingUp(uint256 a, uint256 b, uint256 denominator) internal pure returns (uint256 result) {\\r\\n    unchecked {\\r\\n      if (a == 0 || ((result = a * b) / a == b)) {\\r\\n        require(denominator > 0);\\r\\n        assembly {\\r\\n          result := add(div(result, denominator), gt(mod(result, denominator), 0))\\r\\n        }\\r\\n      } else {\\r\\n        result = mulDiv(a, b, denominator);\\r\\n        if (mulmod(a, b, denominator) > 0) {\\r\\n          require(result < type(uint256).max);\\r\\n          result++;\\r\\n        }\\r\\n      }\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Returns ceil(x / y)\\r\\n  /// @dev division by 0 has unspecified behavior, and must be checked externally\\r\\n  /// @param x The dividend\\r\\n  /// @param y The divisor\\r\\n  /// @return z The quotient, ceil(x / y)\\r\\n  function unsafeDivRoundingUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\r\\n    assembly {\\r\\n      z := add(div(x, y), gt(mod(x, y), 0))\\r\\n    }\\r\\n  }\\r\\n}\\r\\n\",\"versionPragma\":\"^0.8.0\"},\"contracts/interfaces/vault/IAlgebraCommunityVault.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra community fee vault\\r\\n/// @notice Community fee from pools is sent here, if it is enabled\\r\\n/// @dev Version: Algebra Integral\\r\\ninterface IAlgebraCommunityVault {\\r\\n  /// @notice Event emitted when a fees has been claimed\\r\\n  /// @param token The address of token fee\\r\\n  /// @param to The address where claimed rewards were sent to\\r\\n  /// @param amount The amount of fees tokens claimed by communityFeeReceiver\\r\\n  event TokensWithdrawal(address indexed token, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Event emitted when a fees has been claimed\\r\\n  /// @param token The address of token fee\\r\\n  /// @param to The address where claimed rewards were sent to\\r\\n  /// @param amount The amount of fees tokens claimed by Algebra\\r\\n  event AlgebraTokensWithdrawal(address indexed token, address indexed to, uint256 amount);\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeReceiver address changed\\r\\n  /// @param newAlgebraFeeReceiver New Algebra fee receiver address\\r\\n  event AlgebraFeeReceiver(address newAlgebraFeeReceiver);\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeManager address change proposed\\r\\n  /// @param pendingAlgebraFeeManager New pending Algebra fee manager address\\r\\n  event PendingAlgebraFeeManager(address pendingAlgebraFeeManager);\\r\\n\\r\\n  /// @notice Emitted when a new Algebra fee value proposed\\r\\n  /// @param proposedNewAlgebraFee The new proposed Algebra fee value\\r\\n  event AlgebraFeeProposal(uint16 proposedNewAlgebraFee);\\r\\n\\r\\n  /// @notice Emitted when a Algebra fee proposal canceled\\r\\n  event CancelAlgebraFeeProposal();\\r\\n\\r\\n  /// @notice Emitted when a AlgebraFeeManager address changed\\r\\n  /// @param newAlgebraFeeManager New Algebra fee manager address\\r\\n  event AlgebraFeeManager(address newAlgebraFeeManager);\\r\\n\\r\\n  /// @notice Emitted when the Algebra fee is changed\\r\\n  /// @param newAlgebraFee The new Algebra fee value\\r\\n  event AlgebraFee(uint16 newAlgebraFee);\\r\\n\\r\\n  /// @notice Emitted when a CommunityFeeReceiver address changed\\r\\n  /// @param newCommunityFeeReceiver New fee receiver address\\r\\n  event CommunityFeeReceiver(address newCommunityFeeReceiver);\\r\\n\\r\\n  /// @notice Withdraw protocol fees from vault\\r\\n  /// @dev Can only be called by algebraFeeManager or communityFeeReceiver\\r\\n  /// @param token The token address\\r\\n  /// @param amount The amount of token\\r\\n  function withdraw(address token, uint256 amount) external;\\r\\n\\r\\n  struct WithdrawTokensParams {\\r\\n    address token;\\r\\n    uint256 amount;\\r\\n  }\\r\\n\\r\\n  /// @notice Withdraw protocol fees from vault. Used to claim fees for multiple tokens\\r\\n  /// @dev Can be called by algebraFeeManager or communityFeeReceiver\\r\\n  /// @param params Array of WithdrawTokensParams objects containing token addresses and amounts to withdraw\\r\\n  function withdrawTokens(WithdrawTokensParams[] calldata params) external;\\r\\n\\r\\n  // ### algebra factory owner permissioned actions ###\\r\\n\\r\\n  /// @notice Accepts the proposed new Algebra fee\\r\\n  /// @dev Can only be called by the factory owner.\\r\\n  /// The new value will also be used for previously accumulated tokens that have not yet been withdrawn\\r\\n  /// @param newAlgebraFee New Algebra fee value\\r\\n  function acceptAlgebraFeeChangeProposal(uint16 newAlgebraFee) external;\\r\\n\\r\\n  /// @notice Change community fee receiver address\\r\\n  /// @dev Can only be called by the factory owner\\r\\n  /// @param newCommunityFeeReceiver New community fee receiver address\\r\\n  function changeCommunityFeeReceiver(address newCommunityFeeReceiver) external;\\r\\n\\r\\n  // ### algebra fee manager permissioned actions ###\\r\\n\\r\\n  /// @notice Transfers Algebra fee manager role\\r\\n  /// @param _newAlgebraFeeManager new Algebra fee manager address\\r\\n  function transferAlgebraFeeManagerRole(address _newAlgebraFeeManager) external;\\r\\n\\r\\n  /// @notice accept Algebra FeeManager role\\r\\n  function acceptAlgebraFeeManagerRole() external;\\r\\n\\r\\n  /// @notice Proposes new Algebra fee value for protocol\\r\\n  /// @dev the new value will also be used for previously accumulated tokens that have not yet been withdrawn\\r\\n  /// @param newAlgebraFee new Algebra fee value\\r\\n  function proposeAlgebraFeeChange(uint16 newAlgebraFee) external;\\r\\n\\r\\n  /// @notice Cancels Algebra fee change proposal\\r\\n  function cancelAlgebraFeeChangeProposal() external;\\r\\n\\r\\n  /// @notice Change Algebra community fee part receiver\\r\\n  /// @param newAlgebraFeeReceiver The address of new Algebra fee receiver\\r\\n  function changeAlgebraFeeReceiver(address newAlgebraFeeReceiver) external;\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/plugin/IAlgebraPluginFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title An interface for a contract that is capable of deploying Algebra plugins\\r\\n/// @dev Such a factory is needed if the plugin should be automatically created and connected to each new pool\\r\\ninterface IAlgebraPluginFactory {\\r\\n  /// @notice Deploys new plugin contract for pool\\r\\n  /// @param pool The address of the pool for which the new plugin will be created\\r\\n  /// @param token0 First token of the pool\\r\\n  /// @param token1 Second token of the pool\\r\\n  /// @return New plugin address\\r\\n  function createPlugin(address pool, address token0, address token1) external returns (address);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/vault/IAlgebraVaultFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\n\\r\\n/// @title The interface for the Algebra Vault Factory\\r\\n/// @notice This contract can be used for automatic vaults creation\\r\\n/// @dev Version: Algebra Integral\\r\\ninterface IAlgebraVaultFactory {\\r\\n  /// @notice returns address of the community fee vault for the pool\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function getVaultForPool(address pool) external view returns (address communityFeeVault);\\r\\n\\r\\n  /// @notice creates the community fee vault for the pool if needed\\r\\n  /// @param pool the address of Algebra Integral pool\\r\\n  /// @return communityFeeVault the address of community fee vault\\r\\n  function createVaultForPool(address pool) external returns (address communityFeeVault);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"},\"contracts/interfaces/IAlgebraFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\r\\npragma solidity >=0.5.0;\\r\\npragma abicoder v2;\\r\\n\\r\\nimport './plugin/IAlgebraPluginFactory.sol';\\r\\nimport './vault/IAlgebraVaultFactory.sol';\\r\\n\\r\\n/// @title The interface for the Algebra Factory\\r\\n/// @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\\r\\ninterface IAlgebraFactory {\\r\\n  /// @notice Emitted when a process of ownership renounce is started\\r\\n  /// @param timestamp The timestamp of event\\r\\n  /// @param finishTimestamp The timestamp when ownership renounce will be possible to finish\\r\\n  event RenounceOwnershipStart(uint256 timestamp, uint256 finishTimestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce cancelled\\r\\n  /// @param timestamp The timestamp of event\\r\\n  event RenounceOwnershipStop(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a process of ownership renounce finished\\r\\n  /// @param timestamp The timestamp of ownership renouncement\\r\\n  event RenounceOwnershipFinish(uint256 timestamp);\\r\\n\\r\\n  /// @notice Emitted when a pool is created\\r\\n  /// @param token0 The first token of the pool by address sort order\\r\\n  /// @param token1 The second token of the pool by address sort order\\r\\n  /// @param pool The address of the created pool\\r\\n  event Pool(address indexed token0, address indexed token1, address pool);\\r\\n\\r\\n  /// @notice Emitted when the default community fee is changed\\r\\n  /// @param newDefaultCommunityFee The new default community fee value\\r\\n  event DefaultCommunityFee(uint16 newDefaultCommunityFee);\\r\\n\\r\\n  /// @notice Emitted when the default tickspacing is changed\\r\\n  /// @param newDefaultTickspacing The new default tickspacing value\\r\\n  event DefaultTickspacing(int24 newDefaultTickspacing);\\r\\n\\r\\n  /// @notice Emitted when the default fee is changed\\r\\n  /// @param newDefaultFee The new default fee value\\r\\n  event DefaultFee(uint16 newDefaultFee);\\r\\n\\r\\n  /// @notice Emitted when the defaultPluginFactory address is changed\\r\\n  /// @param defaultPluginFactoryAddress The new defaultPluginFactory address\\r\\n  event DefaultPluginFactory(address defaultPluginFactoryAddress);\\r\\n\\r\\n  /// @notice Emitted when the vaultFactory address is changed\\r\\n  /// @param newVaultFactory The new vaultFactory address\\r\\n  event VaultFactory(address newVaultFactory);\\r\\n\\r\\n  /// @notice role that can change communityFee and tickspacing in pools\\r\\n  /// @return The hash corresponding to this role\\r\\n  function POOLS_ADMINISTRATOR_ROLE() external view returns (bytes32);\\r\\n\\r\\n  /// @notice Returns `true` if `account` has been granted `role` or `account` is owner.\\r\\n  /// @param role The hash corresponding to the role\\r\\n  /// @param account The address for which the role is checked\\r\\n  /// @return bool Whether the address has this role or the owner role or not\\r\\n  function hasRoleOrOwner(bytes32 role, address account) external view returns (bool);\\r\\n\\r\\n  /// @notice Returns the current owner of the factory\\r\\n  /// @dev Can be changed by the current owner via transferOwnership(address newOwner)\\r\\n  /// @return The address of the factory owner\\r\\n  function owner() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the current poolDeployerAddress\\r\\n  /// @return The address of the poolDeployer\\r\\n  function poolDeployer() external view returns (address);\\r\\n\\r\\n  /// @notice Returns the default community fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultCommunityFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default fee\\r\\n  /// @return Fee which will be set at the creation of the pool\\r\\n  function defaultFee() external view returns (uint16);\\r\\n\\r\\n  /// @notice Returns the default tickspacing\\r\\n  /// @return Tickspacing which will be set at the creation of the pool\\r\\n  function defaultTickspacing() external view returns (int24);\\r\\n\\r\\n  /// @notice Return the current pluginFactory address\\r\\n  /// @dev This contract is used to automatically set a plugin address in new liquidity pools\\r\\n  /// @return Algebra plugin factory\\r\\n  function defaultPluginFactory() external view returns (IAlgebraPluginFactory);\\r\\n\\r\\n  /// @notice Return the current vaultFactory address\\r\\n  /// @dev This contract is used to automatically set a vault address in new liquidity pools\\r\\n  /// @return Algebra vault factory\\r\\n  function vaultFactory() external view returns (IAlgebraVaultFactory);\\r\\n\\r\\n  /// @notice Returns the default communityFee, tickspacing, fee and communityFeeVault for pool\\r\\n  /// @param pool the address of liquidity pool\\r\\n  /// @return communityFee which will be set at the creation of the pool\\r\\n  /// @return tickSpacing which will be set at the creation of the pool\\r\\n  /// @return fee which will be set at the creation of the pool\\r\\n  /// @return communityFeeVault the address of communityFeeVault\\r\\n  function defaultConfigurationForPool(\\r\\n    address pool\\r\\n  ) external view returns (uint16 communityFee, int24 tickSpacing, uint16 fee, address communityFeeVault);\\r\\n\\r\\n  /// @notice Deterministically computes the pool address given the token0 and token1\\r\\n  /// @dev The method does not check if such a pool has been created\\r\\n  /// @param token0 first token\\r\\n  /// @param token1 second token\\r\\n  /// @return pool The contract address of the Algebra pool\\r\\n  function computePoolAddress(address token0, address token1) external view returns (address pool);\\r\\n\\r\\n  /// @notice Returns the pool address for a given pair of tokens, or address 0 if it does not exist\\r\\n  /// @dev tokenA and tokenB may be passed in either token0/token1 or token1/token0 order\\r\\n  /// @param tokenA The contract address of either token0 or token1\\r\\n  /// @param tokenB The contract address of the other token\\r\\n  /// @return pool The pool address\\r\\n  function poolByPair(address tokenA, address tokenB) external view returns (address pool);\\r\\n\\r\\n  /// @notice returns keccak256 of AlgebraPool init bytecode.\\r\\n  /// @dev the hash value changes with any change in the pool bytecode\\r\\n  /// @return Keccak256 hash of AlgebraPool contract init bytecode\\r\\n  function POOL_INIT_CODE_HASH() external view returns (bytes32);\\r\\n\\r\\n  /// @return timestamp The timestamp of the beginning of the renounceOwnership process\\r\\n  function renounceOwnershipStartTimestamp() external view returns (uint256 timestamp);\\r\\n\\r\\n  /// @notice Creates a pool for the given two tokens\\r\\n  /// @param tokenA One of the two tokens in the desired pool\\r\\n  /// @param tokenB The other of the two tokens in the desired pool\\r\\n  /// @dev tokenA and tokenB may be passed in either order: token0/token1 or token1/token0.\\r\\n  /// The call will revert if the pool already exists or the token arguments are invalid.\\r\\n  /// @return pool The address of the newly created pool\\r\\n  function createPool(address tokenA, address tokenB) external returns (address pool);\\r\\n\\r\\n  /// @dev updates default community fee for new pools\\r\\n  /// @param newDefaultCommunityFee The new community fee, _must_ be <= MAX_COMMUNITY_FEE\\r\\n  function setDefaultCommunityFee(uint16 newDefaultCommunityFee) external;\\r\\n\\r\\n  /// @dev updates default fee for new pools\\r\\n  /// @param newDefaultFee The new  fee, _must_ be <= MAX_DEFAULT_FEE\\r\\n  function setDefaultFee(uint16 newDefaultFee) external;\\r\\n\\r\\n  /// @dev updates default tickspacing for new pools\\r\\n  /// @param newDefaultTickspacing The new tickspacing, _must_ be <= MAX_TICK_SPACING and >= MIN_TICK_SPACING\\r\\n  function setDefaultTickspacing(int24 newDefaultTickspacing) external;\\r\\n\\r\\n  /// @dev updates pluginFactory address\\r\\n  /// @param newDefaultPluginFactory address of new plugin factory\\r\\n  function setDefaultPluginFactory(address newDefaultPluginFactory) external;\\r\\n\\r\\n  /// @dev updates vaultFactory address\\r\\n  /// @param newVaultFactory address of new vault factory\\r\\n  function setVaultFactory(address newVaultFactory) external;\\r\\n\\r\\n  /// @notice Starts process of renounceOwnership. After that, a certain period\\r\\n  /// of time must pass before the ownership renounce can be completed.\\r\\n  function startRenounceOwnership() external;\\r\\n\\r\\n  /// @notice Stops process of renounceOwnership and removes timer.\\r\\n  function stopRenounceOwnership() external;\\r\\n\\r\\n  function getPair(address tokenA, address tokenB) external view returns (address pair);\\r\\n}\\r\\n\",\"versionPragma\":\">=0.5.0\"}}}","address":"0x8f88C193Ef770a55C37059C90384a6F97b47aAc4","bytecode":"","deployedBytecode":"0x608060405234801561001057600080fd5b506004361061011b5760003560e01c8063ad6129ac116100b2578063d17bc78311610081578063dfadc79411610066578063dfadc79414610291578063f3fef3a3146102a4578063ff3c43e1146102b757600080fd5b8063d17bc78314610276578063d9fb43531461027e57600080fd5b8063ad6129ac14610210578063b5f680ae14610218578063bbac3b8d1461022b578063c53b3fbe1461025257600080fd5b806350eea0c8116100ee57806350eea0c8146101ad57806362744405146101c05780639d754dde146101e85780639f856b8d146101fb57600080fd5b80631de4161314610120578063371abc951461015a5780634738761c1461018557806348a50fcf14610198575b600080fd5b6101477fb77a63f119f4dc2174dc6c76fc1a1565fa4f2b0dde50ed5c0465471cd9b331f681565b6040519081526020015b60405180910390f35b60005461016d906001600160a01b031681565b6040516001600160a01b039091168152602001610151565b60015461016d906001600160a01b031681565b6101ab6101a6366004610ff0565b6102ca565b005b6101ab6101bb366004610ff0565b6103ac565b6000546101d590600160b81b900461ffff1681565b60405161ffff9091168152602001610151565b60025461016d906001600160a01b031681565b6000546101d590600160a01b900461ffff1681565b6101ab610454565b6101ab610226366004610ff0565b6104bf565b6101477f63e58c34d94475ba3fc063e19800b940485850d84d09cd3c1f2c14192c559a6881565b60005461026690600160b01b900460ff1681565b6040519015158152602001610151565b6101ab610635565b6101ab61028c36600461100b565b6106c7565b6101ab61029f36600461102f565b6107ca565b6101ab6102b23660046110a4565b610948565b6101ab6102c536600461100b565b610a6f565b6002546001600160a01b031633146103295760405162461bcd60e51b815260206004820152601860248201527f6f6e6c7920616c676562726120666565206d616e61676572000000000000000060448201526064015b60405180910390fd5b6001600160a01b03811661033c57600080fd5b6001546001600160a01b039081169082160361035757600080fd5b600180546001600160a01b0319166001600160a01b0383169081179091556040519081527f34d1b5ef1c1c2c03a5000b91bef5c465790244c6751c794e5b45bed7657c38fd906020015b60405180910390a150565b6002546001600160a01b031633146104065760405162461bcd60e51b815260206004820152601860248201527f6f6e6c7920616c676562726120666565206d616e6167657200000000000000006044820152606401610320565b600380546001600160a01b0319166001600160a01b0383169081179091556040519081527fab6918ba7303f2f81e46e324b5f34af4bda562577c1da710e2034980fee1e82a906020016103a1565b6003546001600160a01b0316331461046b57600080fd5b60028054336001600160a01b031991821681179092556003805490911690556040519081527fecf97a11fb2f2bcc38d1b6881865ecc04405af2d8b953004c79b3ab398732d029060200160405180910390a1565b60405163e8ae2b6960e01b81527f63e58c34d94475ba3fc063e19800b940485850d84d09cd3c1f2c14192c559a6860048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8ae2b6990604401602060405180830381865afa158015610549573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061056d91906110ce565b6105b95760405162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e6973747261746f7200000000000000000000000000006044820152606401610320565b6001600160a01b0381166105cc57600080fd5b6000546001600160a01b03908116908216036105e757600080fd5b600080546001600160a01b0319166001600160a01b0383169081179091556040519081527f2f4db788b994a5908051d68a2340153f49870447185a244d2326861e60cc4186906020016103a1565b6002546001600160a01b0316331461068f5760405162461bcd60e51b815260206004820152601860248201527f6f6e6c7920616c676562726120666565206d616e6167657200000000000000006044820152606401610320565b6000805462ffffff60b01b191681556040517f9f4bbade0736edbd2ec12c598bdac4573af13a3b57820ae4c7da5c61703eaaff9190a1565b6002546001600160a01b031633146107215760405162461bcd60e51b815260206004820152601860248201527f6f6e6c7920616c676562726120666565206d616e6167657200000000000000006044820152606401610320565b6103e861ffff8216111561073457600080fd5b60005461ffff828116600160b81b9092041614801590610764575060005461ffff828116600160a01b9092041614155b61076d57600080fd5b6000805461ffff8316600160b81b0262ffffff60b01b1990911617600160b01b1790556040517f2d6ac59d6da98f80c7ea481d17c670ea310b000fff5cf1732d94d93652dd25b7906103a190839061ffff91909116815260200190565b6002546001600160a01b031633148061088c575060405163e8ae2b6960e01b81527fb77a63f119f4dc2174dc6c76fc1a1565fa4f2b0dde50ed5c0465471cd9b331f660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8ae2b6990604401602060405180830381865afa158015610868573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061088c91906110ce565b6108ca5760405162461bcd60e51b815260206004820152600f60248201526e37b7363c903bb4ba34323930bbb2b960891b6044820152606401610320565b80600080806108d7610c94565b92509250925060005b8481101561093f576109378787838181106108fd576108fd6110f0565b6109139260206040909202019081019150610ff0565b83898985818110610926576109266110f0565b905060400201602001358787610d6a565b6001016108e0565b50505050505050565b6002546001600160a01b0316331480610a0a575060405163e8ae2b6960e01b81527fb77a63f119f4dc2174dc6c76fc1a1565fa4f2b0dde50ed5c0465471cd9b331f660048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8ae2b6990604401602060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0a91906110ce565b610a485760405162461bcd60e51b815260206004820152600f60248201526e37b7363c903bb4ba34323930bbb2b960891b6044820152606401610320565b6000806000610a55610c94565b925092509250610a688582868686610d6a565b5050505050565b60405163e8ae2b6960e01b81527f63e58c34d94475ba3fc063e19800b940485850d84d09cd3c1f2c14192c559a6860048201523360248201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063e8ae2b6990604401602060405180830381865afa158015610af9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b1d91906110ce565b610b695760405162461bcd60e51b815260206004820152601260248201527f6f6e6c792061646d696e6973747261746f7200000000000000000000000000006044820152606401610320565b600054600160b01b900460ff16610bc25760405162461bcd60e51b815260206004820152600c60248201527f6e6f742070726f706f73656400000000000000000000000000000000000000006044820152606401610320565b60005461ffff828116600160b81b9092041614610c215760405162461bcd60e51b815260206004820152600f60248201527f696e76616c6964206e65772066656500000000000000000000000000000000006044820152606401610320565b600080547fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff16600160a01b61ffff841690810262ffffff60b01b1916919091179091556040519081527fda1e1a9a6410acc0398b3b64e0c0110b8df57e29bfe69a419cdd9ae12718c307906020016103a1565b60005460015461ffff600160a01b830416916001600160a01b0391821691168215610d0f576001600160a01b038216610d0f5760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420616c676562726120666565207265636569766572000000006044820152606401610320565b6001600160a01b038116610d655760405162461bcd60e51b815260206004820152601060248201527f696e76616c6964207265636569766572000000000000000000000000000000006044820152606401610320565b909192565b8261ffff831615610df0576000610d888261ffff86166103e8610e50565b9050610d948183611106565b9150610da1878483610ed1565b826001600160a01b0316876001600160a01b03167fb7ee7fc9dacb957cfa93faeb8ca1826292de295e18e287a347dddfde7ab48b4083604051610de691815260200190565b60405180910390a3505b610dfb868683610ed1565b846001600160a01b0316866001600160a01b03167f7a629b77ef27ad337abe438773206187960a90abfb43607826bef77d650e84b983604051610e4091815260200190565b60405180910390a3505050505050565b6000831580610e7157505082820282848281610e6e57610e6e61112d565b04145b15610e925760008211610e8357600080fd5b81810490829006151501610eca565b610e9d848484610f3b565b905060008280610eaf57610eaf61112d565b8486091115610eca576000198110610ec657600080fd5b6001015b9392505050565b600060405163a9059cbb60e01b6000526001600160a01b03841660045282602452602060006044600080895af19150813d1560203d146001600051141617169150806040525080610f3557604051637232c81f60e11b815260040160405180910390fd5b50505050565b60008383028160001985870982811083820303915050808411610f5d57600080fd5b80600003610f7057508290049050610eca565b8385870960008581038616958690049560026003880281188089028203028089028203028089028203028089028203028089028203028089029091030291819003819004600101858411909403939093029190930391909104170290509392505050565b80356001600160a01b0381168114610feb57600080fd5b919050565b60006020828403121561100257600080fd5b610eca82610fd4565b60006020828403121561101d57600080fd5b813561ffff81168114610eca57600080fd5b6000806020838503121561104257600080fd5b823567ffffffffffffffff8082111561105a57600080fd5b818501915085601f83011261106e57600080fd5b81358181111561107d57600080fd5b8660208260061b850101111561109257600080fd5b60209290920196919550909350505050565b600080604083850312156110b757600080fd5b6110c083610fd4565b946020939093013593505050565b6000602082840312156110e057600080fd5b81518015158114610eca57600080fd5b634e487b7160e01b600052603260045260246000fd5b8181038181111561112757634e487b7160e01b600052601160045260246000fd5b92915050565b634e487b7160e01b600052601260045260246000fdfea164736f6c6343000814000a","abi":[{"inputs":[{"internalType":"address","name":"_factory","type":"address"},{"internalType":"address","name":"_algebraFeeManager","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"transferFailed","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"newAlgebraFee","type":"uint16"}],"name":"AlgebraFee","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newAlgebraFeeManager","type":"address"}],"name":"AlgebraFeeManager","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint16","name":"proposedNewAlgebraFee","type":"uint16"}],"name":"AlgebraFeeProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newAlgebraFeeReceiver","type":"address"}],"name":"AlgebraFeeReceiver","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"AlgebraTokensWithdrawal","type":"event"},{"anonymous":false,"inputs":[],"name":"CancelAlgebraFeeProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newCommunityFeeReceiver","type":"address"}],"name":"CommunityFeeReceiver","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"pendingAlgebraFeeManager","type":"address"}],"name":"PendingAlgebraFeeManager","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"token","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"amount","type":"uint256"}],"name":"TokensWithdrawal","type":"event"},{"inputs":[],"name":"COMMUNITY_FEE_VAULT_ADMINISTRATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"COMMUNITY_FEE_WITHDRAWER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"newAlgebraFee","type":"uint16"}],"name":"acceptAlgebraFeeChangeProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"acceptAlgebraFeeManagerRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"algebraFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"algebraFeeManager","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"algebraFeeReceiver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"cancelAlgebraFeeChangeProposal","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newAlgebraFeeReceiver","type":"address"}],"name":"changeAlgebraFeeReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newCommunityFeeReceiver","type":"address"}],"name":"changeCommunityFeeReceiver","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"communityFeeReceiver","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"hasNewAlgebraFeeProposal","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint16","name":"newAlgebraFee","type":"uint16"}],"name":"proposeAlgebraFeeChange","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"proposedNewAlgebraFee","outputs":[{"internalType":"uint16","name":"","type":"uint16"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"_newAlgebraFeeManager","type":"address"}],"name":"transferAlgebraFeeManagerRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"token","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"internalType":"struct IAlgebraCommunityVault.WithdrawTokensParams[]","name":"params","type":"tuple[]"}],"name":"withdrawTokens","outputs":[],"stateMutability":"nonpayable","type":"function"}]}